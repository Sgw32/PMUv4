
C:\workspace\PMUv4\Debug\PMUv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003c10  08003c10  00013c10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c0  20000004  08003c48  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001c4  08003c48  000201c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00004c8c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000bf23  00000000  00000000  00024cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ddb  00000000  00000000  00030bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f0  00000000  00000000  000329b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb8  00000000  00000000  000331a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000064f6  00000000  00000000  00033d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002cdd  00000000  00000000  0003a256  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003cf33  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016ec  00000000  00000000  0003cfb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000004 	.word	0x20000004
 8000204:	00000000 	.word	0x00000000
 8000208:	08003bf8 	.word	0x08003bf8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000008 	.word	0x20000008
 8000224:	08003bf8 	.word	0x08003bf8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	; 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	d1ed      	bne.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dda:	2afd      	cmp	r2, #253	; 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	; 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	; 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	; 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__gesf2>:
 8001028:	f04f 3cff 	mov.w	ip, #4294967295
 800102c:	e006      	b.n	800103c <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__lesf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	e002      	b.n	800103c <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__cmpsf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001040:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	bf18      	it	ne
 800104e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001052:	d011      	beq.n	8001078 <__cmpsf2+0x40>
 8001054:	b001      	add	sp, #4
 8001056:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800105a:	bf18      	it	ne
 800105c:	ea90 0f01 	teqne	r0, r1
 8001060:	bf58      	it	pl
 8001062:	ebb2 0003 	subspl.w	r0, r2, r3
 8001066:	bf88      	it	hi
 8001068:	17c8      	asrhi	r0, r1, #31
 800106a:	bf38      	it	cc
 800106c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001070:	bf18      	it	ne
 8001072:	f040 0001 	orrne.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__cmpsf2+0x4c>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d105      	bne.n	8001090 <__cmpsf2+0x58>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d1e4      	bne.n	8001054 <__cmpsf2+0x1c>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d0e1      	beq.n	8001054 <__cmpsf2+0x1c>
 8001090:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_cfrcmple>:
 8001098:	4684      	mov	ip, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4661      	mov	r1, ip
 800109e:	e7ff      	b.n	80010a0 <__aeabi_cfcmpeq>

080010a0 <__aeabi_cfcmpeq>:
 80010a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010a2:	f7ff ffc9 	bl	8001038 <__cmpsf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	bf48      	it	mi
 80010aa:	f110 0f00 	cmnmi.w	r0, #0
 80010ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b0 <__aeabi_fcmpeq>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff fff4 	bl	80010a0 <__aeabi_cfcmpeq>
 80010b8:	bf0c      	ite	eq
 80010ba:	2001      	moveq	r0, #1
 80010bc:	2000      	movne	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmplt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffea 	bl	80010a0 <__aeabi_cfcmpeq>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmple>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffe0 	bl	80010a0 <__aeabi_cfcmpeq>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpge>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffd2 	bl	8001098 <__aeabi_cfrcmple>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpgt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffc8 	bl	8001098 <__aeabi_cfrcmple>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_f2uiz>:
 8001114:	0042      	lsls	r2, r0, #1
 8001116:	d20e      	bcs.n	8001136 <__aeabi_f2uiz+0x22>
 8001118:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800111c:	d30b      	bcc.n	8001136 <__aeabi_f2uiz+0x22>
 800111e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001122:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001126:	d409      	bmi.n	800113c <__aeabi_f2uiz+0x28>
 8001128:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800112c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2uiz+0x32>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d102      	bne.n	800114c <__aeabi_f2uiz+0x38>
 8001146:	f04f 30ff 	mov.w	r0, #4294967295
 800114a:	4770      	bx	lr
 800114c:	f04f 0000 	mov.w	r0, #0
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001154:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001156:	e003      	b.n	8001160 <LoopCopyDataInit>

08001158 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800115a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800115c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800115e:	3104      	adds	r1, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8001164:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001166:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001168:	d3f6      	bcc.n	8001158 <CopyDataInit>
  ldr r2, =_sbss
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 800116c:	e002      	b.n	8001174 <LoopFillZerobss>

0800116e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001170:	f842 3b04 	str.w	r3, [r2], #4

08001174 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8001176:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001178:	d3f9      	bcc.n	800116e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117a:	f000 f80f 	bl	800119c <SystemInit>
/* Call the application's entry point.*/
  bl main
 800117e:	f002 fad5 	bl	800372c <main>
  bx lr
 8001182:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001184:	08003c44 	.word	0x08003c44
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800118c:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001190:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001194:	200001c4 	.word	0x200001c4

08001198 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <SystemInit+0x4c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <SystemInit+0x50>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011c8:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 80011d0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80011d2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80011d6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SystemInit+0x54>)
 80011de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	f0ff0000 	.word	0xf0ff0000
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b510      	push	{r4, lr}
 80011f6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011f8:	f001 faa0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	fbb0 f0f3 	udiv	r0, r0, r3
 8001204:	f000 fb02 	bl	800180c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001208:	2200      	movs	r2, #0
 800120a:	4621      	mov	r1, r4
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 fabc 	bl	800178c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001214:	2000      	movs	r0, #0
 8001216:	bd10      	pop	{r4, pc}

08001218 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001226:	f000 fa9f 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ffe2 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f002 fbee 	bl	8003a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001234:	2000      	movs	r0, #0
 8001236:	bd08      	pop	{r3, pc}
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800123c:	4a02      	ldr	r2, [pc, #8]	; (8001248 <HAL_IncTick+0xc>)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000020 	.word	0x20000020

0800124c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <HAL_GetTick+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000020 	.word	0x20000020

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001258:	b513      	push	{r0, r1, r4, lr}
 800125a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800125c:	f7ff fff6 	bl	800124c <HAL_GetTick>
 8001260:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001262:	f7ff fff3 	bl	800124c <HAL_GetTick>
 8001266:	9b01      	ldr	r3, [sp, #4]
 8001268:	1b00      	subs	r0, r0, r4
 800126a:	4298      	cmp	r0, r3
 800126c:	d3f9      	bcc.n	8001262 <HAL_Delay+0xa>
  {
  }
}
 800126e:	b002      	add	sp, #8
 8001270:	bd10      	pop	{r4, pc}

08001272 <HAL_ADC_ConvCpltCallback>:
 8001272:	4770      	bx	lr

08001274 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001274:	6a43      	ldr	r3, [r0, #36]	; 0x24
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001276:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800127a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800127e:	d11b      	bne.n	80012b8 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	6892      	ldr	r2, [r2, #8]
 800128c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001290:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001294:	d10c      	bne.n	80012b0 <ADC_DMAConvCplt+0x3c>
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	b952      	cbnz	r2, 80012b0 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800129a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800129c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	bf5e      	ittt	pl
 80012a8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80012aa:	f042 0201 	orrpl.w	r2, r2, #1
 80012ae:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ffde 	bl	8001272 <HAL_ADC_ConvCpltCallback>
 80012b6:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012b8:	6a1b      	ldr	r3, [r3, #32]
  }
}
 80012ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc); 
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4718      	bx	r3

080012c2 <HAL_ADC_ConvHalfCpltCallback>:
 80012c2:	4770      	bx	lr

080012c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012c4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80012c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80012c8:	f7ff fffb 	bl	80012c2 <HAL_ADC_ConvHalfCpltCallback>
 80012cc:	bd08      	pop	{r3, pc}

080012ce <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012ce:	4770      	bx	lr

080012d0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012d2:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012da:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80012e4:	f7ff fff3 	bl	80012ce <HAL_ADC_ErrorCallback>
 80012e8:	bd08      	pop	{r3, pc}
	...

080012ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	f000 80ae 	beq.w	8001458 <HAL_ADC_ConfigChannel+0x16c>
 80012fc:	2301      	movs	r3, #1
 80012fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001302:	684b      	ldr	r3, [r1, #4]
 8001304:	6804      	ldr	r4, [r0, #0]
 8001306:	2b06      	cmp	r3, #6
 8001308:	680d      	ldr	r5, [r1, #0]
 800130a:	d818      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800130c:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8001312:	fa92 f6a2 	rbit	r6, r2
 8001316:	fab6 f686 	clz	r6, r6
 800131a:	3b01      	subs	r3, #1
 800131c:	fa92 f2a2 	rbit	r2, r2
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	435e      	muls	r6, r3
 8001326:	4353      	muls	r3, r2
 8001328:	f04f 0e1f 	mov.w	lr, #31
 800132c:	fa0e f606 	lsl.w	r6, lr, r6
 8001330:	ea27 0606 	bic.w	r6, r7, r6
 8001334:	fa05 f303 	lsl.w	r3, r5, r3
 8001338:	4333      	orrs	r3, r6
 800133a:	6363      	str	r3, [r4, #52]	; 0x34
 800133c:	e030      	b.n	80013a0 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800133e:	2b0c      	cmp	r3, #12
 8001340:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8001344:	d816      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001346:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8001348:	fa92 f6a2 	rbit	r6, r2
 800134c:	fab6 f686 	clz	r6, r6
 8001350:	3b07      	subs	r3, #7
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	fab2 f282 	clz	r2, r2
 800135a:	435e      	muls	r6, r3
 800135c:	435a      	muls	r2, r3
 800135e:	f04f 0e1f 	mov.w	lr, #31
 8001362:	fa0e f606 	lsl.w	r6, lr, r6
 8001366:	ea27 0606 	bic.w	r6, r7, r6
 800136a:	fa05 f202 	lsl.w	r2, r5, r2
 800136e:	4332      	orrs	r2, r6
 8001370:	6322      	str	r2, [r4, #48]	; 0x30
 8001372:	e015      	b.n	80013a0 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001374:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001376:	fa92 f6a2 	rbit	r6, r2
 800137a:	fab6 f686 	clz	r6, r6
 800137e:	3b0d      	subs	r3, #13
 8001380:	fa92 f2a2 	rbit	r2, r2
 8001384:	fab2 f282 	clz	r2, r2
 8001388:	435e      	muls	r6, r3
 800138a:	4353      	muls	r3, r2
 800138c:	f04f 0e1f 	mov.w	lr, #31
 8001390:	fa0e f606 	lsl.w	r6, lr, r6
 8001394:	ea27 0606 	bic.w	r6, r7, r6
 8001398:	fa05 f303 	lsl.w	r3, r5, r3
 800139c:	4333      	orrs	r3, r6
 800139e:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013a0:	2d09      	cmp	r5, #9
 80013a2:	f04f 0338 	mov.w	r3, #56	; 0x38
 80013a6:	688e      	ldr	r6, [r1, #8]
 80013a8:	d918      	bls.n	80013dc <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013aa:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80013ae:	fa93 f7a3 	rbit	r7, r3
 80013b2:	fab7 f787 	clz	r7, r7
 80013b6:	f1a5 010a 	sub.w	r1, r5, #10
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	fab3 f283 	clz	r2, r3
 80013c2:	fb01 f307 	mul.w	r3, r1, r7
 80013c6:	4351      	muls	r1, r2
 80013c8:	2707      	movs	r7, #7
 80013ca:	fa07 f303 	lsl.w	r3, r7, r3
 80013ce:	ea2e 0303 	bic.w	r3, lr, r3
 80013d2:	fa06 f201 	lsl.w	r2, r6, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	60e2      	str	r2, [r4, #12]
 80013da:	e013      	b.n	8001404 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013dc:	6927      	ldr	r7, [r4, #16]
 80013de:	fa93 f1a3 	rbit	r1, r3
 80013e2:	fab1 f181 	clz	r1, r1
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	4369      	muls	r1, r5
 80013f0:	436b      	muls	r3, r5
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f101 	lsl.w	r1, r2, r1
 80013f8:	ea27 0101 	bic.w	r1, r7, r1
 80013fc:	fa06 f203 	lsl.w	r2, r6, r3
 8001400:	430a      	orrs	r2, r1
 8001402:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001404:	f1a5 0310 	sub.w	r3, r5, #16
 8001408:	2b01      	cmp	r3, #1
 800140a:	d901      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	e01e      	b.n	800144e <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_ADC_ConfigChannel+0x174>)
 8001412:	429c      	cmp	r4, r3
 8001414:	d116      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001416:	68a3      	ldr	r3, [r4, #8]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	d4f7      	bmi.n	800140c <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800141c:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800141e:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001424:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001426:	d1f1      	bne.n	800140c <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_ADC_ConfigChannel+0x178>)
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_ADC_ConfigChannel+0x17c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001432:	230a      	movs	r3, #10
 8001434:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8001436:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0e6      	beq.n	800140c <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 800143e:	9b01      	ldr	r3, [sp, #4]
 8001440:	3b01      	subs	r3, #1
 8001442:	e7f8      	b.n	8001436 <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	2200      	movs	r2, #0
 8001450:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001454:	4618      	mov	r0, r3
 8001456:	e000      	b.n	800145a <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001458:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 800145a:	b003      	add	sp, #12
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	bf00      	nop
 8001460:	40012400 	.word	0x40012400
 8001464:	20000000 	.word	0x20000000
 8001468:	000f4240 	.word	0x000f4240

0800146c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800146c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001472:	6803      	ldr	r3, [r0, #0]
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001474:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	07d2      	lsls	r2, r2, #31
 800147a:	d501      	bpl.n	8001480 <ADC_Enable+0x14>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800147c:	2000      	movs	r0, #0
 800147e:	e026      	b.n	80014ce <ADC_Enable+0x62>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <ADC_Enable+0x68>)
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <ADC_Enable+0x6c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fbb3 f3f2 	udiv	r3, r3, r2
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 8001492:	9301      	str	r3, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	b113      	cbz	r3, 800149e <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8001498:	9b01      	ldr	r3, [sp, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	e7f9      	b.n	8001492 <ADC_Enable+0x26>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800149e:	f7ff fed5 	bl	800124c <HAL_GetTick>
 80014a2:	4606      	mov	r6, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f013 0501 	ands.w	r5, r3, #1
 80014ac:	d1e6      	bne.n	800147c <ADC_Enable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ae:	f7ff fecd 	bl	800124c <HAL_GetTick>
 80014b2:	1b80      	subs	r0, r0, r6
 80014b4:	2802      	cmp	r0, #2
 80014b6:	d9f5      	bls.n	80014a4 <ADC_Enable+0x38>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    while(ADC_IS_ENABLE(hadc) == RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014c6:	2001      	movs	r0, #1
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
}
 80014ce:	b002      	add	sp, #8
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	000f4240 	.word	0x000f4240

080014dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014dc:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80014e0:	4690      	mov	r8, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_ADC_Start_DMA+0x10c>)
 80014e4:	6802      	ldr	r2, [r0, #0]
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014e6:	4604      	mov	r4, r0
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014e8:	429a      	cmp	r2, r3
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014ea:	460f      	mov	r7, r1
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014ec:	d002      	beq.n	80014f4 <HAL_ADC_Start_DMA+0x18>
 80014ee:	493f      	ldr	r1, [pc, #252]	; (80015ec <HAL_ADC_Start_DMA+0x110>)
 80014f0:	428a      	cmp	r2, r1
 80014f2:	d103      	bne.n	80014fc <HAL_ADC_Start_DMA+0x20>
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80014fa:	d16f      	bne.n	80015dc <HAL_ADC_Start_DMA+0x100>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001500:	2b01      	cmp	r3, #1
 8001502:	d06e      	beq.n	80015e2 <HAL_ADC_Start_DMA+0x106>
 8001504:	2301      	movs	r3, #1
 8001506:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff ffae 	bl	800146c <ADC_Enable>
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001510:	2800      	cmp	r0, #0
 8001512:	d15e      	bne.n	80015d2 <HAL_ADC_Start_DMA+0xf6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001514:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001516:	6821      	ldr	r1, [r4, #0]
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001518:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_ADC_Start_DMA+0x110>)
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800151e:	f020 0001 	bic.w	r0, r0, #1
 8001522:	f440 7080 	orr.w	r0, r0, #256	; 0x100
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001526:	4299      	cmp	r1, r3
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001528:	62a0      	str	r0, [r4, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800152a:	d104      	bne.n	8001536 <HAL_ADC_Start_DMA+0x5a>
 800152c:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <HAL_ADC_Start_DMA+0x10c>)
 800152e:	6853      	ldr	r3, [r2, #4]
 8001530:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001534:	d10d      	bne.n	8001552 <HAL_ADC_Start_DMA+0x76>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001538:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800153c:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800153e:	684b      	ldr	r3, [r1, #4]
 8001540:	055a      	lsls	r2, r3, #21
 8001542:	d513      	bpl.n	800156c <HAL_ADC_Start_DMA+0x90>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001544:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800154a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001550:	e00c      	b.n	800156c <HAL_ADC_Start_DMA+0x90>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001558:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800155a:	6853      	ldr	r3, [r2, #4]
 800155c:	055b      	lsls	r3, r3, #21
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800155e:	bf41      	itttt	mi
 8001560:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001562:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001566:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800156a:	62a0      	strmi	r0, [r4, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800156c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800156e:	6a20      	ldr	r0, [r4, #32]
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001574:	bf18      	it	ne
 8001576:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001578:	f04f 0500 	mov.w	r5, #0
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157c:	bf18      	it	ne
 800157e:	f023 0306 	bicne.w	r3, r3, #6
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001582:	62e3      	str	r3, [r4, #44]	; 0x2c
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_ADC_Start_DMA+0x114>)
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001586:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800158a:	6283      	str	r3, [r0, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_ADC_Start_DMA+0x118>)
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800158e:	463a      	mov	r2, r7
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001590:	62c3      	str	r3, [r0, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_ADC_Start_DMA+0x11c>)
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001594:	314c      	adds	r1, #76	; 0x4c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001596:	6303      	str	r3, [r0, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001598:	f06f 0302 	mvn.w	r3, #2
 800159c:	f841 3c4c 	str.w	r3, [r1, #-76]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015a0:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	f841 3c44 	str.w	r3, [r1, #-68]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ac:	4643      	mov	r3, r8
 80015ae:	f000 f979 	bl	80018a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015b2:	6823      	ldr	r3, [r4, #0]
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015b4:	4628      	mov	r0, r5
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80015bc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	bf0c      	ite	eq
 80015c4:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015c8:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015d2:	2300      	movs	r3, #0
 80015d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80015d8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015dc:	2001      	movs	r0, #1
 80015de:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015e2:	2002      	movs	r0, #2
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80015e4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80015e8:	40012400 	.word	0x40012400
 80015ec:	40012800 	.word	0x40012800
 80015f0:	08001275 	.word	0x08001275
 80015f4:	080012c5 	.word	0x080012c5
 80015f8:	080012d1 	.word	0x080012d1

080015fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015fe:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001600:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	07d2      	lsls	r2, r2, #31
 8001606:	d401      	bmi.n	800160c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001608:	2000      	movs	r0, #0
 800160a:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001614:	f7ff fe1a 	bl	800124c <HAL_GetTick>
 8001618:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	07db      	lsls	r3, r3, #31
 8001620:	d5f2      	bpl.n	8001608 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001622:	f7ff fe13 	bl	800124c <HAL_GetTick>
 8001626:	1b40      	subs	r0, r0, r5
 8001628:	2802      	cmp	r0, #2
 800162a:	d9f6      	bls.n	800161a <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162e:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001636:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800163e:	bd38      	pop	{r3, r4, r5, pc}

08001640 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001640:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001642:	4604      	mov	r4, r0
 8001644:	2800      	cmp	r0, #0
 8001646:	f000 8088 	beq.w	800175a <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800164c:	b923      	cbnz	r3, 8001658 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800164e:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001650:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001654:	f002 fa22 	bl	8003a9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff ffcf 	bl	80015fc <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800165e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001660:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001666:	d175      	bne.n	8001754 <HAL_ADC_Init+0x114>
 8001668:	2800      	cmp	r0, #0
 800166a:	d173      	bne.n	8001754 <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001670:	f023 0302 	bic.w	r3, r3, #2
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800167a:	68e0      	ldr	r0, [r4, #12]
 800167c:	2302      	movs	r3, #2
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001686:	6861      	ldr	r1, [r4, #4]
 8001688:	69e2      	ldr	r2, [r4, #28]
 800168a:	fa00 f303 	lsl.w	r3, r0, r3
 800168e:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001690:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001692:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001694:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001698:	d005      	beq.n	80016a6 <HAL_ADC_Init+0x66>
 800169a:	2901      	cmp	r1, #1
 800169c:	bf14      	ite	ne
 800169e:	2200      	movne	r2, #0
 80016a0:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80016a4:	e000      	b.n	80016a8 <HAL_ADC_Init+0x68>
 80016a6:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a8:	6965      	ldr	r5, [r4, #20]
 80016aa:	2d01      	cmp	r5, #1
 80016ac:	d115      	bne.n	80016da <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ae:	b960      	cbnz	r0, 80016ca <HAL_ADC_Init+0x8a>
 80016b0:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80016b4:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016b8:	fab0 f580 	clz	r5, r0
 80016bc:	69a0      	ldr	r0, [r4, #24]
 80016be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c2:	3801      	subs	r0, #1
 80016c4:	40a8      	lsls	r0, r5
 80016c6:	4302      	orrs	r2, r0
 80016c8:	e007      	b.n	80016da <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016cc:	f040 0020 	orr.w	r0, r0, #32
 80016d0:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80016d4:	f040 0001 	orr.w	r0, r0, #1
 80016d8:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016da:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016e0:	6845      	ldr	r5, [r0, #4]
 80016e2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80016e6:	ea42 0205 	orr.w	r2, r2, r5
 80016ea:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016ec:	6885      	ldr	r5, [r0, #8]
 80016ee:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_ADC_Init+0x120>)
 80016f0:	ea02 0205 	and.w	r2, r2, r5
 80016f4:	ea42 0203 	orr.w	r2, r2, r3
 80016f8:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016fa:	d001      	beq.n	8001700 <HAL_ADC_Init+0xc0>
 80016fc:	2901      	cmp	r1, #1
 80016fe:	d10a      	bne.n	8001716 <HAL_ADC_Init+0xd6>
 8001700:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8001704:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001708:	fab2 f282 	clz	r2, r2
 800170c:	6921      	ldr	r1, [r4, #16]
 800170e:	3901      	subs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	e000      	b.n	8001718 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 8001716:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001718:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800171a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800171e:	430a      	orrs	r2, r1
 8001720:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001722:	6881      	ldr	r1, [r0, #8]
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_ADC_Init+0x124>)
 8001726:	400a      	ands	r2, r1
 8001728:	4293      	cmp	r3, r2
 800172a:	d108      	bne.n	800173e <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800172c:	2000      	movs	r0, #0
 800172e:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001732:	f023 0303 	bic.w	r3, r3, #3
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	62a3      	str	r3, [r4, #40]	; 0x28
 800173c:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800173e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001740:	f023 0312 	bic.w	r3, r3, #18
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001752:	e002      	b.n	800175a <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	ffe1f7fd 	.word	0xffe1f7fd
 8001764:	ff1f0efe 	.word	0xff1f0efe

08001768 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800176a:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800176e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001772:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001782:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001784:	60d3      	str	r3, [r2, #12]
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178e:	b530      	push	{r4, r5, lr}
 8001790:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001792:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001796:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	2c04      	cmp	r4, #4
 800179e:	bf28      	it	cs
 80017a0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	2d06      	cmp	r5, #6

  return (
 80017a4:	f04f 0501 	mov.w	r5, #1
 80017a8:	fa05 f404 	lsl.w	r4, r5, r4
 80017ac:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b0:	bf8c      	ite	hi
 80017b2:	3b03      	subhi	r3, #3
 80017b4:	2300      	movls	r3, #0

  return (
 80017b6:	400c      	ands	r4, r1
 80017b8:	409c      	lsls	r4, r3
 80017ba:	fa05 f303 	lsl.w	r3, r5, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80017c2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80017c4:	ea42 0204 	orr.w	r2, r2, r4
 80017c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	bfaf      	iteee	ge
 80017ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	4b07      	ldrlt	r3, [pc, #28]	; (80017f0 <HAL_NVIC_SetPriority+0x64>)
 80017d4:	f000 000f 	andlt.w	r0, r0, #15
 80017d8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	bfa5      	ittet	ge
 80017dc:	b2d2      	uxtbge	r2, r2
 80017de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80017e8:	bd30      	pop	{r4, r5, pc}
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	e000ed14 	.word	0xe000ed14

080017f4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017f4:	0942      	lsrs	r2, r0, #5
 80017f6:	2301      	movs	r3, #1
 80017f8:	f000 001f 	and.w	r0, r0, #31
 80017fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <HAL_NVIC_EnableIRQ+0x14>)
 8001802:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	3801      	subs	r0, #1
 800180e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001812:	d20a      	bcs.n	800182a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_SYSTICK_Config+0x28>)
 8001818:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800183a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	bf0c      	ite	eq
 8001840:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001844:	f022 0204 	bicne.w	r2, r2, #4
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	4770      	bx	lr
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001850:	4770      	bx	lr

08001852 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001852:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001854:	f7ff fffc 	bl	8001850 <HAL_SYSTICK_Callback>
 8001858:	bd08      	pop	{r3, pc}

0800185a <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800185a:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800185c:	b300      	cbz	r0, 80018a0 <HAL_DMA_Init+0x46>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 800185e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001862:	b90b      	cbnz	r3, 8001868 <HAL_DMA_Init+0xe>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8001864:	f880 3020 	strb.w	r3, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001868:	6882      	ldr	r2, [r0, #8]
 800186a:	6841      	ldr	r1, [r0, #4]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800186c:	6804      	ldr	r4, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800186e:	4311      	orrs	r1, r2
 8001870:	68c2      	ldr	r2, [r0, #12]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001872:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001874:	4311      	orrs	r1, r2
 8001876:	6902      	ldr	r2, [r0, #16]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001878:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800187c:	4311      	orrs	r1, r2
 800187e:	6942      	ldr	r2, [r0, #20]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001880:	f023 0330 	bic.w	r3, r3, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001884:	4311      	orrs	r1, r2
 8001886:	6982      	ldr	r2, [r0, #24]
 8001888:	4311      	orrs	r1, r2
 800188a:	69c2      	ldr	r2, [r0, #28]
 800188c:	430a      	orrs	r2, r1
 800188e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001890:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001892:	2201      	movs	r2, #1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001898:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  return HAL_OK;
 800189c:	4618      	mov	r0, r3
 800189e:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  
  return HAL_OK;
}
 80018a2:	bd10      	pop	{r4, pc}

080018a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 80018a6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80018aa:	2c01      	cmp	r4, #1
 80018ac:	f04f 0402 	mov.w	r4, #2
 80018b0:	d023      	beq.n	80018fa <HAL_DMA_Start_IT+0x56>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b2:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018b6:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 80018b8:	2501      	movs	r5, #1
 80018ba:	f880 5020 	strb.w	r5, [r0, #32]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018be:	6825      	ldr	r5, [r4, #0]
 80018c0:	f025 0501 	bic.w	r5, r5, #1
 80018c4:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018c6:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c8:	6843      	ldr	r3, [r0, #4]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
  
  return HAL_OK;
 80018ca:	2000      	movs	r0, #0
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018cc:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ce:	bf0b      	itete	eq
 80018d0:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80018d2:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018d4:	60e1      	streq	r1, [r4, #12]
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80018d6:	60e2      	strne	r2, [r4, #12]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6023      	str	r3, [r4, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6023      	str	r3, [r4, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6023      	str	r3, [r4, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6023      	str	r3, [r4, #0]
  
  return HAL_OK;
 80018f8:	bd30      	pop	{r4, r5, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 80018fa:	4620      	mov	r0, r4
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
  
  return HAL_OK;
} 
 80018fc:	bd30      	pop	{r4, r5, pc}
	...

08001900 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001900:	b570      	push	{r4, r5, r6, lr}
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001902:	6803      	ldr	r3, [r0, #0]
 8001904:	4dab      	ldr	r5, [pc, #684]	; (8001bb4 <HAL_DMA_IRQHandler+0x2b4>)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001906:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001908:	42ab      	cmp	r3, r5
 800190a:	d91c      	bls.n	8001946 <HAL_DMA_IRQHandler+0x46>
 800190c:	4aaa      	ldr	r2, [pc, #680]	; (8001bb8 <HAL_DMA_IRQHandler+0x2b8>)
 800190e:	6811      	ldr	r1, [r2, #0]
 8001910:	3208      	adds	r2, #8
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_DMA_IRQHandler+0x32>
 8001916:	3214      	adds	r2, #20
 8001918:	4293      	cmp	r3, r2
 800191a:	d00c      	beq.n	8001936 <HAL_DMA_IRQHandler+0x36>
 800191c:	3214      	adds	r2, #20
 800191e:	4293      	cmp	r3, r2
 8001920:	d00b      	beq.n	800193a <HAL_DMA_IRQHandler+0x3a>
 8001922:	3214      	adds	r2, #20
 8001924:	4293      	cmp	r3, r2
 8001926:	bf14      	ite	ne
 8001928:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 800192c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 8001930:	e005      	b.n	800193e <HAL_DMA_IRQHandler+0x3e>
 8001932:	2208      	movs	r2, #8
 8001934:	e003      	b.n	800193e <HAL_DMA_IRQHandler+0x3e>
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	e001      	b.n	800193e <HAL_DMA_IRQHandler+0x3e>
 800193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193e:	420a      	tst	r2, r1
 8001940:	f000 808b 	beq.w	8001a5a <HAL_DMA_IRQHandler+0x15a>
 8001944:	e02b      	b.n	800199e <HAL_DMA_IRQHandler+0x9e>
 8001946:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_DMA_IRQHandler+0x2bc>)
 8001948:	6811      	ldr	r1, [r2, #0]
 800194a:	3208      	adds	r2, #8
 800194c:	4293      	cmp	r3, r2
 800194e:	d015      	beq.n	800197c <HAL_DMA_IRQHandler+0x7c>
 8001950:	3214      	adds	r2, #20
 8001952:	4293      	cmp	r3, r2
 8001954:	d014      	beq.n	8001980 <HAL_DMA_IRQHandler+0x80>
 8001956:	3214      	adds	r2, #20
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_DMA_IRQHandler+0x84>
 800195c:	3214      	adds	r2, #20
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_DMA_IRQHandler+0x8a>
 8001962:	3214      	adds	r2, #20
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_DMA_IRQHandler+0x90>
 8001968:	3214      	adds	r2, #20
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_DMA_IRQHandler+0x96>
 800196e:	42ab      	cmp	r3, r5
 8001970:	bf14      	ite	ne
 8001972:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 8001976:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
 800197a:	e00e      	b.n	800199a <HAL_DMA_IRQHandler+0x9a>
 800197c:	2208      	movs	r2, #8
 800197e:	e00c      	b.n	800199a <HAL_DMA_IRQHandler+0x9a>
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	e00a      	b.n	800199a <HAL_DMA_IRQHandler+0x9a>
 8001984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001988:	e007      	b.n	800199a <HAL_DMA_IRQHandler+0x9a>
 800198a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800198e:	e004      	b.n	800199a <HAL_DMA_IRQHandler+0x9a>
 8001990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001994:	e001      	b.n	800199a <HAL_DMA_IRQHandler+0x9a>
 8001996:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800199a:	420a      	tst	r2, r1
 800199c:	d07a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x194>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	0712      	lsls	r2, r2, #28
 80019a2:	d557      	bpl.n	8001a54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80019a4:	681a      	ldr	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80019a6:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80019a8:	f022 0208 	bic.w	r2, r2, #8
 80019ac:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80019ae:	d918      	bls.n	80019e2 <HAL_DMA_IRQHandler+0xe2>
 80019b0:	4a83      	ldr	r2, [pc, #524]	; (8001bc0 <HAL_DMA_IRQHandler+0x2c0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_DMA_IRQHandler+0xd2>
 80019b6:	3214      	adds	r2, #20
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00c      	beq.n	80019d6 <HAL_DMA_IRQHandler+0xd6>
 80019bc:	3214      	adds	r2, #20
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00b      	beq.n	80019da <HAL_DMA_IRQHandler+0xda>
 80019c2:	3214      	adds	r2, #20
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf0c      	ite	eq
 80019c8:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 80019cc:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 80019d0:	e005      	b.n	80019de <HAL_DMA_IRQHandler+0xde>
 80019d2:	2308      	movs	r3, #8
 80019d4:	e003      	b.n	80019de <HAL_DMA_IRQHandler+0xde>
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	e001      	b.n	80019de <HAL_DMA_IRQHandler+0xde>
 80019da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019de:	4a76      	ldr	r2, [pc, #472]	; (8001bb8 <HAL_DMA_IRQHandler+0x2b8>)
 80019e0:	e029      	b.n	8001a36 <HAL_DMA_IRQHandler+0x136>
 80019e2:	4a78      	ldr	r2, [pc, #480]	; (8001bc4 <HAL_DMA_IRQHandler+0x2c4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d016      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x116>
 80019e8:	3214      	adds	r2, #20
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d015      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x11a>
 80019ee:	3214      	adds	r2, #20
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d014      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x11e>
 80019f4:	3214      	adds	r2, #20
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d014      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x124>
 80019fa:	3214      	adds	r2, #20
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d014      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x12a>
 8001a00:	3214      	adds	r2, #20
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d014      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x130>
 8001a06:	3214      	adds	r2, #20
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	bf0c      	ite	eq
 8001a0c:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8001a10:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 8001a14:	e00e      	b.n	8001a34 <HAL_DMA_IRQHandler+0x134>
 8001a16:	2308      	movs	r3, #8
 8001a18:	e00c      	b.n	8001a34 <HAL_DMA_IRQHandler+0x134>
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	e00a      	b.n	8001a34 <HAL_DMA_IRQHandler+0x134>
 8001a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a22:	e007      	b.n	8001a34 <HAL_DMA_IRQHandler+0x134>
 8001a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a28:	e004      	b.n	8001a34 <HAL_DMA_IRQHandler+0x134>
 8001a2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a2e:	e001      	b.n	8001a34 <HAL_DMA_IRQHandler+0x134>
 8001a30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a34:	4a61      	ldr	r2, [pc, #388]	; (8001bbc <HAL_DMA_IRQHandler+0x2bc>)
 8001a36:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6363      	str	r3, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001a40:	2304      	movs	r3, #4
 8001a42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8001a46:	2300      	movs	r3, #0
 8001a48:	f884 3020 	strb.w	r3, [r4, #32]
      
      if (hdma->XferErrorCallback != NULL)
 8001a4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a4e:	b10b      	cbz	r3, 8001a54 <HAL_DMA_IRQHandler+0x154>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001a50:	4620      	mov	r0, r4
 8001a52:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	42ab      	cmp	r3, r5
 8001a58:	d91c      	bls.n	8001a94 <HAL_DMA_IRQHandler+0x194>
 8001a5a:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_DMA_IRQHandler+0x2b8>)
 8001a5c:	6811      	ldr	r1, [r2, #0]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00d      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x180>
 8001a64:	3214      	adds	r2, #20
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00c      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x184>
 8001a6a:	3214      	adds	r2, #20
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00b      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x188>
 8001a70:	3214      	adds	r2, #20
 8001a72:	4293      	cmp	r3, r2
 8001a74:	bf14      	ite	ne
 8001a76:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 8001a7a:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
 8001a7e:	e005      	b.n	8001a8c <HAL_DMA_IRQHandler+0x18c>
 8001a80:	2204      	movs	r2, #4
 8001a82:	e003      	b.n	8001a8c <HAL_DMA_IRQHandler+0x18c>
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	e001      	b.n	8001a8c <HAL_DMA_IRQHandler+0x18c>
 8001a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8c:	420a      	tst	r2, r1
 8001a8e:	f000 8136 	beq.w	8001cfe <HAL_DMA_IRQHandler+0x3fe>
 8001a92:	e02b      	b.n	8001aec <HAL_DMA_IRQHandler+0x1ec>
 8001a94:	4a49      	ldr	r2, [pc, #292]	; (8001bbc <HAL_DMA_IRQHandler+0x2bc>)
 8001a96:	6811      	ldr	r1, [r2, #0]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d015      	beq.n	8001aca <HAL_DMA_IRQHandler+0x1ca>
 8001a9e:	3214      	adds	r2, #20
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d014      	beq.n	8001ace <HAL_DMA_IRQHandler+0x1ce>
 8001aa4:	3214      	adds	r2, #20
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x1d2>
 8001aaa:	3214      	adds	r2, #20
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x1d8>
 8001ab0:	3214      	adds	r2, #20
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_DMA_IRQHandler+0x1de>
 8001ab6:	3214      	adds	r2, #20
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x1e4>
 8001abc:	42ab      	cmp	r3, r5
 8001abe:	bf14      	ite	ne
 8001ac0:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 8001ac4:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
 8001ac8:	e00e      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x1e8>
 8001aca:	2204      	movs	r2, #4
 8001acc:	e00c      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x1e8>
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	e00a      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x1e8>
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	e007      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x1e8>
 8001ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001adc:	e004      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x1e8>
 8001ade:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ae2:	e001      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x1e8>
 8001ae4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ae8:	420a      	tst	r2, r1
 8001aea:	d03a      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x262>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	0756      	lsls	r6, r2, #29
 8001af0:	d521      	bpl.n	8001b36 <HAL_DMA_IRQHandler+0x236>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	0690      	lsls	r0, r2, #26
 8001af6:	d403      	bmi.n	8001b00 <HAL_DMA_IRQHandler+0x200>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b00:	42ab      	cmp	r3, r5
 8001b02:	d97d      	bls.n	8001c00 <HAL_DMA_IRQHandler+0x300>
 8001b04:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <HAL_DMA_IRQHandler+0x2c0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d073      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x2f2>
 8001b0a:	3214      	adds	r2, #20
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d072      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x2f6>
 8001b10:	3214      	adds	r2, #20
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d071      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x2fa>
 8001b16:	3214      	adds	r2, #20
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf14      	ite	ne
 8001b1c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001b20:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001b24:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <HAL_DMA_IRQHandler+0x2b8>)
 8001b26:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001b28:	2311      	movs	r3, #17
 8001b2a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8001b2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b30:	b10b      	cbz	r3, 8001b36 <HAL_DMA_IRQHandler+0x236>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b32:	4620      	mov	r0, r4
 8001b34:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	42ab      	cmp	r3, r5
 8001b3a:	d913      	bls.n	8001b64 <HAL_DMA_IRQHandler+0x264>
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <HAL_DMA_IRQHandler+0x2b8>)
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	3208      	adds	r2, #8
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d029      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x29a>
 8001b46:	3214      	adds	r2, #20
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d028      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
 8001b4c:	3214      	adds	r2, #20
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d027      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x2a2>
 8001b52:	3214      	adds	r2, #20
 8001b54:	4293      	cmp	r3, r2
 8001b56:	bf14      	ite	ne
 8001b58:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001b5c:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001b60:	e034      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <HAL_DMA_IRQHandler+0x2bc>)
 8001b66:	6811      	ldr	r1, [r2, #0]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d015      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x29a>
 8001b6e:	3214      	adds	r2, #20
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d014      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
 8001b74:	3214      	adds	r2, #20
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x2a2>
 8001b7a:	3214      	adds	r2, #20
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a8>
 8001b80:	3214      	adds	r2, #20
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_DMA_IRQHandler+0x2ae>
 8001b86:	3214      	adds	r2, #20
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d01d      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2c8>
 8001b8c:	42ab      	cmp	r3, r5
 8001b8e:	bf14      	ite	ne
 8001b90:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001b94:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8001b98:	e018      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	e014      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba6:	e011      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bac:	e00e      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb2:	e00b      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2cc>
 8001bb4:	40020080 	.word	0x40020080
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020408 	.word	0x40020408
 8001bc4:	40020008 	.word	0x40020008
 8001bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bcc:	420a      	tst	r2, r1
 8001bce:	bf14      	ite	ne
 8001bd0:	2201      	movne	r2, #1
 8001bd2:	2200      	moveq	r2, #0
 8001bd4:	2a00      	cmp	r2, #0
 8001bd6:	f000 8094 	beq.w	8001d02 <HAL_DMA_IRQHandler+0x402>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	0791      	lsls	r1, r2, #30
 8001bde:	f140 8090 	bpl.w	8001d02 <HAL_DMA_IRQHandler+0x402>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	0692      	lsls	r2, r2, #26
 8001be6:	d436      	bmi.n	8001c56 <HAL_DMA_IRQHandler+0x356>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f022 0202 	bic.w	r2, r2, #2
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e031      	b.n	8001c56 <HAL_DMA_IRQHandler+0x356>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e796      	b.n	8001b24 <HAL_DMA_IRQHandler+0x224>
 8001bf6:	2340      	movs	r3, #64	; 0x40
 8001bf8:	e794      	b.n	8001b24 <HAL_DMA_IRQHandler+0x224>
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	e791      	b.n	8001b24 <HAL_DMA_IRQHandler+0x224>
 8001c00:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <HAL_DMA_IRQHandler+0x404>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d016      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x334>
 8001c06:	3214      	adds	r2, #20
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d015      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x338>
 8001c0c:	3214      	adds	r2, #20
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d014      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x33c>
 8001c12:	3214      	adds	r2, #20
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d014      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x342>
 8001c18:	3214      	adds	r2, #20
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d014      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x348>
 8001c1e:	3214      	adds	r2, #20
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d014      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x34e>
 8001c24:	3214      	adds	r2, #20
 8001c26:	4293      	cmp	r3, r2
 8001c28:	bf14      	ite	ne
 8001c2a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001c2e:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8001c32:	e00e      	b.n	8001c52 <HAL_DMA_IRQHandler+0x352>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e00c      	b.n	8001c52 <HAL_DMA_IRQHandler+0x352>
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	e00a      	b.n	8001c52 <HAL_DMA_IRQHandler+0x352>
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c40:	e007      	b.n	8001c52 <HAL_DMA_IRQHandler+0x352>
 8001c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c46:	e004      	b.n	8001c52 <HAL_DMA_IRQHandler+0x352>
 8001c48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c4c:	e001      	b.n	8001c52 <HAL_DMA_IRQHandler+0x352>
 8001c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c52:	4a2d      	ldr	r2, [pc, #180]	; (8001d08 <HAL_DMA_IRQHandler+0x408>)
 8001c54:	e767      	b.n	8001b26 <HAL_DMA_IRQHandler+0x226>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c56:	42ab      	cmp	r3, r5
 8001c58:	d918      	bls.n	8001c8c <HAL_DMA_IRQHandler+0x38c>
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <HAL_DMA_IRQHandler+0x40c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x37c>
 8001c60:	3214      	adds	r2, #20
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00c      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x380>
 8001c66:	3214      	adds	r2, #20
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00b      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x384>
 8001c6c:	3214      	adds	r2, #20
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	bf14      	ite	ne
 8001c72:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001c76:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001c7a:	e005      	b.n	8001c88 <HAL_DMA_IRQHandler+0x388>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e003      	b.n	8001c88 <HAL_DMA_IRQHandler+0x388>
 8001c80:	2320      	movs	r3, #32
 8001c82:	e001      	b.n	8001c88 <HAL_DMA_IRQHandler+0x388>
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_DMA_IRQHandler+0x410>)
 8001c8a:	e029      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x3e0>
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_DMA_IRQHandler+0x404>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d016      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x3c0>
 8001c92:	3214      	adds	r2, #20
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d015      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x3c4>
 8001c98:	3214      	adds	r2, #20
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d014      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x3c8>
 8001c9e:	3214      	adds	r2, #20
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d014      	beq.n	8001cce <HAL_DMA_IRQHandler+0x3ce>
 8001ca4:	3214      	adds	r2, #20
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d014      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x3d4>
 8001caa:	3214      	adds	r2, #20
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d014      	beq.n	8001cda <HAL_DMA_IRQHandler+0x3da>
 8001cb0:	3214      	adds	r2, #20
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	bf14      	ite	ne
 8001cb6:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001cba:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001cbe:	e00e      	b.n	8001cde <HAL_DMA_IRQHandler+0x3de>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e00c      	b.n	8001cde <HAL_DMA_IRQHandler+0x3de>
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e00a      	b.n	8001cde <HAL_DMA_IRQHandler+0x3de>
 8001cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ccc:	e007      	b.n	8001cde <HAL_DMA_IRQHandler+0x3de>
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	e004      	b.n	8001cde <HAL_DMA_IRQHandler+0x3de>
 8001cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd8:	e001      	b.n	8001cde <HAL_DMA_IRQHandler+0x3de>
 8001cda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_DMA_IRQHandler+0x408>)
 8001ce0:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8001ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ce4:	6363      	str	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cec:	2300      	movs	r3, #0
 8001cee:	f884 3020 	strb.w	r3, [r4, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8001cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cf4:	b12b      	cbz	r3, 8001d02 <HAL_DMA_IRQHandler+0x402>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001cf6:	4620      	mov	r0, r4
      }
    }
  }
}
 8001cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_UNLOCK(hdma);
    
      if(hdma->XferCpltCallback != NULL)
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001cfc:	4718      	bx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	e71c      	b.n	8001b3c <HAL_DMA_IRQHandler+0x23c>
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
 8001d04:	40020008 	.word	0x40020008
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020408 	.word	0x40020408
 8001d10:	40020400 	.word	0x40020400

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8001d18:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d1a:	4626      	mov	r6, r4
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1e:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001eb4 <HAL_GPIO_Init+0x1a0>
 8001d22:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001eb8 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d26:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8001d28:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d2a:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8001d2c:	ea32 0505 	bics.w	r5, r2, r5
 8001d30:	f040 80b3 	bne.w	8001e9a <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d34:	684d      	ldr	r5, [r1, #4]
 8001d36:	2d12      	cmp	r5, #18
 8001d38:	d028      	beq.n	8001d8c <HAL_GPIO_Init+0x78>
 8001d3a:	d80e      	bhi.n	8001d5a <HAL_GPIO_Init+0x46>
 8001d3c:	2d02      	cmp	r5, #2
 8001d3e:	d022      	beq.n	8001d86 <HAL_GPIO_Init+0x72>
 8001d40:	d804      	bhi.n	8001d4c <HAL_GPIO_Init+0x38>
 8001d42:	b335      	cbz	r5, 8001d92 <HAL_GPIO_Init+0x7e>
 8001d44:	2d01      	cmp	r5, #1
 8001d46:	d12d      	bne.n	8001da4 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d48:	68cc      	ldr	r4, [r1, #12]
          break;
 8001d4a:	e02b      	b.n	8001da4 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4c:	2d03      	cmp	r5, #3
 8001d4e:	d018      	beq.n	8001d82 <HAL_GPIO_Init+0x6e>
 8001d50:	2d11      	cmp	r5, #17
 8001d52:	d127      	bne.n	8001da4 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d54:	68cc      	ldr	r4, [r1, #12]
 8001d56:	3404      	adds	r4, #4
          break;
 8001d58:	e024      	b.n	8001da4 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5a:	4f54      	ldr	r7, [pc, #336]	; (8001eac <HAL_GPIO_Init+0x198>)
 8001d5c:	42bd      	cmp	r5, r7
 8001d5e:	d018      	beq.n	8001d92 <HAL_GPIO_Init+0x7e>
 8001d60:	d806      	bhi.n	8001d70 <HAL_GPIO_Init+0x5c>
 8001d62:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001ebc <HAL_GPIO_Init+0x1a8>
 8001d66:	4545      	cmp	r5, r8
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x7e>
 8001d6a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001d6e:	e005      	b.n	8001d7c <HAL_GPIO_Init+0x68>
 8001d70:	4575      	cmp	r5, lr
 8001d72:	d00e      	beq.n	8001d92 <HAL_GPIO_Init+0x7e>
 8001d74:	4565      	cmp	r5, ip
 8001d76:	d00c      	beq.n	8001d92 <HAL_GPIO_Init+0x7e>
 8001d78:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001ec0 <HAL_GPIO_Init+0x1ac>
 8001d7c:	4545      	cmp	r5, r8
 8001d7e:	d111      	bne.n	8001da4 <HAL_GPIO_Init+0x90>
 8001d80:	e007      	b.n	8001d92 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d82:	2400      	movs	r4, #0
 8001d84:	e00e      	b.n	8001da4 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d86:	68cc      	ldr	r4, [r1, #12]
 8001d88:	3408      	adds	r4, #8
          break;
 8001d8a:	e00b      	b.n	8001da4 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d8c:	68cc      	ldr	r4, [r1, #12]
 8001d8e:	340c      	adds	r4, #12
          break;
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001d92:	688c      	ldr	r4, [r1, #8]
 8001d94:	b12c      	cbz	r4, 8001da2 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8001d96:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8001d98:	bf0c      	ite	eq
 8001d9a:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001d9c:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d9e:	2408      	movs	r4, #8
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da2:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da4:	2aff      	cmp	r2, #255	; 0xff
 8001da6:	bf97      	itett	ls
 8001da8:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001daa:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dae:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001db2:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db4:	bf84      	itt	hi
 8001db6:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001dba:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001dbc:	f04f 080f 	mov.w	r8, #15
 8001dc0:	fa08 fa05 	lsl.w	sl, r8, r5
 8001dc4:	ea29 090a 	bic.w	r9, r9, sl
 8001dc8:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dcc:	bf88      	it	hi
 8001dce:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001dd2:	ea49 0505 	orr.w	r5, r9, r5
 8001dd6:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001dda:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001dde:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001de2:	d05a      	beq.n	8001e9a <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de4:	4d32      	ldr	r5, [pc, #200]	; (8001eb0 <HAL_GPIO_Init+0x19c>)
 8001de6:	4f32      	ldr	r7, [pc, #200]	; (8001eb0 <HAL_GPIO_Init+0x19c>)
 8001de8:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dea:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dee:	f045 0501 	orr.w	r5, r5, #1
 8001df2:	61bd      	str	r5, [r7, #24]
 8001df4:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001df6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfa:	f005 0501 	and.w	r5, r5, #1
 8001dfe:	9501      	str	r5, [sp, #4]
 8001e00:	9d01      	ldr	r5, [sp, #4]
 8001e02:	f026 0503 	bic.w	r5, r6, #3
 8001e06:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001e0a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8001e0e:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e12:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e16:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e1a:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e1c:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e20:	d010      	beq.n	8001e44 <HAL_GPIO_Init+0x130>
 8001e22:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001e26:	42b8      	cmp	r0, r7
 8001e28:	d00f      	beq.n	8001e4a <HAL_GPIO_Init+0x136>
 8001e2a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001e2e:	42b8      	cmp	r0, r7
 8001e30:	d00e      	beq.n	8001e50 <HAL_GPIO_Init+0x13c>
 8001e32:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001e36:	42b8      	cmp	r0, r7
 8001e38:	bf0c      	ite	eq
 8001e3a:	f04f 0b03 	moveq.w	fp, #3
 8001e3e:	f04f 0b04 	movne.w	fp, #4
 8001e42:	e007      	b.n	8001e54 <HAL_GPIO_Init+0x140>
 8001e44:	f04f 0b00 	mov.w	fp, #0
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x140>
 8001e4a:	f04f 0b01 	mov.w	fp, #1
 8001e4e:	e001      	b.n	8001e54 <HAL_GPIO_Init+0x140>
 8001e50:	f04f 0b02 	mov.w	fp, #2
 8001e54:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001e58:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8001e5c:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001e60:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e62:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001e66:	bf14      	ite	ne
 8001e68:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001e6a:	4395      	biceq	r5, r2
 8001e6c:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001e6e:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e70:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001e74:	bf14      	ite	ne
 8001e76:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001e78:	4395      	biceq	r5, r2
 8001e7a:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001e7c:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7e:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001e82:	bf14      	ite	ne
 8001e84:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001e86:	4395      	biceq	r5, r2
 8001e88:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001e8a:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e8c:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001e90:	bf14      	ite	ne
 8001e92:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001e94:	ea25 0202 	biceq.w	r2, r5, r2
 8001e98:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	2e10      	cmp	r6, #16
 8001e9e:	f47f af42 	bne.w	8001d26 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8001ea2:	b003      	add	sp, #12
 8001ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea8:	40010400 	.word	0x40010400
 8001eac:	10210000 	.word	0x10210000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	10310000 	.word	0x10310000
 8001eb8:	10320000 	.word	0x10320000
 8001ebc:	10110000 	.word	0x10110000
 8001ec0:	10220000 	.word	0x10220000

08001ec4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	b902      	cbnz	r2, 8001ec8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ec6:	0409      	lsls	r1, r1, #16
 8001ec8:	6101      	str	r1, [r0, #16]
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001ecc:	68c3      	ldr	r3, [r0, #12]
 8001ece:	4059      	eors	r1, r3
 8001ed0:	60c1      	str	r1, [r0, #12]
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed4:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	d403      	bmi.n	8001ee8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	0798      	lsls	r0, r3, #30
 8001ee4:	d473      	bmi.n	8001fce <HAL_RCC_OscConfig+0xfa>
 8001ee6:	e0f2      	b.n	80020ce <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ee8:	4cb9      	ldr	r4, [pc, #740]	; (80021d0 <HAL_RCC_OscConfig+0x2fc>)
 8001eea:	6863      	ldr	r3, [r4, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d007      	beq.n	8001f04 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef4:	6863      	ldr	r3, [r4, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x58>
 8001efe:	6863      	ldr	r3, [r4, #4]
 8001f00:	03d9      	lsls	r1, r3, #15
 8001f02:	d513      	bpl.n	8001f2c <HAL_RCC_OscConfig+0x58>
 8001f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f08:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	07da      	lsls	r2, r3, #31
 8001f20:	d5de      	bpl.n	8001ee0 <HAL_RCC_OscConfig+0xc>
 8001f22:	68ab      	ldr	r3, [r5, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1db      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	e2d0      	b.n	80024ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	68ab      	ldr	r3, [r5, #8]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f32:	d015      	beq.n	8001f60 <HAL_RCC_OscConfig+0x8c>
 8001f34:	b96b      	cbnz	r3, 8001f52 <HAL_RCC_OscConfig+0x7e>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6023      	str	r3, [r4, #0]
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f48:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f97f 	bl	800124c <HAL_GetTick>
 8001f4e:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f50:	e02f      	b.n	8001fb2 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0x94>
 8001f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5e:	6023      	str	r3, [r4, #0]
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_OscConfig+0xa0>
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff f969 	bl	800124c <HAL_GetTick>
 8001f7a:	4607      	mov	r7, r0
 8001f7c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f80:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	6822      	ldr	r2, [r4, #0]
 8001f86:	fa96 f3a6 	rbit	r3, r6
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	07db      	lsls	r3, r3, #31
 8001f98:	d4a2      	bmi.n	8001ee0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9a:	f7ff f957 	bl	800124c <HAL_GetTick>
 8001f9e:	1bc0      	subs	r0, r0, r7
 8001fa0:	2864      	cmp	r0, #100	; 0x64
 8001fa2:	d9ed      	bls.n	8001f80 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	e292      	b.n	80024ce <HAL_RCC_OscConfig+0x5fa>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f950 	bl	800124c <HAL_GetTick>
 8001fac:	1bc0      	subs	r0, r0, r7
 8001fae:	2864      	cmp	r0, #100	; 0x64
 8001fb0:	d8f8      	bhi.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
 8001fb2:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	fa96 f3a6 	rbit	r3, r6
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	07d8      	lsls	r0, r3, #31
 8001fca:	d4ed      	bmi.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001fcc:	e788      	b.n	8001ee0 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fce:	4c80      	ldr	r4, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x2fc>)
 8001fd0:	6863      	ldr	r3, [r4, #4]
 8001fd2:	f013 0f0c 	tst.w	r3, #12
 8001fd6:	d007      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fd8:	6863      	ldr	r3, [r4, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_OscConfig+0x152>
 8001fe2:	6863      	ldr	r3, [r4, #4]
 8001fe4:	03d9      	lsls	r1, r3, #15
 8001fe6:	d41e      	bmi.n	8002026 <HAL_RCC_OscConfig+0x152>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	07da      	lsls	r2, r3, #31
 8002002:	d502      	bpl.n	800200a <HAL_RCC_OscConfig+0x136>
 8002004:	696b      	ldr	r3, [r5, #20]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d18e      	bne.n	8001f28 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	22f8      	movs	r2, #248	; 0xf8
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	69a9      	ldr	r1, [r5, #24]
 8002018:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4313      	orrs	r3, r2
 8002022:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002024:	e053      	b.n	80020ce <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002026:	696a      	ldr	r2, [r5, #20]
 8002028:	2301      	movs	r3, #1
 800202a:	b37a      	cbz	r2, 800208c <HAL_RCC_OscConfig+0x1b8>
 800202c:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 800203a:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800203e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff f904 	bl	800124c <HAL_GetTick>
 8002044:	4607      	mov	r7, r0
 8002046:	2602      	movs	r6, #2
 8002048:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4860      	ldr	r0, [pc, #384]	; (80021d0 <HAL_RCC_OscConfig+0x2fc>)
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	fa96 f3a6 	rbit	r3, r6
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	07db      	lsls	r3, r3, #31
 8002062:	d405      	bmi.n	8002070 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff f8f2 	bl	800124c <HAL_GetTick>
 8002068:	1bc0      	subs	r0, r0, r7
 800206a:	2802      	cmp	r0, #2
 800206c:	d9ec      	bls.n	8002048 <HAL_RCC_OscConfig+0x174>
 800206e:	e799      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	6803      	ldr	r3, [r0, #0]
 8002072:	22f8      	movs	r2, #248	; 0xf8
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	fab2 f282 	clz	r2, r2
 800207c:	69a9      	ldr	r1, [r5, #24]
 800207e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4313      	orrs	r3, r2
 8002088:	6003      	str	r3, [r0, #0]
 800208a:	e020      	b.n	80020ce <HAL_RCC_OscConfig+0x1fa>
 800208c:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800209a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800209e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff f8d4 	bl	800124c <HAL_GetTick>
 80020a4:	4607      	mov	r7, r0
 80020a6:	2602      	movs	r6, #2
 80020a8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	fa96 f3a6 	rbit	r3, r6
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	07d8      	lsls	r0, r3, #31
 80020c0:	d505      	bpl.n	80020ce <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff f8c3 	bl	800124c <HAL_GetTick>
 80020c6:	1bc0      	subs	r0, r0, r7
 80020c8:	2802      	cmp	r0, #2
 80020ca:	d9ed      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1d4>
 80020cc:	e76a      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ce:	682b      	ldr	r3, [r5, #0]
 80020d0:	0719      	lsls	r1, r3, #28
 80020d2:	d546      	bpl.n	8002162 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d4:	69ea      	ldr	r2, [r5, #28]
 80020d6:	4c3e      	ldr	r4, [pc, #248]	; (80021d0 <HAL_RCC_OscConfig+0x2fc>)
 80020d8:	2301      	movs	r3, #1
 80020da:	493e      	ldr	r1, [pc, #248]	; (80021d4 <HAL_RCC_OscConfig+0x300>)
 80020dc:	b312      	cbz	r2, 8002124 <HAL_RCC_OscConfig+0x250>
 80020de:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff f8af 	bl	800124c <HAL_GetTick>
 80020ee:	4607      	mov	r7, r0
 80020f0:	2602      	movs	r6, #2
 80020f2:	fa96 f3a6 	rbit	r3, r6
 80020f6:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020fc:	fa96 f3a6 	rbit	r3, r6
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	07da      	lsls	r2, r3, #31
 800210e:	d405      	bmi.n	800211c <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff f89c 	bl	800124c <HAL_GetTick>
 8002114:	1bc0      	subs	r0, r0, r7
 8002116:	2802      	cmp	r0, #2
 8002118:	d9eb      	bls.n	80020f2 <HAL_RCC_OscConfig+0x21e>
 800211a:	e743      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 800211c:	2001      	movs	r0, #1
 800211e:	f7ff f89b 	bl	8001258 <HAL_Delay>
 8002122:	e01e      	b.n	8002162 <HAL_RCC_OscConfig+0x28e>
 8002124:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff f88c 	bl	800124c <HAL_GetTick>
 8002134:	4607      	mov	r7, r0
 8002136:	2602      	movs	r6, #2
 8002138:	fa96 f3a6 	rbit	r3, r6
 800213c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002142:	fa96 f3a6 	rbit	r3, r6
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	07db      	lsls	r3, r3, #31
 8002154:	d505      	bpl.n	8002162 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002156:	f7ff f879 	bl	800124c <HAL_GetTick>
 800215a:	1bc0      	subs	r0, r0, r7
 800215c:	2802      	cmp	r0, #2
 800215e:	d9eb      	bls.n	8002138 <HAL_RCC_OscConfig+0x264>
 8002160:	e720      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	0758      	lsls	r0, r3, #29
 8002166:	d404      	bmi.n	8002172 <HAL_RCC_OscConfig+0x29e>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002168:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800216a:	2a00      	cmp	r2, #0
 800216c:	f040 8081 	bne.w	8002272 <HAL_RCC_OscConfig+0x39e>
 8002170:	e0d3      	b.n	800231a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4c17      	ldr	r4, [pc, #92]	; (80021d0 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002174:	4e18      	ldr	r6, [pc, #96]	; (80021d8 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	69e3      	ldr	r3, [r4, #28]
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61e3      	str	r3, [r4, #28]
 800217e:	69e3      	ldr	r3, [r4, #28]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002188:	6833      	ldr	r3, [r6, #0]
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff f85c 	bl	800124c <HAL_GetTick>
 8002194:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002196:	6833      	ldr	r3, [r6, #0]
 8002198:	05d9      	lsls	r1, r3, #23
 800219a:	d405      	bmi.n	80021a8 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219c:	f7ff f856 	bl	800124c <HAL_GetTick>
 80021a0:	1bc0      	subs	r0, r0, r7
 80021a2:	2864      	cmp	r0, #100	; 0x64
 80021a4:	d9f7      	bls.n	8002196 <HAL_RCC_OscConfig+0x2c2>
 80021a6:	e6fd      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	692b      	ldr	r3, [r5, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d01c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x314>
 80021ae:	b9ab      	cbnz	r3, 80021dc <HAL_RCC_OscConfig+0x308>
 80021b0:	6a23      	ldr	r3, [r4, #32]
 80021b2:	2602      	movs	r6, #2
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6223      	str	r3, [r4, #32]
 80021ba:	6a23      	ldr	r3, [r4, #32]
 80021bc:	4637      	mov	r7, r6
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff f842 	bl	800124c <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	e048      	b.n	8002262 <HAL_RCC_OscConfig+0x38e>
 80021d0:	40021000 	.word	0x40021000
 80021d4:	42420480 	.word	0x42420480
 80021d8:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	2b05      	cmp	r3, #5
 80021de:	6a23      	ldr	r3, [r4, #32]
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x31c>
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6223      	str	r3, [r4, #32]
 80021e8:	6a23      	ldr	r3, [r4, #32]
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	e005      	b.n	80021fc <HAL_RCC_OscConfig+0x328>
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6223      	str	r3, [r4, #32]
 80021f6:	6a23      	ldr	r3, [r4, #32]
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff f825 	bl	800124c <HAL_GetTick>
 8002202:	2602      	movs	r6, #2
 8002204:	4681      	mov	r9, r0
 8002206:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f241 3788 	movw	r7, #5000	; 0x1388
 800220c:	fa96 f3a6 	rbit	r3, r6
 8002210:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	b10b      	cbz	r3, 800221a <HAL_RCC_OscConfig+0x346>
 8002216:	6a22      	ldr	r2, [r4, #32]
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x348>
 800221a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221c:	fa98 f3a8 	rbit	r3, r8
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	07da      	lsls	r2, r3, #31
 800222e:	d49b      	bmi.n	8002168 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff f80c 	bl	800124c <HAL_GetTick>
 8002234:	ebc9 0000 	rsb	r0, r9, r0
 8002238:	42b8      	cmp	r0, r7
 800223a:	d9e7      	bls.n	800220c <HAL_RCC_OscConfig+0x338>
 800223c:	e6b2      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002240:	fa97 f3a7 	rbit	r3, r7
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	07db      	lsls	r3, r3, #31
 8002252:	d589      	bpl.n	8002168 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fffa 	bl	800124c <HAL_GetTick>
 8002258:	ebc8 0000 	rsb	r0, r8, r0
 800225c:	4548      	cmp	r0, r9
 800225e:	f63f aea1 	bhi.w	8001fa4 <HAL_RCC_OscConfig+0xd0>
 8002262:	fa96 f3a6 	rbit	r3, r6
 8002266:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0e7      	beq.n	800223e <HAL_RCC_OscConfig+0x36a>
 800226e:	6a22      	ldr	r2, [r4, #32]
 8002270:	e7e6      	b.n	8002240 <HAL_RCC_OscConfig+0x36c>
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002272:	4c98      	ldr	r4, [pc, #608]	; (80024d4 <HAL_RCC_OscConfig+0x600>)
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	03df      	lsls	r7, r3, #15
 8002278:	d453      	bmi.n	8002322 <HAL_RCC_OscConfig+0x44e>
    {
      return HAL_ERROR;
    }
    else
    {
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800227a:	2a02      	cmp	r2, #2
 800227c:	d170      	bne.n	8002360 <HAL_RCC_OscConfig+0x48c>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	00d8      	lsls	r0, r3, #3
 8002282:	d458      	bmi.n	8002336 <HAL_RCC_OscConfig+0x462>
 8002284:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002288:	fa93 f3a3 	rbit	r3, r3
        {
          return HAL_ERROR;
        }
        
        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002296:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe ffd5 	bl	800124c <HAL_GetTick>
 80022a2:	4607      	mov	r7, r0
 80022a4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80022a8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80022ac:	4a89      	ldr	r2, [pc, #548]	; (80024d4 <HAL_RCC_OscConfig+0x600>)
 80022ae:	6821      	ldr	r1, [r4, #0]
 80022b0:	fa96 f3a6 	rbit	r3, r6
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa21 f303 	lsr.w	r3, r1, r3
 80022c0:	07d9      	lsls	r1, r3, #31
 80022c2:	d441      	bmi.n	8002348 <HAL_RCC_OscConfig+0x474>
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80022c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022c6:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 80022ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80022cc:	430b      	orrs	r3, r1
 80022ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80022d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022d2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80022d8:	430b      	orrs	r3, r1
 80022da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80022dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022e0:	fa93 f3a3 	rbit	r3, r3
        
        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80022ee:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe ffa9 	bl	800124c <HAL_GetTick>
 80022fa:	4607      	mov	r7, r0
 80022fc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8002300:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	fa96 f3a6 	rbit	r3, r6
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	07db      	lsls	r3, r3, #31
 8002318:	d51c      	bpl.n	8002354 <HAL_RCC_OscConfig+0x480>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	6a2a      	ldr	r2, [r5, #32]
 800231c:	2a00      	cmp	r2, #0
 800231e:	d148      	bne.n	80023b2 <HAL_RCC_OscConfig+0x4de>
 8002320:	e0a4      	b.n	800246c <HAL_RCC_OscConfig+0x598>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002322:	6863      	ldr	r3, [r4, #4]
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d1a6      	bne.n	800227a <HAL_RCC_OscConfig+0x3a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800232c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800232e:	03de      	lsls	r6, r3, #15
 8002330:	f53f adfa 	bmi.w	8001f28 <HAL_RCC_OscConfig+0x54>
 8002334:	e7a1      	b.n	800227a <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCC_OscConfig+0x600>)
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8002338:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	4293      	cmp	r3, r2
 8002342:	f47f adf1 	bne.w	8001f28 <HAL_RCC_OscConfig+0x54>
 8002346:	e79d      	b.n	8002284 <HAL_RCC_OscConfig+0x3b0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002348:	f7fe ff80 	bl	800124c <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	2864      	cmp	r0, #100	; 0x64
 8002350:	d9aa      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3d4>
 8002352:	e627      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002354:	f7fe ff7a 	bl	800124c <HAL_GetTick>
 8002358:	1bc0      	subs	r0, r0, r7
 800235a:	2864      	cmp	r0, #100	; 0x64
 800235c:	d9d0      	bls.n	8002300 <HAL_RCC_OscConfig+0x42c>
 800235e:	e621      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
        }
      }
      else
      {
       /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800236c:	fa93 f3a3 	rbit	r3, r3

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800237a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe ff63 	bl	800124c <HAL_GetTick>
 8002386:	4607      	mov	r7, r0
 8002388:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 800238c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002390:	6822      	ldr	r2, [r4, #0]
 8002392:	fa96 f3a6 	rbit	r3, r6
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	07d8      	lsls	r0, r3, #31
 80023a4:	d5b9      	bpl.n	800231a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80023a6:	f7fe ff51 	bl	800124c <HAL_GetTick>
 80023aa:	1bc0      	subs	r0, r0, r7
 80023ac:	2864      	cmp	r0, #100	; 0x64
 80023ae:	d9ed      	bls.n	800238c <HAL_RCC_OscConfig+0x4b8>
 80023b0:	e5f8      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b2:	4c48      	ldr	r4, [pc, #288]	; (80024d4 <HAL_RCC_OscConfig+0x600>)
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	f43f adb4 	beq.w	8001f28 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	2a02      	cmp	r2, #2
 80023c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c6:	d15f      	bne.n	8002488 <HAL_RCC_OscConfig+0x5b4>
 80023c8:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80023d6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe ff35 	bl	800124c <HAL_GetTick>
 80023e2:	4607      	mov	r7, r0
 80023e4:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80023e8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	4a39      	ldr	r2, [pc, #228]	; (80024d4 <HAL_RCC_OscConfig+0x600>)
 80023ee:	6821      	ldr	r1, [r4, #0]
 80023f0:	fa96 f3a6 	rbit	r3, r6
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa21 f303 	lsr.w	r3, r1, r3
 8002400:	07d9      	lsls	r1, r3, #31
 8002402:	d435      	bmi.n	8002470 <HAL_RCC_OscConfig+0x59c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002404:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002406:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800240a:	d109      	bne.n	8002420 <HAL_RCC_OscConfig+0x54c>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
          
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800240c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800240e:	6869      	ldr	r1, [r5, #4]
 8002410:	4319      	orrs	r1, r3
 8002412:	62d1      	str	r1, [r2, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002414:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002416:	f021 000f 	bic.w	r0, r1, #15
 800241a:	68e9      	ldr	r1, [r5, #12]
 800241c:	4301      	orrs	r1, r0
 800241e:	62d1      	str	r1, [r2, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002424:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002428:	4332      	orrs	r2, r6
 800242a:	4313      	orrs	r3, r2
 800242c:	6063      	str	r3, [r4, #4]
 800242e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002432:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002440:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe ff00 	bl	800124c <HAL_GetTick>
 800244c:	4606      	mov	r6, r0
 800244e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002452:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	fa95 f3a5 	rbit	r3, r5
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	07da      	lsls	r2, r3, #31
 800246a:	d507      	bpl.n	800247c <HAL_RCC_OscConfig+0x5a8>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800246c:	2000      	movs	r0, #0
 800246e:	e02e      	b.n	80024ce <HAL_RCC_OscConfig+0x5fa>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe feec 	bl	800124c <HAL_GetTick>
 8002474:	1bc0      	subs	r0, r0, r7
 8002476:	2802      	cmp	r0, #2
 8002478:	d9b6      	bls.n	80023e8 <HAL_RCC_OscConfig+0x514>
 800247a:	e593      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fee6 	bl	800124c <HAL_GetTick>
 8002480:	1b80      	subs	r0, r0, r6
 8002482:	2802      	cmp	r0, #2
 8002484:	d9e5      	bls.n	8002452 <HAL_RCC_OscConfig+0x57e>
 8002486:	e58d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
 8002488:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002496:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fed5 	bl	800124c <HAL_GetTick>
 80024a2:	4606      	mov	r6, r0
 80024a4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80024a8:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	6822      	ldr	r2, [r4, #0]
 80024ae:	fa95 f3a5 	rbit	r3, r5
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	07db      	lsls	r3, r3, #31
 80024c0:	d5d4      	bpl.n	800246c <HAL_RCC_OscConfig+0x598>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fec3 	bl	800124c <HAL_GetTick>
 80024c6:	1b80      	subs	r0, r0, r6
 80024c8:	2802      	cmp	r0, #2
 80024ca:	d9ed      	bls.n	80024a8 <HAL_RCC_OscConfig+0x5d4>
 80024cc:	e56a      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80024ce:	b003      	add	sp, #12
 80024d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 80024da:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xec>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b089      	sub	sp, #36	; 0x24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	aa01      	add	r2, sp, #4
 80024e4:	c203      	stmia	r2!, {r0, r1}
 80024e6:	6898      	ldr	r0, [r3, #8]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 80024e8:	ad04      	add	r5, sp, #16
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 80024ea:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 80024ec:	f103 020c 	add.w	r2, r3, #12
 80024f0:	331c      	adds	r3, #28
 80024f2:	462c      	mov	r4, r5
 80024f4:	6810      	ldr	r0, [r2, #0]
 80024f6:	6851      	ldr	r1, [r2, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	c403      	stmia	r4!, {r0, r1}
 80024fc:	429a      	cmp	r2, r3
 80024fe:	4625      	mov	r5, r4
 8002500:	d1f7      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1a>
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002502:	4f31      	ldr	r7, [pc, #196]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002504:	6879      	ldr	r1, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002506:	f001 030c 	and.w	r3, r1, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d057      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0xe6>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d001      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x3e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002512:	482e      	ldr	r0, [pc, #184]	; (80025cc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002514:	e054      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xe8>
 8002516:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800251a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	aa08      	add	r2, sp, #32
 800252c:	4413      	add	r3, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252e:	03ca      	lsls	r2, r1, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002530:	f813 4c1c 	ldrb.w	r4, [r3, #-28]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002534:	d540      	bpl.n	80025b8 <HAL_RCC_GetSysClockFreq+0xe0>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 8002536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002538:	230f      	movs	r3, #15
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	fab3 f183 	clz	r1, r3
 8002542:	f002 030f 	and.w	r3, r2, #15
 8002546:	40cb      	lsrs	r3, r1
 8002548:	aa08      	add	r2, sp, #32
 800254a:	4413      	add	r3, r2
 800254c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	03db      	lsls	r3, r3, #15
 8002554:	d51a      	bpl.n	800258c <HAL_RCC_GetSysClockFreq+0xb4>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8002556:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002558:	21f0      	movs	r1, #240	; 0xf0
 800255a:	fa91 f1a1 	rbit	r1, r1
 800255e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002562:	fab1 f681 	clz	r6, r1
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 8002566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002568:	fa93 f3a3 	rbit	r3, r3
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 800256c:	f005 01f0 	and.w	r1, r5, #240	; 0xf0
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 8002570:	fab3 f383 	clz	r3, r3
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8002574:	40f1      	lsrs	r1, r6
 8002576:	4d16      	ldr	r5, [pc, #88]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002578:	3101      	adds	r1, #1
 800257a:	fbb5 f1f1 	udiv	r1, r5, r1
 800257e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	3302      	adds	r3, #2
 8002588:	434b      	muls	r3, r1
 800258a:	e000      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xb6>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800258e:	fbb3 f0f0 	udiv	r0, r3, r0
 8002592:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002596:	4360      	muls	r0, r4
 8002598:	fa93 f3a3 	rbit	r3, r3
        }
        
        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	f44f 1250 	mov.w	r2, #3407872	; 0x340000
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	aa08      	add	r2, sp, #32
 80025aa:	4413      	add	r3, r2
 80025ac:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80025b0:	429c      	cmp	r4, r3
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xe8>
        {
            pllclk = pllclk / 2;
 80025b4:	0840      	lsrs	r0, r0, #1
 80025b6:	e003      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xe8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ba:	4360      	muls	r0, r4
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xe8>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025c0:	b009      	add	sp, #36	; 0x24
 80025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c4:	08003c10 	.word	0x08003c10
 80025c8:	40021000 	.word	0x40021000
 80025cc:	007a1200 	.word	0x007a1200
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025de:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025ea:	d30a      	bcc.n	8002602 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	6831      	ldr	r1, [r6, #0]
 80025ee:	078c      	lsls	r4, r1, #30
 80025f0:	d514      	bpl.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f2:	484f      	ldr	r0, [pc, #316]	; (8002730 <HAL_RCC_ClockConfig+0x158>)
 80025f4:	6843      	ldr	r3, [r0, #4]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fa:	68b3      	ldr	r3, [r6, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	6043      	str	r3, [r0, #4]
 8002600:	e00c      	b.n	800261c <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	6813      	ldr	r3, [r2, #0]
 8002604:	f023 0307 	bic.w	r3, r3, #7
 8002608:	430b      	orrs	r3, r1
 800260a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800260c:	6813      	ldr	r3, [r2, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	4299      	cmp	r1, r3
 8002614:	d0ea      	beq.n	80025ec <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8002616:	2001      	movs	r0, #1
 8002618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261c:	07c8      	lsls	r0, r1, #31
 800261e:	d406      	bmi.n	800262e <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002620:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_RCC_ClockConfig+0x154>)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	429d      	cmp	r5, r3
 800262a:	d34a      	bcc.n	80026c2 <HAL_RCC_ClockConfig+0xea>
 800262c:	e053      	b.n	80026d6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262e:	6872      	ldr	r2, [r6, #4]
 8002630:	4c3f      	ldr	r4, [pc, #252]	; (8002730 <HAL_RCC_ClockConfig+0x158>)
 8002632:	2a01      	cmp	r2, #1
 8002634:	d102      	bne.n	800263c <HAL_RCC_ClockConfig+0x64>
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	e004      	b.n	8002646 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263c:	2a02      	cmp	r2, #2
 800263e:	bf0c      	ite	eq
 8002640:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002644:	2302      	movne	r3, #2
 8002646:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	6821      	ldr	r1, [r4, #0]
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa21 f303 	lsr.w	r3, r1, r3
 800265c:	07d9      	lsls	r1, r3, #31
 800265e:	d5da      	bpl.n	8002616 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002660:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002662:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	431a      	orrs	r2, r3
 800266c:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266e:	f7fe fded 	bl	800124c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002674:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002676:	2b01      	cmp	r3, #1
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d0cd      	beq.n	8002620 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fde2 	bl	800124c <HAL_GetTick>
 8002688:	1bc0      	subs	r0, r0, r7
 800268a:	4540      	cmp	r0, r8
 800268c:	d9f5      	bls.n	800267a <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 800268e:	2003      	movs	r0, #3
 8002690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	2b02      	cmp	r3, #2
 8002696:	d10f      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002698:	6863      	ldr	r3, [r4, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d0be      	beq.n	8002620 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a2:	f7fe fdd3 	bl	800124c <HAL_GetTick>
 80026a6:	1bc0      	subs	r0, r0, r7
 80026a8:	4540      	cmp	r0, r8
 80026aa:	d9f5      	bls.n	8002698 <HAL_RCC_ClockConfig+0xc0>
 80026ac:	e7ef      	b.n	800268e <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ae:	f7fe fdcd 	bl	800124c <HAL_GetTick>
 80026b2:	1bc0      	subs	r0, r0, r7
 80026b4:	4540      	cmp	r0, r8
 80026b6:	d8ea      	bhi.n	800268e <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	f013 0f0c 	tst.w	r3, #12
 80026be:	d1f6      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd6>
 80026c0:	e7ae      	b.n	8002620 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	6813      	ldr	r3, [r2, #0]
 80026c4:	f023 0307 	bic.w	r3, r3, #7
 80026c8:	432b      	orrs	r3, r5
 80026ca:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	429d      	cmp	r5, r3
 80026d4:	d19f      	bne.n	8002616 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d6:	6831      	ldr	r1, [r6, #0]
 80026d8:	4c15      	ldr	r4, [pc, #84]	; (8002730 <HAL_RCC_ClockConfig+0x158>)
 80026da:	f011 0f04 	tst.w	r1, #4
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	6863      	ldr	r3, [r4, #4]
 80026e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e6:	68f3      	ldr	r3, [r6, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	070b      	lsls	r3, r1, #28
 80026ee:	d506      	bpl.n	80026fe <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026f0:	6863      	ldr	r3, [r4, #4]
 80026f2:	6932      	ldr	r2, [r6, #16]
 80026f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026fc:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026fe:	f7ff feeb 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002702:	6863      	ldr	r3, [r4, #4]
 8002704:	22f0      	movs	r2, #240	; 0xf0
 8002706:	fa92 f2a2 	rbit	r2, r2
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002712:	40d3      	lsrs	r3, r2
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RCC_ClockConfig+0x15c>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	40d8      	lsrs	r0, r3
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCC_ClockConfig+0x160>)
 800271c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fd68 	bl	80011f4 <HAL_InitTick>
  
  return HAL_OK;
 8002724:	2000      	movs	r0, #0
}
 8002726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	08003c2c 	.word	0x08003c2c
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <HAL_RCC_GetHCLKFreq+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002748:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800274a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800274e:	f013 0f01 	tst.w	r3, #1
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002752:	4605      	mov	r5, r0
 8002754:	4c6c      	ldr	r4, [pc, #432]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002756:	d063      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	69e3      	ldr	r3, [r4, #28]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4e6c      	ldr	r6, [pc, #432]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	61e3      	str	r3, [r4, #28]
 8002762:	69e3      	ldr	r3, [r4, #28]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800276c:	6833      	ldr	r3, [r6, #0]
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002774:	f7fe fd6a 	bl	800124c <HAL_GetTick>
 8002778:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800277a:	6833      	ldr	r3, [r6, #0]
 800277c:	05db      	lsls	r3, r3, #23
 800277e:	d406      	bmi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fd64 	bl	800124c <HAL_GetTick>
 8002784:	1bc0      	subs	r0, r0, r7
 8002786:	2864      	cmp	r0, #100	; 0x64
 8002788:	d9f7      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x32>
      {
        return HAL_TIMEOUT;
 800278a:	2003      	movs	r0, #3
 800278c:	e0b9      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278e:	6a23      	ldr	r3, [r4, #32]
 8002790:	485d      	ldr	r0, [pc, #372]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002792:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002796:	d106      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002798:	6a23      	ldr	r3, [r4, #32]
 800279a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279e:	686b      	ldr	r3, [r5, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	6223      	str	r3, [r4, #32]
 80027a4:	e03c      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027a6:	686a      	ldr	r2, [r5, #4]
 80027a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d0f3      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b0:	6a01      	ldr	r1, [r0, #32]
 80027b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b6:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 80027ba:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027be:	fab2 f282 	clz	r2, r2
 80027c2:	4e53      	ldr	r6, [pc, #332]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027c4:	f04f 0e01 	mov.w	lr, #1
 80027c8:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 80027cc:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027da:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027dc:	07c8      	lsls	r0, r1, #31
 80027de:	d5db      	bpl.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fd34 	bl	800124c <HAL_GetTick>
 80027e4:	2602      	movs	r6, #2
 80027e6:	4680      	mov	r8, r0
 80027e8:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f241 3988 	movw	r9, #5000	; 0x1388
 80027ee:	fa96 f3a6 	rbit	r3, r6
 80027f2:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	b10b      	cbz	r3, 80027fc <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80027f8:	6a22      	ldr	r2, [r4, #32]
 80027fa:	e000      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
 80027fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027fe:	fa97 f3a7 	rbit	r3, r7
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	07d9      	lsls	r1, r3, #31
 8002810:	d4c2      	bmi.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x50>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fd1b 	bl	800124c <HAL_GetTick>
 8002816:	ebc8 0000 	rsb	r0, r8, r0
 800281a:	4548      	cmp	r0, r9
 800281c:	d9e7      	bls.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800281e:	e7b4      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002820:	682b      	ldr	r3, [r5, #0]
 8002822:	079a      	lsls	r2, r3, #30
 8002824:	d505      	bpl.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 800282c:	68aa      	ldr	r2, [r5, #8]
 800282e:	430a      	orrs	r2, r1
 8002830:	6062      	str	r2, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002832:	075f      	lsls	r7, r3, #29
 8002834:	d505      	bpl.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002836:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002838:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800283c:	68ea      	ldr	r2, [r5, #12]
 800283e:	430a      	orrs	r2, r1
 8002840:	62e2      	str	r2, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002842:	071e      	lsls	r6, r3, #28
 8002844:	d505      	bpl.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002848:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800284c:	692b      	ldr	r3, [r5, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002852:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002854:	0398      	lsls	r0, r3, #14
 8002856:	d40f      	bmi.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	0359      	lsls	r1, r3, #13
 800285e:	d40b      	bmi.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002860:	6828      	ldr	r0, [r5, #0]
 8002862:	f010 0010 	ands.w	r0, r0, #16
 8002866:	d04c      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002868:	6863      	ldr	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800286a:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800286c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002870:	69eb      	ldr	r3, [r5, #28]
 8002872:	4313      	orrs	r3, r2
 8002874:	6063      	str	r3, [r4, #4]
 8002876:	e044      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1ba>

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	d439      	bmi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002886:	69ab      	ldr	r3, [r5, #24]
 8002888:	d004      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x14c>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800288a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 800288c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002890:	429a      	cmp	r2, r3
 8002892:	d135      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      {
        return HAL_ERROR;
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002894:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002896:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800289a:	4313      	orrs	r3, r2
 800289c:	62e3      	str	r3, [r4, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800289e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028a0:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80028a4:	696b      	ldr	r3, [r5, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028ae:	fa93 f3a3 	rbit	r3, r3
      
      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80028bc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fcc2 	bl	800124c <HAL_GetTick>
 80028c8:	4607      	mov	r7, r0
 80028ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
 80028ce:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till PLLI2S is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	fa96 f3a6 	rbit	r3, r6
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	07da      	lsls	r2, r3, #31
 80028e6:	d4bb      	bmi.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028e8:	f7fe fcb0 	bl	800124c <HAL_GetTick>
 80028ec:	1bc0      	subs	r0, r0, r7
 80028ee:	2864      	cmp	r0, #100	; 0x64
 80028f0:	d9ed      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 80028f2:	e74a      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x42>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80028f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80028f6:	696a      	ldr	r2, [r5, #20]
 80028f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d0af      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x118>
      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
      {
        return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8002902:	b003      	add	sp, #12
 8002904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	40007000 	.word	0x40007000
 8002910:	42420400 	.word	0x42420400

08002914 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002914:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002916:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002922:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002924:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002926:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800292a:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800292c:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002930:	688b      	ldr	r3, [r1, #8]
 8002932:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002934:	4c0a      	ldr	r4, [pc, #40]	; (8002960 <TIM_OC1_SetConfig+0x4c>)
 8002936:	42a0      	cmp	r0, r4
 8002938:	d10b      	bne.n	8002952 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800293a:	68cc      	ldr	r4, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800293c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002940:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002942:	694e      	ldr	r6, [r1, #20]
 8002944:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002946:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800294a:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800294c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002950:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002952:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002954:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002956:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002958:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295a:	6203      	str	r3, [r0, #32]
 800295c:	bd70      	pop	{r4, r5, r6, pc}
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00

08002964 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002964:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002966:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002972:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002974:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002976:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800297c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800297e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002982:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002986:	4d0c      	ldr	r5, [pc, #48]	; (80029b8 <TIM_OC3_SetConfig+0x54>)
 8002988:	42a8      	cmp	r0, r5
 800298a:	d10e      	bne.n	80029aa <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800298c:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800298e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002992:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002996:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002998:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800299c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80029a0:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80029a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029aa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ac:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ae:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029b0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b2:	6203      	str	r3, [r0, #32]
 80029b4:	bd30      	pop	{r4, r5, pc}
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00

080029bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029bc:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029be:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ca:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80029cc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80029d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80029d6:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80029dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	4d06      	ldr	r5, [pc, #24]	; (80029fc <TIM_OC4_SetConfig+0x40>)
 80029e2:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80029e4:	bf02      	ittt	eq
 80029e6:	694d      	ldreq	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80029ec:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029f2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029f4:	684a      	ldr	r2, [r1, #4]
 80029f6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f8:	6203      	str	r3, [r0, #32]
 80029fa:	bd30      	pop	{r4, r5, pc}
 80029fc:	40012c00 	.word	0x40012c00

08002a00 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a00:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002a02:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_OC_MspInit>:
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_PWM_MspInit>:
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002a1e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f04f 0302 	mov.w	r3, #2
 8002a26:	f000 80b0 	beq.w	8002b8a <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8002a2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a2e:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a30:	2201      	movs	r2, #1
 8002a32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a36:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a3c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002a40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a42:	680a      	ldr	r2, [r1, #0]
 8002a44:	2a40      	cmp	r2, #64	; 0x40
 8002a46:	d077      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x11e>
 8002a48:	d818      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x62>
 8002a4a:	2a10      	cmp	r2, #16
 8002a4c:	f000 808b 	beq.w	8002b66 <HAL_TIM_ConfigClockSource+0x14c>
 8002a50:	d808      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x4a>
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	f040 8093 	bne.w	8002b7e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a58:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a5e:	f042 0207 	orr.w	r2, r2, #7
 8002a62:	e08b      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002a64:	2a20      	cmp	r2, #32
 8002a66:	f000 8084 	beq.w	8002b72 <HAL_TIM_ConfigClockSource+0x158>
 8002a6a:	2a30      	cmp	r2, #48	; 0x30
 8002a6c:	f040 8087 	bne.w	8002b7e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a70:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a76:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002a7a:	e07f      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002a7c:	2a70      	cmp	r2, #112	; 0x70
 8002a7e:	d035      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0xd2>
 8002a80:	d81b      	bhi.n	8002aba <HAL_TIM_ConfigClockSource+0xa0>
 8002a82:	2a50      	cmp	r2, #80	; 0x50
 8002a84:	d041      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0xf0>
 8002a86:	2a60      	cmp	r2, #96	; 0x60
 8002a88:	d179      	bne.n	8002b7e <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8a:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8c:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8e:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a92:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a94:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a96:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002a98:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002aa2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002aa6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aaa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002aae:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ab4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002ab8:	e060      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002aba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002abe:	d011      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0xca>
 8002ac0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002ac4:	d15b      	bne.n	8002b7e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002ac6:	689c      	ldr	r4, [r3, #8]
 8002ac8:	688d      	ldr	r5, [r1, #8]
 8002aca:	684a      	ldr	r2, [r1, #4]
 8002acc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ad0:	68c9      	ldr	r1, [r1, #12]
 8002ad2:	432a      	orrs	r2, r5
 8002ad4:	4322      	orrs	r2, r4
 8002ad6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae2:	e04b      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	f022 0207 	bic.w	r2, r2, #7
 8002aea:	e047      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002aec:	689c      	ldr	r4, [r3, #8]
 8002aee:	688d      	ldr	r5, [r1, #8]
 8002af0:	684a      	ldr	r2, [r1, #4]
 8002af2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002af6:	68c9      	ldr	r1, [r1, #12]
 8002af8:	432a      	orrs	r2, r5
 8002afa:	4322      	orrs	r2, r4
 8002afc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b00:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8002b02:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b04:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002b08:	e038      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b0c:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b10:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b14:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b16:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b18:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1a:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b1e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002b22:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002b24:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b28:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2a:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b2c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b32:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002b36:	e021      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b38:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3c:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3e:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b44:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b46:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b48:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002b50:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002b52:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b56:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b58:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b5a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b60:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002b64:	e00a      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b66:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b6c:	f042 0217 	orr.w	r2, r2, #23
 8002b70:	e004      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b72:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b78:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002b7c:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002b84:	2300      	movs	r3, #0
 8002b86:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002b8c:	bd70      	pop	{r4, r5, r6, pc}

08002b8e <HAL_TIM_OC_DelayElapsedCallback>:
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIM_IC_CaptureCallback>:
 8002b90:	4770      	bx	lr

08002b92 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_TriggerCallback>:
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b96:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b98:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b9a:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b9e:	0791      	lsls	r1, r2, #30
 8002ba0:	d514      	bpl.n	8002bcc <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	0792      	lsls	r2, r2, #30
 8002ba6:	d511      	bpl.n	8002bcc <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba8:	f06f 0202 	mvn.w	r2, #2
 8002bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002bae:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bb0:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002bb2:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bb4:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002bb6:	d002      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb8:	f7ff ffea 	bl	8002b90 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e004      	b.n	8002bc8 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	f7ff ffe6 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff ffe5 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	0750      	lsls	r0, r2, #29
 8002bd2:	d516      	bpl.n	8002c02 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	0751      	lsls	r1, r2, #29
 8002bd8:	d513      	bpl.n	8002c02 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bda:	f06f 0204 	mvn.w	r2, #4
 8002bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002be0:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002be4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002bec:	d002      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	f7ff ffcf 	bl	8002b90 <HAL_TIM_IC_CaptureCallback>
 8002bf2:	e004      	b.n	8002bfe <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf4:	f7ff ffcb 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff ffca 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	0712      	lsls	r2, r2, #28
 8002c08:	d515      	bpl.n	8002c36 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	0710      	lsls	r0, r2, #28
 8002c0e:	d512      	bpl.n	8002c36 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	f06f 0208 	mvn.w	r2, #8
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002c16:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c18:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002c1a:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002c20:	d002      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	f7ff ffb5 	bl	8002b90 <HAL_TIM_IC_CaptureCallback>
 8002c26:	e004      	b.n	8002c32 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c28:	f7ff ffb1 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ffb0 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	2300      	movs	r3, #0
 8002c34:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	06d2      	lsls	r2, r2, #27
 8002c3c:	d516      	bpl.n	8002c6c <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	06d0      	lsls	r0, r2, #27
 8002c42:	d513      	bpl.n	8002c6c <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c44:	f06f 0210 	mvn.w	r2, #16
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c4a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4c:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c4e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c52:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002c54:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c56:	d002      	beq.n	8002c5e <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	f7ff ff9a 	bl	8002b90 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e004      	b.n	8002c68 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	f7ff ff96 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7ff ff95 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	07d1      	lsls	r1, r2, #31
 8002c72:	d508      	bpl.n	8002c86 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	07d2      	lsls	r2, r2, #31
 8002c78:	d505      	bpl.n	8002c86 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c7a:	f06f 0201 	mvn.w	r2, #1
 8002c7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 f9b9 	bl	8002ff8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	0610      	lsls	r0, r2, #24
 8002c8c:	d508      	bpl.n	8002ca0 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	0611      	lsls	r1, r2, #24
 8002c92:	d505      	bpl.n	8002ca0 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f000 f9ab 	bl	8002ff6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	0652      	lsls	r2, r2, #25
 8002ca6:	d508      	bpl.n	8002cba <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	0650      	lsls	r0, r2, #25
 8002cac:	d505      	bpl.n	8002cba <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff ff6d 	bl	8002b94 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	0691      	lsls	r1, r2, #26
 8002cc0:	d50a      	bpl.n	8002cd8 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	0692      	lsls	r2, r2, #26
 8002cc6:	d507      	bpl.n	8002cd8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002ccc:	4620      	mov	r0, r4
    }
  }
}
 8002cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002cd4:	f000 b98e 	b.w	8002ff4 <HAL_TIMEx_CommutationCallback>
 8002cd8:	bd10      	pop	{r4, pc}
	...

08002cdc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <TIM_Base_SetConfig+0x74>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8002cde:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	4290      	cmp	r0, r2
 8002ce2:	d00e      	beq.n	8002d02 <TIM_Base_SetConfig+0x26>
 8002ce4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ce8:	d00b      	beq.n	8002d02 <TIM_Base_SetConfig+0x26>
 8002cea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cee:	4290      	cmp	r0, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0x26>
 8002cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf6:	4290      	cmp	r0, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x26>
 8002cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cfe:	4290      	cmp	r0, r2
 8002d00:	d119      	bne.n	8002d36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002d02:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d08:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <TIM_Base_SetConfig+0x74>)
 8002d0c:	4290      	cmp	r0, r2
 8002d0e:	d00e      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d1a:	4290      	cmp	r0, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d22:	4290      	cmp	r0, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d2a:	4290      	cmp	r0, r2
 8002d2c:	d103      	bne.n	8002d36 <TIM_Base_SetConfig+0x5a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2e:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d34:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002d36:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	688b      	ldr	r3, [r1, #8]
 8002d3a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d3c:	680b      	ldr	r3, [r1, #0]
 8002d3e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <TIM_Base_SetConfig+0x74>)
 8002d42:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d44:	bf04      	itt	eq
 8002d46:	690b      	ldreq	r3, [r1, #16]
 8002d48:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	6143      	str	r3, [r0, #20]
 8002d4e:	4770      	bx	lr
 8002d50:	40012c00 	.word	0x40012c00

08002d54 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d54:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002d56:	4604      	mov	r4, r0
 8002d58:	b1a0      	cbz	r0, 8002d84 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d62:	b91b      	cbnz	r3, 8002d6c <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d68:	f000 fede 	bl	8003b28 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d72:	6820      	ldr	r0, [r4, #0]
 8002d74:	1d21      	adds	r1, r4, #4
 8002d76:	f7ff ffb1 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002d80:	2000      	movs	r0, #0
 8002d82:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002d86:	bd10      	pop	{r4, pc}

08002d88 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002d88:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	b1a0      	cbz	r0, 8002db8 <HAL_TIM_OC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d96:	b91b      	cbnz	r3, 8002da0 <HAL_TIM_OC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d9c:	f7ff fe3b 	bl	8002a16 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002da0:	2302      	movs	r3, #2
 8002da2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1d21      	adds	r1, r4, #4
 8002daa:	f7ff ff97 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
 8002db6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002db8:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002dba:	bd10      	pop	{r4, pc}

08002dbc <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	b1a0      	cbz	r0, 8002dec <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002dc2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dca:	b91b      	cbnz	r3, 8002dd4 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dcc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd0:	f7ff fe22 	bl	8002a18 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	1d21      	adds	r1, r4, #4
 8002dde:	f7ff ff7d 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002de8:	2000      	movs	r0, #0
 8002dea:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df0:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df2:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df4:	f023 0310 	bic.w	r3, r3, #16
 8002df8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dfe:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e00:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e02:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e06:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002e0a:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e0c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002e10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <TIM_OC2_SetConfig+0x54>)
 8002e16:	42a8      	cmp	r0, r5
 8002e18:	d10e      	bne.n	8002e38 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002e1a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002e20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002e24:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002e2a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002e2e:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002e34:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e38:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e3a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e3c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e3e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	6203      	str	r3, [r0, #32]
 8002e42:	bd30      	pop	{r4, r5, pc}
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002e48:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002e4e:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f04f 0002 	mov.w	r0, #2
 8002e56:	d024      	beq.n	8002ea2 <HAL_TIM_OC_ConfigChannel+0x5a>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002e5e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8002e62:	461d      	mov	r5, r3

  switch (Channel)
 8002e64:	2a0c      	cmp	r2, #12
 8002e66:	d817      	bhi.n	8002e98 <HAL_TIM_OC_ConfigChannel+0x50>
 8002e68:	e8df f002 	tbb	[pc, r2]
 8002e6c:	16161607 	.word	0x16161607
 8002e70:	1616160b 	.word	0x1616160b
 8002e74:	1616160f 	.word	0x1616160f
 8002e78:	13          	.byte	0x13
 8002e79:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	f7ff fd4a 	bl	8002914 <TIM_OC1_SetConfig>
    }
    break;
 8002e80:	e00a      	b.n	8002e98 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e82:	6820      	ldr	r0, [r4, #0]
 8002e84:	f7ff ffb4 	bl	8002df0 <TIM_OC2_SetConfig>
    }
    break;
 8002e88:	e006      	b.n	8002e98 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	f7ff fd6a 	bl	8002964 <TIM_OC3_SetConfig>
    }
    break;
 8002e90:	e002      	b.n	8002e98 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e92:	6820      	ldr	r0, [r4, #0]
 8002e94:	f7ff fd92 	bl	80029bc <TIM_OC4_SetConfig>
    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002e98:	2000      	movs	r0, #0
    break;

    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e9a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002e9e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}

08002ea4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002ea4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002ea6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002eaa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002eac:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002eae:	460d      	mov	r5, r1
 8002eb0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002eb4:	d058      	beq.n	8002f68 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8002ec0:	2a0c      	cmp	r2, #12
 8002ec2:	d84b      	bhi.n	8002f5c <HAL_TIM_PWM_ConfigChannel+0xb8>
 8002ec4:	e8df f002 	tbb	[pc, r2]
 8002ec8:	4a4a4a07 	.word	0x4a4a4a07
 8002ecc:	4a4a4a17 	.word	0x4a4a4a17
 8002ed0:	4a4a4a29 	.word	0x4a4a4a29
 8002ed4:	39          	.byte	0x39
 8002ed5:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	f7ff fd1c 	bl	8002914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	f042 0208 	orr.w	r2, r2, #8
 8002ee4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	f022 0204 	bic.w	r2, r2, #4
 8002eec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eee:	6999      	ldr	r1, [r3, #24]
 8002ef0:	692a      	ldr	r2, [r5, #16]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	e00f      	b.n	8002f16 <HAL_TIM_PWM_ConfigChannel+0x72>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef6:	6820      	ldr	r0, [r4, #0]
 8002ef8:	f7ff ff7a 	bl	8002df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002efc:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002efe:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f16:	619a      	str	r2, [r3, #24]
    }
    break;
 8002f18:	e020      	b.n	8002f5c <HAL_TIM_PWM_ConfigChannel+0xb8>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1a:	6820      	ldr	r0, [r4, #0]
 8002f1c:	f7ff fd22 	bl	8002964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	f042 0208 	orr.w	r2, r2, #8
 8002f28:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	692a      	ldr	r2, [r5, #16]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	e00f      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0xb6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f3a:	6820      	ldr	r0, [r4, #0]
 8002f3c:	f7ff fd3e 	bl	80029bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f40:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002f42:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4a:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f5a:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002f5e:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002f64:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002f68:	bd38      	pop	{r3, r4, r5, pc}

08002f6a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f6a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	6a04      	ldr	r4, [r0, #32]
 8002f70:	408b      	lsls	r3, r1
 8002f72:	ea24 0303 	bic.w	r3, r4, r3
 8002f76:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002f78:	6a03      	ldr	r3, [r0, #32]
 8002f7a:	408a      	lsls	r2, r1
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	6201      	str	r1, [r0, #32]
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f88:	2201      	movs	r2, #1
 8002f8a:	6800      	ldr	r0, [r0, #0]
 8002f8c:	f7ff ffed 	bl	8002f6a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_TIM_PWM_Start+0x28>)
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002f94:	2000      	movs	r0, #0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f96:	4293      	cmp	r3, r2
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f98:	bf02      	ittt	eq
 8002f9a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002f9c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002fa0:	645a      	streq	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	40012c00 	.word	0x40012c00

08002fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002fb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002fb4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f04f 0302 	mov.w	r3, #2
 8002fbc:	d018      	beq.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002fbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002fc2:	6803      	ldr	r3, [r0, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fca:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	685c      	ldr	r4, [r3, #4]
 8002fce:	680a      	ldr	r2, [r1, #0]
 8002fd0:	4322      	orrs	r2, r4
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fda:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002fdc:	689c      	ldr	r4, [r3, #8]
 8002fde:	684a      	ldr	r2, [r1, #4]
 8002fe0:	4322      	orrs	r2, r4
 8002fe2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002fea:	2300      	movs	r3, #0
 8002fec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002ff0:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <HAL_TIMEx_CommutationCallback>:
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance==TIM2) //check if the interrupt comes from TIM3
 8002ff8:	6803      	ldr	r3, [r0, #0]

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (htim->Instance==TIM2) //check if the interrupt comes from TIM3
 8002ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003002:	f040 8300 	bne.w	8003606 <HAL_TIM_PeriodElapsedCallback+0x60e>
	{
		in.a1 = ADC.a1*3.3/4095;
 8003006:	4dca      	ldr	r5, [pc, #808]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003008:	4cca      	ldr	r4, [pc, #808]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800300a:	6828      	ldr	r0, [r5, #0]
 800300c:	f7fd fa4e 	bl	80004ac <__aeabi_ui2d>
 8003010:	a3b7      	add	r3, pc, #732	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7fd fabf 	bl	8000598 <__aeabi_dmul>
 800301a:	a3b7      	add	r3, pc, #732	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f7fd fbe4 	bl	80007ec <__aeabi_ddiv>
 8003024:	f7fd fd52 	bl	8000acc <__aeabi_d2f>
 8003028:	4682      	mov	sl, r0
 800302a:	6020      	str	r0, [r4, #0]
		in.a2 = ADC.a2*3.3/4095;
 800302c:	6868      	ldr	r0, [r5, #4]
 800302e:	f7fd fa3d 	bl	80004ac <__aeabi_ui2d>
 8003032:	a3af      	add	r3, pc, #700	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f7fd faae 	bl	8000598 <__aeabi_dmul>
 800303c:	a3ae      	add	r3, pc, #696	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd fbd3 	bl	80007ec <__aeabi_ddiv>
 8003046:	f7fd fd41 	bl	8000acc <__aeabi_d2f>
 800304a:	4683      	mov	fp, r0
 800304c:	6060      	str	r0, [r4, #4]
		in.a3 = ADC.a3*3.3/4095;
 800304e:	68a8      	ldr	r0, [r5, #8]
 8003050:	f7fd fa2c 	bl	80004ac <__aeabi_ui2d>
 8003054:	a3a6      	add	r3, pc, #664	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd fa9d 	bl	8000598 <__aeabi_dmul>
 800305e:	a3a6      	add	r3, pc, #664	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd fbc2 	bl	80007ec <__aeabi_ddiv>
 8003068:	f7fd fd30 	bl	8000acc <__aeabi_d2f>
 800306c:	4681      	mov	r9, r0
 800306e:	60a0      	str	r0, [r4, #8]
		in.a4 = ADC.a4*3.3/4095;
 8003070:	68e8      	ldr	r0, [r5, #12]
 8003072:	f7fd fa1b 	bl	80004ac <__aeabi_ui2d>
 8003076:	a39e      	add	r3, pc, #632	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fa8c 	bl	8000598 <__aeabi_dmul>
 8003080:	a39d      	add	r3, pc, #628	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fbb1 	bl	80007ec <__aeabi_ddiv>
 800308a:	f7fd fd1f 	bl	8000acc <__aeabi_d2f>
 800308e:	4607      	mov	r7, r0
 8003090:	60e0      	str	r0, [r4, #12]

		in.u_bat = ADC.u_bat*3.3/4095;
 8003092:	6928      	ldr	r0, [r5, #16]
 8003094:	f7fd fa0a 	bl	80004ac <__aeabi_ui2d>
 8003098:	a395      	add	r3, pc, #596	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fa7b 	bl	8000598 <__aeabi_dmul>
 80030a2:	a395      	add	r3, pc, #596	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f7fd fba0 	bl	80007ec <__aeabi_ddiv>
 80030ac:	f7fd fd0e 	bl	8000acc <__aeabi_d2f>
 80030b0:	4606      	mov	r6, r0
 80030b2:	6160      	str	r0, [r4, #20]
		in.current_sense = ADC.current_sense*3.3/4095;
 80030b4:	6968      	ldr	r0, [r5, #20]
 80030b6:	f7fd f9f9 	bl	80004ac <__aeabi_ui2d>
 80030ba:	a38d      	add	r3, pc, #564	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd fa6a 	bl	8000598 <__aeabi_dmul>
 80030c4:	a38c      	add	r3, pc, #560	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f7fd fb8f 	bl	80007ec <__aeabi_ddiv>
 80030ce:	f7fd fcfd 	bl	8000acc <__aeabi_d2f>
 80030d2:	61a0      	str	r0, [r4, #24]
 80030d4:	4680      	mov	r8, r0
		in.temp = ADC.temp*3.3/4095.0;
 80030d6:	69a8      	ldr	r0, [r5, #24]
 80030d8:	f7fd f9e8 	bl	80004ac <__aeabi_ui2d>
 80030dc:	a384      	add	r3, pc, #528	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f7fd fa59 	bl	8000598 <__aeabi_dmul>
 80030e6:	a384      	add	r3, pc, #528	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f7fd fb7e 	bl	80007ec <__aeabi_ddiv>
 80030f0:	f7fd fcec 	bl	8000acc <__aeabi_d2f>
 80030f4:	6220      	str	r0, [r4, #32]
		in.pot = ADC.pot*3.3/4095.0;
 80030f6:	69e8      	ldr	r0, [r5, #28]
 80030f8:	f7fd f9d8 	bl	80004ac <__aeabi_ui2d>
 80030fc:	a37c      	add	r3, pc, #496	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd fa49 	bl	8000598 <__aeabi_dmul>
 8003106:	a37c      	add	r3, pc, #496	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f7fd fb6e 	bl	80007ec <__aeabi_ddiv>
 8003110:	f7fd fcdc 	bl	8000acc <__aeabi_d2f>

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
 8003114:	4659      	mov	r1, fp
		in.a4 = ADC.a4*3.3/4095;

		in.u_bat = ADC.u_bat*3.3/4095;
		in.current_sense = ADC.current_sense*3.3/4095;
		in.temp = ADC.temp*3.3/4095.0;
		in.pot = ADC.pot*3.3/4095.0;
 8003116:	6260      	str	r0, [r4, #36]	; 0x24

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
 8003118:	4650      	mov	r0, sl
 800311a:	f7fd fd2d 	bl	8000b78 <__addsf3>
 800311e:	4649      	mov	r1, r9
 8003120:	f7fd fd2a 	bl	8000b78 <__addsf3>
 8003124:	4639      	mov	r1, r7
 8003126:	f7fd fd27 	bl	8000b78 <__addsf3>
 800312a:	f7fd f9e1 	bl	80004f0 <__aeabi_f2d>
 800312e:	a374      	add	r3, pc, #464	; (adr r3, 8003300 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f7fd fa30 	bl	8000598 <__aeabi_dmul>
 8003138:	2200      	movs	r2, #0
 800313a:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800313c:	f7fd fb56 	bl	80007ec <__aeabi_ddiv>
 8003140:	2200      	movs	r2, #0
 8003142:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003144:	f7fd fb52 	bl	80007ec <__aeabi_ddiv>
 8003148:	f7fd fcc0 	bl	8000acc <__aeabi_d2f>
 800314c:	4d7c      	ldr	r5, [pc, #496]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800314e:	6128      	str	r0, [r5, #16]
		val.u_bat = 25.0/25.8*in.u_bat*(3+22)/3.0;
 8003150:	4630      	mov	r0, r6
 8003152:	f7fd f9cd 	bl	80004f0 <__aeabi_f2d>
 8003156:	a36c      	add	r3, pc, #432	; (adr r3, 8003308 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fa1c 	bl	8000598 <__aeabi_dmul>
 8003160:	2200      	movs	r2, #0
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003164:	f7fd fa18 	bl	8000598 <__aeabi_dmul>
 8003168:	2200      	movs	r2, #0
 800316a:	4b77      	ldr	r3, [pc, #476]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800316c:	f7fd fb3e 	bl	80007ec <__aeabi_ddiv>
 8003170:	f7fd fcac 	bl	8000acc <__aeabi_d2f>
		if(state.init)
 8003174:	4b75      	ldr	r3, [pc, #468]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x354>)
		in.current_sense = ADC.current_sense*3.3/4095;
		in.temp = ADC.temp*3.3/4095.0;
		in.pot = ADC.pot*3.3/4095.0;

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
		val.u_bat = 25.0/25.8*in.u_bat*(3+22)/3.0;
 8003176:	6168      	str	r0, [r5, #20]
		if(state.init)
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	469b      	mov	fp, r3
 800317c:	b1ca      	cbz	r2, 80031b2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			val.current_sense0 = (val.current_sense0*199.0 +in.current_sense)/200.0;
 800317e:	69e8      	ldr	r0, [r5, #28]
 8003180:	f7fd f9b6 	bl	80004f0 <__aeabi_f2d>
 8003184:	a362      	add	r3, pc, #392	; (adr r3, 8003310 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fa05 	bl	8000598 <__aeabi_dmul>
 800318e:	4606      	mov	r6, r0
 8003190:	4640      	mov	r0, r8
 8003192:	460f      	mov	r7, r1
 8003194:	f7fd f9ac 	bl	80004f0 <__aeabi_f2d>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4630      	mov	r0, r6
 800319e:	4639      	mov	r1, r7
 80031a0:	f7fd f848 	bl	8000234 <__adddf3>
 80031a4:	2200      	movs	r2, #0
 80031a6:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80031a8:	f7fd fb20 	bl	80007ec <__aeabi_ddiv>
 80031ac:	f7fd fc8e 	bl	8000acc <__aeabi_d2f>
 80031b0:	61e8      	str	r0, [r5, #28]
		if(HAL_GetTick()>2000)
 80031b2:	f7fe f84b 	bl	800124c <HAL_GetTick>
 80031b6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			state.init = false;
 80031ba:	bf84      	itt	hi
 80031bc:	2300      	movhi	r3, #0
 80031be:	f88b 3000 	strbhi.w	r3, [fp]
		val.current_sense = fabs( (in.current_sense-val.current_sense0)*100.0);
 80031c2:	69e9      	ldr	r1, [r5, #28]
 80031c4:	69a0      	ldr	r0, [r4, #24]
 80031c6:	f7fd fcd5 	bl	8000b74 <__aeabi_fsub>
 80031ca:	4962      	ldr	r1, [pc, #392]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80031cc:	f7fd fddc 	bl	8000d88 <__aeabi_fmul>
 80031d0:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 80031d4:	f8c5 a018 	str.w	sl, [r5, #24]
		val.temp =  19.48*in.temp*in.temp-20.09*in.temp+2.87;
 80031d8:	6a20      	ldr	r0, [r4, #32]
 80031da:	f7fd f989 	bl	80004f0 <__aeabi_f2d>
 80031de:	a34e      	add	r3, pc, #312	; (adr r3, 8003318 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	4606      	mov	r6, r0
 80031e6:	460f      	mov	r7, r1
 80031e8:	f7fd f9d6 	bl	8000598 <__aeabi_dmul>
 80031ec:	4632      	mov	r2, r6
 80031ee:	463b      	mov	r3, r7
 80031f0:	f7fd f9d2 	bl	8000598 <__aeabi_dmul>
 80031f4:	a34a      	add	r3, pc, #296	; (adr r3, 8003320 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	4680      	mov	r8, r0
 80031fc:	4689      	mov	r9, r1
 80031fe:	4630      	mov	r0, r6
 8003200:	4639      	mov	r1, r7
 8003202:	f7fd f9c9 	bl	8000598 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4640      	mov	r0, r8
 800320c:	4649      	mov	r1, r9
 800320e:	f7fd f80f 	bl	8000230 <__aeabi_dsub>
 8003212:	a345      	add	r3, pc, #276	; (adr r3, 8003328 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd f80c 	bl	8000234 <__adddf3>
 800321c:	f7fd fc56 	bl	8000acc <__aeabi_d2f>
 8003220:	4681      	mov	r9, r0
 8003222:	6228      	str	r0, [r5, #32]
		val.pot = in.pot*100.0/3.3;
 8003224:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003226:	f7fd f963 	bl	80004f0 <__aeabi_f2d>
 800322a:	2200      	movs	r2, #0
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800322e:	f7fd f9b3 	bl	8000598 <__aeabi_dmul>
 8003232:	a32f      	add	r3, pc, #188	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd fad8 	bl	80007ec <__aeabi_ddiv>
 800323c:	f7fd fc46 	bl	8000acc <__aeabi_d2f>

		avg.current = (avg.current*199.0 + val.current)/200.0;
 8003240:	4c46      	ldr	r4, [pc, #280]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x364>)
			val.current_sense0 = (val.current_sense0*199.0 +in.current_sense)/200.0;
		if(HAL_GetTick()>2000)
			state.init = false;
		val.current_sense = fabs( (in.current_sense-val.current_sense0)*100.0);
		val.temp =  19.48*in.temp*in.temp-20.09*in.temp+2.87;
		val.pot = in.pot*100.0/3.3;
 8003242:	6268      	str	r0, [r5, #36]	; 0x24
 8003244:	4680      	mov	r8, r0

		avg.current = (avg.current*199.0 + val.current)/200.0;
 8003246:	6920      	ldr	r0, [r4, #16]
 8003248:	f7fd f952 	bl	80004f0 <__aeabi_f2d>
 800324c:	a330      	add	r3, pc, #192	; (adr r3, 8003310 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f7fd f9a1 	bl	8000598 <__aeabi_dmul>
 8003256:	4606      	mov	r6, r0
 8003258:	6928      	ldr	r0, [r5, #16]
 800325a:	460f      	mov	r7, r1
 800325c:	f7fd f948 	bl	80004f0 <__aeabi_f2d>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4630      	mov	r0, r6
 8003266:	4639      	mov	r1, r7
 8003268:	f7fc ffe4 	bl	8000234 <__adddf3>
 800326c:	2200      	movs	r2, #0
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003270:	f7fd fabc 	bl	80007ec <__aeabi_ddiv>
 8003274:	f7fd fc2a 	bl	8000acc <__aeabi_d2f>
 8003278:	6120      	str	r0, [r4, #16]
		avg.u_bat = (avg.u_bat*39.0 + val.u_bat)/40.0;
 800327a:	6960      	ldr	r0, [r4, #20]
 800327c:	f7fd f938 	bl	80004f0 <__aeabi_f2d>
 8003280:	2200      	movs	r2, #0
 8003282:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003284:	f7fd f988 	bl	8000598 <__aeabi_dmul>
 8003288:	4606      	mov	r6, r0
 800328a:	6968      	ldr	r0, [r5, #20]
 800328c:	460f      	mov	r7, r1
 800328e:	f7fd f92f 	bl	80004f0 <__aeabi_f2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4630      	mov	r0, r6
 8003298:	4639      	mov	r1, r7
 800329a:	f7fc ffcb 	bl	8000234 <__adddf3>
 800329e:	2200      	movs	r2, #0
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80032a2:	f7fd faa3 	bl	80007ec <__aeabi_ddiv>
 80032a6:	f7fd fc11 	bl	8000acc <__aeabi_d2f>
 80032aa:	4605      	mov	r5, r0
 80032ac:	6160      	str	r0, [r4, #20]
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
 80032ae:	69a0      	ldr	r0, [r4, #24]
 80032b0:	f7fd f91e 	bl	80004f0 <__aeabi_f2d>
 80032b4:	2200      	movs	r2, #0
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80032b8:	f7fd f96e 	bl	8000598 <__aeabi_dmul>
 80032bc:	4606      	mov	r6, r0
 80032be:	4650      	mov	r0, sl
 80032c0:	460f      	mov	r7, r1
 80032c2:	f7fd f915 	bl	80004f0 <__aeabi_f2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4630      	mov	r0, r6
 80032cc:	4639      	mov	r1, r7
 80032ce:	f7fc ffb1 	bl	8000234 <__adddf3>
 80032d2:	2200      	movs	r2, #0
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80032d6:	f7fd fa89 	bl	80007ec <__aeabi_ddiv>
 80032da:	f7fd fbf7 	bl	8000acc <__aeabi_d2f>
 80032de:	61a0      	str	r0, [r4, #24]
 80032e0:	4682      	mov	sl, r0
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
 80032e2:	6a20      	ldr	r0, [r4, #32]
 80032e4:	f7fd f904 	bl	80004f0 <__aeabi_f2d>
 80032e8:	e03e      	b.n	8003368 <HAL_TIM_PeriodElapsedCallback+0x370>
 80032ea:	bf00      	nop
 80032ec:	f3af 8000 	nop.w
 80032f0:	66666666 	.word	0x66666666
 80032f4:	400a6666 	.word	0x400a6666
 80032f8:	00000000 	.word	0x00000000
 80032fc:	40affe00 	.word	0x40affe00
 8003300:	00000000 	.word	0x00000000
 8003304:	40dd4c00 	.word	0x40dd4c00
 8003308:	07f01fc0 	.word	0x07f01fc0
 800330c:	3fef01fc 	.word	0x3fef01fc
 8003310:	00000000 	.word	0x00000000
 8003314:	4068e000 	.word	0x4068e000
 8003318:	47ae147b 	.word	0x47ae147b
 800331c:	40337ae1 	.word	0x40337ae1
 8003320:	3d70a3d7 	.word	0x3d70a3d7
 8003324:	4034170a 	.word	0x4034170a
 8003328:	8f5c28f6 	.word	0x8f5c28f6
 800332c:	4006f5c2 	.word	0x4006f5c2
 8003330:	20000028 	.word	0x20000028
 8003334:	20000048 	.word	0x20000048
 8003338:	4089a000 	.word	0x4089a000
 800333c:	408f4000 	.word	0x408f4000
 8003340:	200000e4 	.word	0x200000e4
 8003344:	40390000 	.word	0x40390000
 8003348:	40080000 	.word	0x40080000
 800334c:	200000ac 	.word	0x200000ac
 8003350:	40690000 	.word	0x40690000
 8003354:	42c80000 	.word	0x42c80000
 8003358:	40590000 	.word	0x40590000
 800335c:	20000190 	.word	0x20000190
 8003360:	40438000 	.word	0x40438000
 8003364:	40440000 	.word	0x40440000
 8003368:	a3a9      	add	r3, pc, #676	; (adr r3, 8003610 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f7fd f913 	bl	8000598 <__aeabi_dmul>
 8003372:	4606      	mov	r6, r0
 8003374:	4648      	mov	r0, r9
 8003376:	460f      	mov	r7, r1
 8003378:	f7fd f8ba 	bl	80004f0 <__aeabi_f2d>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4630      	mov	r0, r6
 8003382:	4639      	mov	r1, r7
 8003384:	f7fc ff56 	bl	8000234 <__adddf3>
 8003388:	2200      	movs	r2, #0
 800338a:	4bad      	ldr	r3, [pc, #692]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800338c:	f7fd fa2e 	bl	80007ec <__aeabi_ddiv>
 8003390:	f7fd fb9c 	bl	8000acc <__aeabi_d2f>
 8003394:	6220      	str	r0, [r4, #32]
 8003396:	4681      	mov	r9, r0
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
 8003398:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800339a:	f7fd f8a9 	bl	80004f0 <__aeabi_f2d>
 800339e:	a39c      	add	r3, pc, #624	; (adr r3, 8003610 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f7fd f8f8 	bl	8000598 <__aeabi_dmul>
 80033a8:	4606      	mov	r6, r0
 80033aa:	4640      	mov	r0, r8
 80033ac:	460f      	mov	r7, r1
 80033ae:	f7fd f89f 	bl	80004f0 <__aeabi_f2d>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4630      	mov	r0, r6
 80033b8:	4639      	mov	r1, r7
 80033ba:	f7fc ff3b 	bl	8000234 <__adddf3>
 80033be:	2200      	movs	r2, #0
 80033c0:	4b9f      	ldr	r3, [pc, #636]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80033c2:	f7fd fa13 	bl	80007ec <__aeabi_ddiv>
 80033c6:	f7fd fb81 	bl	8000acc <__aeabi_d2f>
 80033ca:	6260      	str	r0, [r4, #36]	; 0x24
 80033cc:	4606      	mov	r6, r0
		//
		state.charged = avg.u_bat>4.1*6;
 80033ce:	4628      	mov	r0, r5
 80033d0:	f7fd f88e 	bl	80004f0 <__aeabi_f2d>
 80033d4:	a390      	add	r3, pc, #576	; (adr r3, 8003618 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f04f 0501 	mov.w	r5, #1
 80033de:	f7fd fb6b 	bl	8000ab8 <__aeabi_dcmpgt>
 80033e2:	b900      	cbnz	r0, 80033e6 <HAL_TIM_PeriodElapsedCallback+0x3ee>
 80033e4:	4605      	mov	r5, r0
 80033e6:	4b97      	ldr	r3, [pc, #604]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x64c>)
		state.startDVS = avg.pot>50;
 80033e8:	4997      	ldr	r1, [pc, #604]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x650>)
		avg.u_bat = (avg.u_bat*39.0 + val.u_bat)/40.0;
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
 80033ea:	709d      	strb	r5, [r3, #2]
		state.startDVS = avg.pot>50;
 80033ec:	4630      	mov	r0, r6
 80033ee:	f04f 0501 	mov.w	r5, #1
 80033f2:	f7fd fe85 	bl	8001100 <__aeabi_fcmpgt>
 80033f6:	b900      	cbnz	r0, 80033fa <HAL_TIM_PeriodElapsedCallback+0x402>
 80033f8:	4605      	mov	r5, r0
 80033fa:	4b92      	ldr	r3, [pc, #584]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x64c>)
		state.coolerEnabled = avg.temp>40.0;
 80033fc:	4993      	ldr	r1, [pc, #588]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x654>)
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
 80033fe:	705d      	strb	r5, [r3, #1]
		state.coolerEnabled = avg.temp>40.0;
 8003400:	4648      	mov	r0, r9
 8003402:	f04f 0501 	mov.w	r5, #1
 8003406:	f7fd fe7b 	bl	8001100 <__aeabi_fcmpgt>
 800340a:	b900      	cbnz	r0, 800340e <HAL_TIM_PeriodElapsedCallback+0x416>
 800340c:	4605      	mov	r5, r0
 800340e:	4b8d      	ldr	r3, [pc, #564]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x64c>)
		state.coolerRegulated = avg.temp>60.0;
 8003410:	498f      	ldr	r1, [pc, #572]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x658>)
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
		state.coolerEnabled = avg.temp>40.0;
 8003412:	70dd      	strb	r5, [r3, #3]
		state.coolerRegulated = avg.temp>60.0;
 8003414:	4648      	mov	r0, r9
 8003416:	f04f 0501 	mov.w	r5, #1
 800341a:	f7fd fe71 	bl	8001100 <__aeabi_fcmpgt>
 800341e:	b900      	cbnz	r0, 8003422 <HAL_TIM_PeriodElapsedCallback+0x42a>
 8003420:	4605      	mov	r5, r0
 8003422:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x64c>)
		state.generateing = avg.current_sense>5;
 8003424:	498b      	ldr	r1, [pc, #556]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x65c>)
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
		state.coolerEnabled = avg.temp>40.0;
		state.coolerRegulated = avg.temp>60.0;
 8003426:	711d      	strb	r5, [r3, #4]
		state.generateing = avg.current_sense>5;
 8003428:	4650      	mov	r0, sl
 800342a:	f04f 0501 	mov.w	r5, #1
 800342e:	f7fd fe67 	bl	8001100 <__aeabi_fcmpgt>
 8003432:	b900      	cbnz	r0, 8003436 <HAL_TIM_PeriodElapsedCallback+0x43e>
 8003434:	4605      	mov	r5, r0
 8003436:	4b83      	ldr	r3, [pc, #524]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x64c>)
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
 8003438:	4983      	ldr	r1, [pc, #524]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x650>)
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
		state.coolerEnabled = avg.temp>40.0;
		state.coolerRegulated = avg.temp>60.0;
		state.generateing = avg.current_sense>5;
 800343a:	715d      	strb	r5, [r3, #5]
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
 800343c:	4630      	mov	r0, r6
 800343e:	f7fd fe5f 	bl	8001100 <__aeabi_fcmpgt>
 8003442:	4d85      	ldr	r5, [pc, #532]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003444:	b1c0      	cbz	r0, 8003478 <HAL_TIM_PeriodElapsedCallback+0x480>
			pwm.starter = (pwm.starter*299.0 +1400.0)/300.0;
 8003446:	6868      	ldr	r0, [r5, #4]
 8003448:	f7fd f852 	bl	80004f0 <__aeabi_f2d>
 800344c:	a374      	add	r3, pc, #464	; (adr r3, 8003620 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f8a1 	bl	8000598 <__aeabi_dmul>
 8003456:	2200      	movs	r2, #0
 8003458:	4b80      	ldr	r3, [pc, #512]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x664>)
 800345a:	f7fc feeb 	bl	8000234 <__adddf3>
 800345e:	a372      	add	r3, pc, #456	; (adr r3, 8003628 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd f9c2 	bl	80007ec <__aeabi_ddiv>
 8003468:	f7fd fb30 	bl	8000acc <__aeabi_d2f>
			if(state.generateing)
 800346c:	4979      	ldr	r1, [pc, #484]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x65c>)
		state.coolerRegulated = avg.temp>60.0;
		state.generateing = avg.current_sense>5;
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
			pwm.starter = (pwm.starter*299.0 +1400.0)/300.0;
 800346e:	6068      	str	r0, [r5, #4]
			if(state.generateing)
 8003470:	4650      	mov	r0, sl
 8003472:	f7fd fe45 	bl	8001100 <__aeabi_fcmpgt>
 8003476:	b108      	cbz	r0, 800347c <HAL_TIM_PeriodElapsedCallback+0x484>
				pwm.starter = 1000;
 8003478:	4b79      	ldr	r3, [pc, #484]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800347a:	606b      	str	r3, [r5, #4]
		}else
			pwm.starter = 1000;
		//throttle
		ice.delta = ice.target - avg.current_sense;
 800347c:	4f79      	ldr	r7, [pc, #484]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800347e:	4651      	mov	r1, sl
 8003480:	6838      	ldr	r0, [r7, #0]
 8003482:	f7fd fb77 	bl	8000b74 <__aeabi_fsub>
 8003486:	4680      	mov	r8, r0
 8003488:	6078      	str	r0, [r7, #4]
		ice.int_delta += ice.delta*0.001;
 800348a:	68b8      	ldr	r0, [r7, #8]
 800348c:	f7fd f830 	bl	80004f0 <__aeabi_f2d>
 8003490:	e9cd 0100 	strd	r0, r1, [sp]
 8003494:	4640      	mov	r0, r8
 8003496:	f7fd f82b 	bl	80004f0 <__aeabi_f2d>
 800349a:	a365      	add	r3, pc, #404	; (adr r3, 8003630 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fd f87a 	bl	8000598 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034ac:	f7fc fec2 	bl	8000234 <__adddf3>
 80034b0:	f7fd fb0c 	bl	8000acc <__aeabi_d2f>

		if(state.startDVS){
 80034b4:	4964      	ldr	r1, [pc, #400]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x650>)
				pwm.starter = 1000;
		}else
			pwm.starter = 1000;
		//throttle
		ice.delta = ice.target - avg.current_sense;
		ice.int_delta += ice.delta*0.001;
 80034b6:	4680      	mov	r8, r0
 80034b8:	60b8      	str	r0, [r7, #8]

		if(state.startDVS){
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7fd fe20 	bl	8001100 <__aeabi_fcmpgt>
 80034c0:	b198      	cbz	r0, 80034ea <HAL_TIM_PeriodElapsedCallback+0x4f2>
			pwm.throttle = HOLOSTOI;
 80034c2:	4e69      	ldr	r6, [pc, #420]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x670>)
			if(state.generateing){//zavelsa
 80034c4:	4963      	ldr	r1, [pc, #396]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x65c>)
		//throttle
		ice.delta = ice.target - avg.current_sense;
		ice.int_delta += ice.delta*0.001;

		if(state.startDVS){
			pwm.throttle = HOLOSTOI;
 80034c6:	60ae      	str	r6, [r5, #8]
			if(state.generateing){//zavelsa
 80034c8:	4650      	mov	r0, sl
 80034ca:	f7fd fe19 	bl	8001100 <__aeabi_fcmpgt>
 80034ce:	b140      	cbz	r0, 80034e2 <HAL_TIM_PeriodElapsedCallback+0x4ea>
				ice.target = 20.0;
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x674>)
				pwm.throttle = (HOLOSTOI+ice.int_delta);//1750*PCA0_MKS;
 80034d2:	4631      	mov	r1, r6
		ice.int_delta += ice.delta*0.001;

		if(state.startDVS){
			pwm.throttle = HOLOSTOI;
			if(state.generateing){//zavelsa
				ice.target = 20.0;
 80034d4:	603b      	str	r3, [r7, #0]
				pwm.throttle = (HOLOSTOI+ice.int_delta);//1750*PCA0_MKS;
 80034d6:	4640      	mov	r0, r8
 80034d8:	f7fd fb4e 	bl	8000b78 <__addsf3>
 80034dc:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80034de:	6098      	str	r0, [r3, #8]
 80034e0:	e005      	b.n	80034ee <HAL_TIM_PeriodElapsedCallback+0x4f6>
			}else{
						//time=80;
						ice.int_delta = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
						ice.target=0;
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	e001      	b.n	80034ee <HAL_TIM_PeriodElapsedCallback+0x4f6>
			}
		}else{
			pwm.throttle = MIN_Z;//1200*PCA0_MKS;//;1200*PCA0_MKS;//0//1320
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80034ec:	60ab      	str	r3, [r5, #8]
		}
		//cooler routine
		//state.coolerEnabled = true;
				if(state.coolerEnabled && HAL_GetTick()>=COOLER_DELAY*1000){
 80034ee:	4957      	ldr	r1, [pc, #348]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80034f0:	4648      	mov	r0, r9
 80034f2:	f7fd fe05 	bl	8001100 <__aeabi_fcmpgt>
 80034f6:	b1d8      	cbz	r0, 8003530 <HAL_TIM_PeriodElapsedCallback+0x538>
 80034f8:	f7fd fea8 	bl	800124c <HAL_GetTick>
 80034fc:	f242 730f 	movw	r3, #9999	; 0x270f
 8003500:	4298      	cmp	r0, r3
 8003502:	d915      	bls.n	8003530 <HAL_TIM_PeriodElapsedCallback+0x538>
					pwm.cooler = (pwm.cooler*299.0 +COOLER_PWM_DUTY)/300.0;
 8003504:	6828      	ldr	r0, [r5, #0]
 8003506:	f7fc fff3 	bl	80004f0 <__aeabi_f2d>
 800350a:	a345      	add	r3, pc, #276	; (adr r3, 8003620 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f7fd f842 	bl	8000598 <__aeabi_dmul>
 8003514:	a348      	add	r3, pc, #288	; (adr r3, 8003638 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fc fe8b 	bl	8000234 <__adddf3>
 800351e:	a342      	add	r3, pc, #264	; (adr r3, 8003628 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f962 	bl	80007ec <__aeabi_ddiv>
 8003528:	f7fd fad0 	bl	8000acc <__aeabi_d2f>
 800352c:	6028      	str	r0, [r5, #0]
 800352e:	e001      	b.n	8003534 <HAL_TIM_PeriodElapsedCallback+0x53c>
				}else{
					pwm.cooler = COOLER_PWM_OFF;//cooler
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8003532:	602b      	str	r3, [r5, #0]
				}
				if(state.coolerRegulated && HAL_GetTick()>=COOLER_DELAY*1000){
 8003534:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8003538:	b36b      	cbz	r3, 8003596 <HAL_TIM_PeriodElapsedCallback+0x59e>
 800353a:	f7fd fe87 	bl	800124c <HAL_GetTick>
 800353e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003542:	4298      	cmp	r0, r3
 8003544:	d927      	bls.n	8003596 <HAL_TIM_PeriodElapsedCallback+0x59e>
					pwm.cooler = (pwm.cooler*299.0 +(COOLER_PWM_DUTY+(avg.temp-60.0)*COOLER_PWM_K))/300.0;
 8003546:	6a20      	ldr	r0, [r4, #32]
 8003548:	f7fc ffd2 	bl	80004f0 <__aeabi_f2d>
 800354c:	2200      	movs	r2, #0
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003550:	f7fc fe6e 	bl	8000230 <__aeabi_dsub>
 8003554:	2200      	movs	r2, #0
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8003558:	f7fd f81e 	bl	8000598 <__aeabi_dmul>
 800355c:	a336      	add	r3, pc, #216	; (adr r3, 8003638 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fc fe67 	bl	8000234 <__adddf3>
 8003566:	4606      	mov	r6, r0
 8003568:	6828      	ldr	r0, [r5, #0]
 800356a:	460f      	mov	r7, r1
 800356c:	f7fc ffc0 	bl	80004f0 <__aeabi_f2d>
 8003570:	a32b      	add	r3, pc, #172	; (adr r3, 8003620 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fd f80f 	bl	8000598 <__aeabi_dmul>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4630      	mov	r0, r6
 8003580:	4639      	mov	r1, r7
 8003582:	f7fc fe57 	bl	8000234 <__adddf3>
 8003586:	a328      	add	r3, pc, #160	; (adr r3, 8003628 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fd f92e 	bl	80007ec <__aeabi_ddiv>
 8003590:	f7fd fa9c 	bl	8000acc <__aeabi_d2f>
 8003594:	6028      	str	r0, [r5, #0]
				}
				if(pwm.cooler>COOLER_PWM_MAX)
 8003596:	4c3a      	ldr	r4, [pc, #232]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003598:	6828      	ldr	r0, [r5, #0]
 800359a:	4621      	mov	r1, r4
 800359c:	f7fd fdb0 	bl	8001100 <__aeabi_fcmpgt>
 80035a0:	b108      	cbz	r0, 80035a6 <HAL_TIM_PeriodElapsedCallback+0x5ae>
					pwm.cooler = COOLER_PWM_MAX;
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80035a4:	601c      	str	r4, [r3, #0]
		//pwm control
		TIM3->CCR4 = pwm.cooler;
 80035a6:	6828      	ldr	r0, [r5, #0]
 80035a8:	f7fd fdb4 	bl	8001114 <__aeabi_f2uiz>
 80035ac:	4c35      	ldr	r4, [pc, #212]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80035ae:	6420      	str	r0, [r4, #64]	; 0x40
		TIM3->CCR3 = pwm.throttle;
 80035b0:	68a8      	ldr	r0, [r5, #8]
 80035b2:	f7fd fdaf 	bl	8001114 <__aeabi_f2uiz>
 80035b6:	63e0      	str	r0, [r4, #60]	; 0x3c
		TIM3->CCR2 = pwm.starter;
 80035b8:	6868      	ldr	r0, [r5, #4]
 80035ba:	f7fd fdab 	bl	8001114 <__aeabi_f2uiz>
		//LED control
		if(state.startDVS)
 80035be:	f89b 5001 	ldrb.w	r5, [fp, #1]
				if(pwm.cooler>COOLER_PWM_MAX)
					pwm.cooler = COOLER_PWM_MAX;
		//pwm control
		TIM3->CCR4 = pwm.cooler;
		TIM3->CCR3 = pwm.throttle;
		TIM3->CCR2 = pwm.starter;
 80035c2:	63a0      	str	r0, [r4, #56]	; 0x38
 80035c4:	4c30      	ldr	r4, [pc, #192]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x690>)
		//LED control
		if(state.startDVS)
 80035c6:	b12d      	cbz	r5, 80035d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80035c8:	2201      	movs	r2, #1
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	482f      	ldr	r0, [pc, #188]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80035ce:	f7fe fc79 	bl	8001ec4 <HAL_GPIO_WritePin>
 80035d2:	e008      	b.n	80035e6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
		else if(time>500){
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035da:	d904      	bls.n	80035e6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80035dc:	2140      	movs	r1, #64	; 0x40
 80035de:	482b      	ldr	r0, [pc, #172]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80035e0:	f7fe fc74 	bl	8001ecc <HAL_GPIO_TogglePin>
			time=0;
 80035e4:	6025      	str	r5, [r4, #0]
		}
		if(state.coolerEnabled && time>50){
 80035e6:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80035ea:	b14b      	cbz	r3, 8003600 <HAL_TIM_PeriodElapsedCallback+0x608>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	2b32      	cmp	r3, #50	; 0x32
 80035f0:	d906      	bls.n	8003600 <HAL_TIM_PeriodElapsedCallback+0x608>
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80035f2:	2140      	movs	r1, #64	; 0x40
 80035f4:	4825      	ldr	r0, [pc, #148]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80035f6:	f7fe fc69 	bl	8001ecc <HAL_GPIO_TogglePin>
			time=0;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
		}
		time++;
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	6023      	str	r3, [r4, #0]
	}

}
 8003606:	b003      	add	sp, #12
 8003608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800360c:	f3af 8000 	nop.w
 8003610:	00000000 	.word	0x00000000
 8003614:	4068e000 	.word	0x4068e000
 8003618:	99999999 	.word	0x99999999
 800361c:	40389999 	.word	0x40389999
 8003620:	00000000 	.word	0x00000000
 8003624:	4072b000 	.word	0x4072b000
 8003628:	00000000 	.word	0x00000000
 800362c:	4072c000 	.word	0x4072c000
 8003630:	d2f1a9fc 	.word	0xd2f1a9fc
 8003634:	3f50624d 	.word	0x3f50624d
 8003638:	00000000 	.word	0x00000000
 800363c:	40913000 	.word	0x40913000
 8003640:	40690000 	.word	0x40690000
 8003644:	200000ac 	.word	0x200000ac
 8003648:	42480000 	.word	0x42480000
 800364c:	42200000 	.word	0x42200000
 8003650:	42700000 	.word	0x42700000
 8003654:	40a00000 	.word	0x40a00000
 8003658:	20000144 	.word	0x20000144
 800365c:	4095e000 	.word	0x4095e000
 8003660:	447a0000 	.word	0x447a0000
 8003664:	200001b8 	.word	0x200001b8
 8003668:	44898000 	.word	0x44898000
 800366c:	41a00000 	.word	0x41a00000
 8003670:	44660000 	.word	0x44660000
 8003674:	44480000 	.word	0x44480000
 8003678:	404e0000 	.word	0x404e0000
 800367c:	40140000 	.word	0x40140000
 8003680:	44e10000 	.word	0x44e10000
 8003684:	40000400 	.word	0x40000400
 8003688:	20000024 	.word	0x20000024
 800368c:	40011000 	.word	0x40011000

08003690 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003690:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003692:	f44f 3280 	mov.w	r2, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003696:	b09d      	sub	sp, #116	; 0x74
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003698:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800369a:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800369c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800369e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036a0:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a2:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036a4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036a8:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80036aa:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ac:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80036ae:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b0:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036b2:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80036b4:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036b6:	f7fe fc0d 	bl	8001ed4 <HAL_RCC_OscConfig>
 80036ba:	b100      	cbz	r0, 80036be <SystemClock_Config+0x2e>
 80036bc:	e7fe      	b.n	80036bc <SystemClock_Config+0x2c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036be:	230f      	movs	r3, #15
 80036c0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036c8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036ca:	4629      	mov	r1, r5
 80036cc:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ce:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036d0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036d2:	f7fe ff81 	bl	80025d8 <HAL_RCC_ClockConfig>
 80036d6:	b100      	cbz	r0, 80036da <SystemClock_Config+0x4a>
 80036d8:	e7fe      	b.n	80036d8 <SystemClock_Config+0x48>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036de:	a806      	add	r0, sp, #24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80036e0:	9506      	str	r5, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80036e2:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036e4:	f7ff f830 	bl	8002748 <HAL_RCCEx_PeriphCLKConfig>
 80036e8:	4605      	mov	r5, r0
 80036ea:	b100      	cbz	r0, 80036ee <SystemClock_Config+0x5e>
 80036ec:	e7fe      	b.n	80036ec <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80036ee:	f7ff f825 	bl	800273c <HAL_RCC_GetHCLKFreq>
 80036f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80036fa:	f7fe f887 	bl	800180c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80036fe:	2004      	movs	r0, #4
 8003700:	f7fe f89a 	bl	8001838 <HAL_SYSTICK_CLKSourceConfig>
 8003704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003708:	fa93 f3a3 	rbit	r3, r3

    /**Configure the Systick interrupt time 
    */
  __HAL_RCC_PLLI2S_ENABLE();
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003716:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800371a:	601c      	str	r4, [r3, #0]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800371c:	462a      	mov	r2, r5
 800371e:	4629      	mov	r1, r5
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	f7fe f832 	bl	800178c <HAL_NVIC_SetPriority>
}
 8003728:	b01d      	add	sp, #116	; 0x74
 800372a:	bd30      	pop	{r4, r5, pc}

0800372c <main>:

}
/* USER CODE END 0 */

int main(void)
{
 800372c:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800372e:	4c98      	ldr	r4, [pc, #608]	; (8003990 <main+0x264>)

}
/* USER CODE END 0 */

int main(void)
{
 8003730:	b092      	sub	sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003732:	f7fd fd71 	bl	8001218 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003736:	f7ff ffab 	bl	8003690 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800373a:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800373c:	2201      	movs	r2, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800373e:	f043 0320 	orr.w	r3, r3, #32
 8003742:	61a3      	str	r3, [r4, #24]
 8003744:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003746:	2140      	movs	r1, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003750:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003752:	4890      	ldr	r0, [pc, #576]	; (8003994 <main+0x268>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003754:	f043 0310 	orr.w	r3, r3, #16
 8003758:	61a3      	str	r3, [r4, #24]
 800375a:	69a3      	ldr	r3, [r4, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375c:	2701      	movs	r7, #1

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	9302      	str	r3, [sp, #8]
 8003764:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003768:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	61a3      	str	r3, [r4, #24]
 8003770:	69a3      	ldr	r3, [r4, #24]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	9303      	str	r3, [sp, #12]
 8003778:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	69a3      	ldr	r3, [r4, #24]
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	61a3      	str	r3, [r4, #24]
 8003782:	69a3      	ldr	r3, [r4, #24]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	9304      	str	r3, [sp, #16]
 800378a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800378c:	f7fe fb9a 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003796:	4880      	ldr	r0, [pc, #512]	; (8003998 <main+0x26c>)
 8003798:	f7fe fb94 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 800379c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800379e:	a90b      	add	r1, sp, #44	; 0x2c
 80037a0:	487c      	ldr	r0, [pc, #496]	; (8003994 <main+0x268>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80037a2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037a4:	950e      	str	r5, [sp, #56]	; 0x38
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80037a8:	f7fe fab4 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 80037ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	a90b      	add	r1, sp, #44	; 0x2c
 80037b2:	4879      	ldr	r0, [pc, #484]	; (8003998 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 80037b4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037b6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f7fe faab 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037be:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037c0:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c4:	a90b      	add	r1, sp, #44	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037c6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	4874      	ldr	r0, [pc, #464]	; (800399c <main+0x270>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037ca:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037cc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ce:	f7fe faa1 	bl	8001d14 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037d2:	6963      	ldr	r3, [r4, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037d4:	4629      	mov	r1, r5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037d6:	433b      	orrs	r3, r7
 80037d8:	6163      	str	r3, [r4, #20]
 80037da:	6963      	ldr	r3, [r4, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037dc:	462a      	mov	r2, r5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037de:	403b      	ands	r3, r7
 80037e0:	9300      	str	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037e2:	200b      	movs	r0, #11
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037e4:	9b00      	ldr	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037e6:	f7fd ffd1 	bl	800178c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037ea:	200b      	movs	r0, #11
 80037ec:	f7fe f802 	bl	80017f4 <HAL_NVIC_EnableIRQ>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80037f0:	4c6b      	ldr	r4, [pc, #428]	; (80039a0 <main+0x274>)
  htim3.Init.Prescaler = 71;
 80037f2:	496c      	ldr	r1, [pc, #432]	; (80039a4 <main+0x278>)
 80037f4:	2347      	movs	r3, #71	; 0x47
 80037f6:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2790;
 80037fa:	f640 23e6 	movw	r3, #2790	; 0xae6
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037fe:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003800:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 2790;
 8003802:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003804:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003806:	f7ff faa5 	bl	8002d54 <HAL_TIM_Base_Init>
 800380a:	b100      	cbz	r0, 800380e <main+0xe2>
 800380c:	e7fe      	b.n	800380c <main+0xe0>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800380e:	ad12      	add	r5, sp, #72	; 0x48
 8003810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003814:	f845 3d2c 	str.w	r3, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003818:	4629      	mov	r1, r5
 800381a:	4620      	mov	r0, r4
 800381c:	f7ff f8fd 	bl	8002a1a <HAL_TIM_ConfigClockSource>
 8003820:	b100      	cbz	r0, 8003824 <main+0xf8>
 8003822:	e7fe      	b.n	8003822 <main+0xf6>
  {
    Error_Handler();
  }

  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff faaf 	bl	8002d88 <HAL_TIM_OC_Init>
 800382a:	b100      	cbz	r0, 800382e <main+0x102>
 800382c:	e7fe      	b.n	800382c <main+0x100>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff fac4 	bl	8002dbc <HAL_TIM_PWM_Init>
 8003834:	b100      	cbz	r0, 8003838 <main+0x10c>
 8003836:	e7fe      	b.n	8003836 <main+0x10a>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003838:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800383a:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800383c:	a905      	add	r1, sp, #20
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff fbb6 	bl	8002fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003844:	4602      	mov	r2, r0
 8003846:	b100      	cbz	r0, 800384a <main+0x11e>
 8003848:	e7fe      	b.n	8003848 <main+0x11c>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800384a:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 800384c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003850:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003852:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003854:	a90b      	add	r1, sp, #44	; 0x2c
 8003856:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 1000;
 8003858:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800385a:	f7ff faf5 	bl	8002e48 <HAL_TIM_OC_ConfigChannel>
 800385e:	b100      	cbz	r0, 8003862 <main+0x136>
 8003860:	e7fe      	b.n	8003860 <main+0x134>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003862:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003864:	2204      	movs	r2, #4
 8003866:	a90b      	add	r1, sp, #44	; 0x2c
 8003868:	4620      	mov	r0, r4
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800386a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800386c:	f7ff fb1a 	bl	8002ea4 <HAL_TIM_PWM_ConfigChannel>
 8003870:	b100      	cbz	r0, 8003874 <main+0x148>
 8003872:	e7fe      	b.n	8003872 <main+0x146>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003874:	2208      	movs	r2, #8
 8003876:	a90b      	add	r1, sp, #44	; 0x2c
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff fb13 	bl	8002ea4 <HAL_TIM_PWM_ConfigChannel>
 800387e:	b100      	cbz	r0, 8003882 <main+0x156>
 8003880:	e7fe      	b.n	8003880 <main+0x154>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003882:	220c      	movs	r2, #12
 8003884:	a90b      	add	r1, sp, #44	; 0x2c
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff fb0c 	bl	8002ea4 <HAL_TIM_PWM_ConfigChannel>
 800388c:	4606      	mov	r6, r0
 800388e:	b100      	cbz	r0, 8003892 <main+0x166>
 8003890:	e7fe      	b.n	8003890 <main+0x164>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);
 8003892:	4620      	mov	r0, r4
 8003894:	f000 f976 	bl	8003b84 <HAL_TIM_MspPostInit>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8003898:	4843      	ldr	r0, [pc, #268]	; (80039a8 <main+0x27c>)
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <main+0x280>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 800389c:	60c7      	str	r7, [r0, #12]

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800389e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80038a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038a6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80038aa:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 8;
 80038ac:	2308      	movs	r3, #8
    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038ae:	6146      	str	r6, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038b0:	6046      	str	r6, [r0, #4]
  hadc1.Init.NbrOfConversion = 8;
 80038b2:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038b4:	f7fd fec4 	bl	8001640 <HAL_ADC_Init>
 80038b8:	b100      	cbz	r0, 80038bc <main+0x190>
 80038ba:	e7fe      	b.n	80038ba <main+0x18e>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 80038bc:	230c      	movs	r3, #12
 80038be:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 1;
 80038c0:	2301      	movs	r3, #1
 80038c2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c4:	a90b      	add	r1, sp, #44	; 0x2c

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038c6:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c8:	4837      	ldr	r0, [pc, #220]	; (80039a8 <main+0x27c>)

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038ca:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038cc:	f7fd fd0e 	bl	80012ec <HAL_ADC_ConfigChannel>
 80038d0:	b100      	cbz	r0, 80038d4 <main+0x1a8>
 80038d2:	e7fe      	b.n	80038d2 <main+0x1a6>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
 80038d4:	230d      	movs	r3, #13
 80038d6:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038d8:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 2;
 80038da:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038dc:	4832      	ldr	r0, [pc, #200]	; (80039a8 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 2;
 80038de:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038e0:	f7fd fd04 	bl	80012ec <HAL_ADC_ConfigChannel>
 80038e4:	b100      	cbz	r0, 80038e8 <main+0x1bc>
 80038e6:	e7fe      	b.n	80038e6 <main+0x1ba>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
 80038e8:	230e      	movs	r3, #14
 80038ea:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038ec:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
  sConfig.Rank = 3;
 80038ee:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038f0:	482d      	ldr	r0, [pc, #180]	; (80039a8 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
  sConfig.Rank = 3;
 80038f2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038f4:	f7fd fcfa 	bl	80012ec <HAL_ADC_ConfigChannel>
 80038f8:	b100      	cbz	r0, 80038fc <main+0x1d0>
 80038fa:	e7fe      	b.n	80038fa <main+0x1ce>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
 80038fc:	230f      	movs	r3, #15
 80038fe:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003900:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 4;
 8003902:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003904:	4828      	ldr	r0, [pc, #160]	; (80039a8 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 4;
 8003906:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003908:	f7fd fcf0 	bl	80012ec <HAL_ADC_ConfigChannel>
 800390c:	b100      	cbz	r0, 8003910 <main+0x1e4>
 800390e:	e7fe      	b.n	800390e <main+0x1e2>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 8003910:	2406      	movs	r4, #6
  sConfig.Rank = 5;
 8003912:	2605      	movs	r6, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003914:	a90b      	add	r1, sp, #44	; 0x2c
 8003916:	4824      	ldr	r0, [pc, #144]	; (80039a8 <main+0x27c>)
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 8003918:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfig.Rank = 5;
 800391a:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800391c:	f7fd fce6 	bl	80012ec <HAL_ADC_ConfigChannel>
 8003920:	b100      	cbz	r0, 8003924 <main+0x1f8>
 8003922:	e7fe      	b.n	8003922 <main+0x1f6>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = 6;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003924:	a90b      	add	r1, sp, #44	; 0x2c
 8003926:	4820      	ldr	r0, [pc, #128]	; (80039a8 <main+0x27c>)
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8003928:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = 6;
 800392a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800392c:	f7fd fcde 	bl	80012ec <HAL_ADC_ConfigChannel>
 8003930:	b100      	cbz	r0, 8003934 <main+0x208>
 8003932:	e7fe      	b.n	8003932 <main+0x206>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 8003934:	230b      	movs	r3, #11
 8003936:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 7;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003938:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = 7;
 800393a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800393c:	481a      	ldr	r0, [pc, #104]	; (80039a8 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = 7;
 800393e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003940:	f7fd fcd4 	bl	80012ec <HAL_ADC_ConfigChannel>
 8003944:	b100      	cbz	r0, 8003948 <main+0x21c>
 8003946:	e7fe      	b.n	8003946 <main+0x21a>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8003948:	230a      	movs	r3, #10
 800394a:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 8;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800394c:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 8;
 800394e:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003950:	4815      	ldr	r0, [pc, #84]	; (80039a8 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 8;
 8003952:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003954:	f7fd fcca 	bl	80012ec <HAL_ADC_ConfigChannel>
 8003958:	b100      	cbz	r0, 800395c <main+0x230>
 800395a:	e7fe      	b.n	800395a <main+0x22e>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800395c:	4c14      	ldr	r4, [pc, #80]	; (80039b0 <main+0x284>)
  htim2.Init.Prescaler = 72;
 800395e:	2348      	movs	r3, #72	; 0x48
 8003960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003964:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003968:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 1000;
 800396a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396e:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003970:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 72;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 8003972:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003974:	f7ff f9ee 	bl	8002d54 <HAL_TIM_Base_Init>
 8003978:	b100      	cbz	r0, 800397c <main+0x250>
 800397a:	e7fe      	b.n	800397a <main+0x24e>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800397c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003980:	a90b      	add	r1, sp, #44	; 0x2c
 8003982:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003984:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003986:	f7ff f848 	bl	8002a1a <HAL_TIM_ConfigClockSource>
 800398a:	b198      	cbz	r0, 80039b4 <main+0x288>
 800398c:	e7fe      	b.n	800398c <main+0x260>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	40011000 	.word	0x40011000
 8003998:	40010800 	.word	0x40010800
 800399c:	40010c00 	.word	0x40010c00
 80039a0:	20000070 	.word	0x20000070
 80039a4:	40000400 	.word	0x40000400
 80039a8:	200000b4 	.word	0x200000b4
 80039ac:	40012400 	.word	0x40012400
 80039b0:	20000154 	.word	0x20000154
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039b6:	4629      	mov	r1, r5
 80039b8:	480f      	ldr	r0, [pc, #60]	; (80039f8 <main+0x2cc>)
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ba:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039bc:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039be:	f7ff faf7 	bl	8002fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80039c2:	b100      	cbz	r0, 80039c6 <main+0x29a>
 80039c4:	e7fe      	b.n	80039c4 <main+0x298>
  MX_TIM3_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();

  /* USER CODE BEGIN 2 */
  state.init = true;
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <main+0x2d0>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1,&ADC,8);
 80039cc:	490c      	ldr	r1, [pc, #48]	; (8003a00 <main+0x2d4>)
 80039ce:	2208      	movs	r2, #8
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <main+0x2d8>)
 80039d2:	f7fd fd83 	bl	80014dc <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80039d6:	2104      	movs	r1, #4
 80039d8:	480b      	ldr	r0, [pc, #44]	; (8003a08 <main+0x2dc>)
 80039da:	f7ff fad3 	bl	8002f84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80039de:	2108      	movs	r1, #8
 80039e0:	4809      	ldr	r0, [pc, #36]	; (8003a08 <main+0x2dc>)
 80039e2:	f7ff facf 	bl	8002f84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80039e6:	210c      	movs	r1, #12
 80039e8:	4807      	ldr	r0, [pc, #28]	; (8003a08 <main+0x2dc>)
 80039ea:	f7ff facb 	bl	8002f84 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80039ee:	4802      	ldr	r0, [pc, #8]	; (80039f8 <main+0x2cc>)
 80039f0:	f7ff f806 	bl	8002a00 <HAL_TIM_Base_Start_IT>
 80039f4:	e7fe      	b.n	80039f4 <main+0x2c8>
 80039f6:	bf00      	nop
 80039f8:	20000154 	.word	0x20000154
 80039fc:	200000ac 	.word	0x200000ac
 8003a00:	20000028 	.word	0x20000028
 8003a04:	200000b4 	.word	0x200000b4
 8003a08:	20000070 	.word	0x20000070

08003a0c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003a0c:	e7fe      	b.n	8003a0c <Error_Handler>
	...

08003a10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a10:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a12:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a14:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a16:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	619a      	str	r2, [r3, #24]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a28:	f7fd fe9e 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4611      	mov	r1, r2
 8003a30:	f06f 000b 	mvn.w	r0, #11
 8003a34:	f7fd feaa 	bl	800178c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	f06f 000a 	mvn.w	r0, #10
 8003a40:	f7fd fea4 	bl	800178c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	4611      	mov	r1, r2
 8003a48:	f06f 0009 	mvn.w	r0, #9
 8003a4c:	f7fd fe9e 	bl	800178c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	4611      	mov	r1, r2
 8003a54:	f06f 0004 	mvn.w	r0, #4
 8003a58:	f7fd fe98 	bl	800178c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4611      	mov	r1, r2
 8003a60:	f06f 0003 	mvn.w	r0, #3
 8003a64:	f7fd fe92 	bl	800178c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	f06f 0001 	mvn.w	r0, #1
 8003a70:	f7fd fe8c 	bl	800178c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	4611      	mov	r1, r2
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f7fd fe86 	bl	800178c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a80:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_MspInit+0x88>)
 8003a82:	6853      	ldr	r3, [r2, #4]
 8003a84:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a8e:	b003      	add	sp, #12
 8003a90:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40010000 	.word	0x40010000

08003a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a9c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003a9e:	6802      	ldr	r2, [r0, #0]
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_ADC_MspInit+0x78>)

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003aa2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003aa4:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003aa6:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003aa8:	d132      	bne.n	8003b10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003aaa:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003aae:	699a      	ldr	r2, [r3, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ab0:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab6:	619a      	str	r2, [r3, #24]
 8003ab8:	699b      	ldr	r3, [r3, #24]
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aba:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	9b01      	ldr	r3, [sp, #4]
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac4:	4814      	ldr	r0, [pc, #80]	; (8003b18 <HAL_ADC_MspInit+0x7c>)
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
 8003ac6:	233f      	movs	r3, #63	; 0x3f
 8003ac8:	9302      	str	r3, [sp, #8]
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aca:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003acc:	f7fe f922 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
 8003ad0:	2370      	movs	r3, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ad2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	4811      	ldr	r0, [pc, #68]	; (8003b1c <HAL_ADC_MspInit+0x80>)

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8003ad6:	4c12      	ldr	r4, [pc, #72]	; (8003b20 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
 8003ada:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f7fe f91a 	bl	8001d14 <HAL_GPIO_Init>
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ae0:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aea:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8003af0:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003af2:	6162      	str	r2, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003af4:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003af6:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003af8:	4620      	mov	r0, r4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afa:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003afc:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003afe:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b00:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b02:	f7fd feaa 	bl	800185a <HAL_DMA_Init>
 8003b06:	b108      	cbz	r0, 8003b0c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003b08:	f7ff ff80 	bl	8003a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b0c:	622c      	str	r4, [r5, #32]
 8003b0e:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b10:	b007      	add	sp, #28
 8003b12:	bd30      	pop	{r4, r5, pc}
 8003b14:	40012400 	.word	0x40012400
 8003b18:	40011000 	.word	0x40011000
 8003b1c:	40010800 	.word	0x40010800
 8003b20:	2000010c 	.word	0x2000010c
 8003b24:	40020008 	.word	0x40020008

08003b28 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8003b28:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b2a:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM2)
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d113      	bne.n	8003b5a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b32:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003b36:	69da      	ldr	r2, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b38:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	61da      	str	r2, [r3, #28]
 8003b40:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b42:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	9300      	str	r3, [sp, #0]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b4a:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b4c:	9b00      	ldr	r3, [sp, #0]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b4e:	f7fd fe1d 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b52:	201c      	movs	r0, #28
 8003b54:	f7fd fe4e 	bl	80017f4 <HAL_NVIC_EnableIRQ>
 8003b58:	e00c      	b.n	8003b74 <HAL_TIM_Base_MspInit+0x4c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_TIM_Base_MspInit+0x54>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_TIM_Base_MspInit+0x58>)
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	f042 0202 	orr.w	r2, r2, #2
 8003b68:	61da      	str	r2, [r3, #28]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b74:	b003      	add	sp, #12
 8003b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b7a:	bf00      	nop
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8003b86:	6802      	ldr	r2, [r0, #0]
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_TIM_MspPostInit+0x30>)
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d110      	bne.n	8003bb0 <HAL_TIM_MspPostInit+0x2c>
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = StarterPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2402      	movs	r4, #2
 8003b90:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);
 8003b92:	4669      	mov	r1, sp
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <HAL_TIM_MspPostInit+0x34>)
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = StarterPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	f7fe f8ba 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = InjectorPWM_Pin|CoolerPWM_Pin;
 8003ba0:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba2:	4669      	mov	r1, sp
 8003ba4:	4805      	ldr	r0, [pc, #20]	; (8003bbc <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = InjectorPWM_Pin|CoolerPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bac:	f7fe f8b2 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd10      	pop	{r4, pc}
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40010800 	.word	0x40010800
 8003bbc:	40010c00 	.word	0x40010c00

08003bc0 <NMI_Handler>:
 8003bc0:	4770      	bx	lr

08003bc2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003bc2:	e7fe      	b.n	8003bc2 <HardFault_Handler>

08003bc4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003bc4:	e7fe      	b.n	8003bc4 <MemManage_Handler>

08003bc6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003bc6:	e7fe      	b.n	8003bc6 <BusFault_Handler>

08003bc8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003bc8:	e7fe      	b.n	8003bc8 <UsageFault_Handler>

08003bca <SVC_Handler>:
 8003bca:	4770      	bx	lr

08003bcc <DebugMon_Handler>:
 8003bcc:	4770      	bx	lr

08003bce <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003bce:	4770      	bx	lr

08003bd0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003bd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bd2:	f7fd fb33 	bl	800123c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8003bda:	f7fd be3a 	b.w	8001852 <HAL_SYSTICK_IRQHandler>
	...

08003be0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003be0:	4801      	ldr	r0, [pc, #4]	; (8003be8 <DMA1_Channel1_IRQHandler+0x8>)
 8003be2:	f7fd be8d 	b.w	8001900 <HAL_DMA_IRQHandler>
 8003be6:	bf00      	nop
 8003be8:	2000010c 	.word	0x2000010c

08003bec <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bec:	4801      	ldr	r0, [pc, #4]	; (8003bf4 <TIM2_IRQHandler+0x8>)
 8003bee:	f7fe bfd2 	b.w	8002b96 <HAL_TIM_IRQHandler>
 8003bf2:	bf00      	nop
 8003bf4:	20000154 	.word	0x20000154

08003bf8 <_init>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr

08003c04 <_fini>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr
