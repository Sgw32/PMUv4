
D:\Work\Aeroxo\SES\PMUv4\Debug\PMUv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004764  08004764  00014764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080047a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b4  2000000c  080047ac  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003c0  080047ac  000203c0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015bd6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a67  00000000  00000000  00035c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000073dc  00000000  00000000  00038672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000960  00000000  00000000  0003fa50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f18  00000000  00000000  000403b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000630f  00000000  00000000  000412c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003bc7  00000000  00000000  000475d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b19e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ec0  00000000  00000000  0004b21c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800474c 	.word	0x0800474c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	0800474c 	.word	0x0800474c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	; 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	d1ed      	bne.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dda:	2afd      	cmp	r2, #253	; 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	; 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	; 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	; 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__gesf2>:
 8001028:	f04f 3cff 	mov.w	ip, #4294967295
 800102c:	e006      	b.n	800103c <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__lesf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	e002      	b.n	800103c <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__cmpsf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001040:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	bf18      	it	ne
 800104e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001052:	d011      	beq.n	8001078 <__cmpsf2+0x40>
 8001054:	b001      	add	sp, #4
 8001056:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800105a:	bf18      	it	ne
 800105c:	ea90 0f01 	teqne	r0, r1
 8001060:	bf58      	it	pl
 8001062:	ebb2 0003 	subspl.w	r0, r2, r3
 8001066:	bf88      	it	hi
 8001068:	17c8      	asrhi	r0, r1, #31
 800106a:	bf38      	it	cc
 800106c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001070:	bf18      	it	ne
 8001072:	f040 0001 	orrne.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__cmpsf2+0x4c>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d105      	bne.n	8001090 <__cmpsf2+0x58>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d1e4      	bne.n	8001054 <__cmpsf2+0x1c>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d0e1      	beq.n	8001054 <__cmpsf2+0x1c>
 8001090:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_cfrcmple>:
 8001098:	4684      	mov	ip, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4661      	mov	r1, ip
 800109e:	e7ff      	b.n	80010a0 <__aeabi_cfcmpeq>

080010a0 <__aeabi_cfcmpeq>:
 80010a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010a2:	f7ff ffc9 	bl	8001038 <__cmpsf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	bf48      	it	mi
 80010aa:	f110 0f00 	cmnmi.w	r0, #0
 80010ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b0 <__aeabi_fcmpeq>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff fff4 	bl	80010a0 <__aeabi_cfcmpeq>
 80010b8:	bf0c      	ite	eq
 80010ba:	2001      	moveq	r0, #1
 80010bc:	2000      	movne	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmplt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffea 	bl	80010a0 <__aeabi_cfcmpeq>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmple>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffe0 	bl	80010a0 <__aeabi_cfcmpeq>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpge>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffd2 	bl	8001098 <__aeabi_cfrcmple>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpgt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffc8 	bl	8001098 <__aeabi_cfrcmple>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_f2uiz>:
 8001114:	0042      	lsls	r2, r0, #1
 8001116:	d20e      	bcs.n	8001136 <__aeabi_f2uiz+0x22>
 8001118:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800111c:	d30b      	bcc.n	8001136 <__aeabi_f2uiz+0x22>
 800111e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001122:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001126:	d409      	bmi.n	800113c <__aeabi_f2uiz+0x28>
 8001128:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800112c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2uiz+0x32>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d102      	bne.n	800114c <__aeabi_f2uiz+0x38>
 8001146:	f04f 30ff 	mov.w	r0, #4294967295
 800114a:	4770      	bx	lr
 800114c:	f04f 0000 	mov.w	r0, #0
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b510      	push	{r4, lr}
 8001156:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001158:	f001 fabe 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	fbb0 f0f3 	udiv	r0, r0, r3
 8001164:	f000 fb00 	bl	8001768 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001168:	2200      	movs	r2, #0
 800116a:	4621      	mov	r1, r4
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 faba 	bl	80016e8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001174:	2000      	movs	r0, #0
 8001176:	bd10      	pop	{r4, pc}

08001178 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x20>)
{
 800117a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	f000 fa9d 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff ffe2 	bl	8001154 <HAL_InitTick>
  HAL_MspInit();
 8001190:	f003 f91a 	bl	80043c8 <HAL_MspInit>
}
 8001194:	2000      	movs	r0, #0
 8001196:	bd08      	pop	{r3, pc}
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800119c:	4a02      	ldr	r2, [pc, #8]	; (80011a8 <HAL_IncTick+0xc>)
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000028 	.word	0x20000028

080011ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011ac:	4b01      	ldr	r3, [pc, #4]	; (80011b4 <HAL_GetTick+0x8>)
 80011ae:	6818      	ldr	r0, [r3, #0]
}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000028 	.word	0x20000028

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011b8:	b513      	push	{r0, r1, r4, lr}
 80011ba:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80011bc:	f7ff fff6 	bl	80011ac <HAL_GetTick>
 80011c0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80011c2:	f7ff fff3 	bl	80011ac <HAL_GetTick>
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	1b00      	subs	r0, r0, r4
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d3f9      	bcc.n	80011c2 <HAL_Delay+0xa>
  {
  }
}
 80011ce:	b002      	add	sp, #8
 80011d0:	bd10      	pop	{r4, pc}

080011d2 <HAL_ADC_ConvCpltCallback>:
 80011d2:	4770      	bx	lr

080011d4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80011d6:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80011d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011da:	f012 0f50 	tst.w	r2, #80	; 0x50
 80011de:	d11b      	bne.n	8001218 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	6892      	ldr	r2, [r2, #8]
 80011ec:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80011f0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80011f4:	d10c      	bne.n	8001210 <ADC_DMAConvCplt+0x3c>
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	b952      	cbnz	r2, 8001210 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001204:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001206:	bf5e      	ittt	pl
 8001208:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800120a:	f042 0201 	orrpl.w	r2, r2, #1
 800120e:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffde 	bl	80011d2 <HAL_ADC_ConvCpltCallback>
 8001216:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001218:	6a1b      	ldr	r3, [r3, #32]
  }
}
 800121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4718      	bx	r3

08001222 <HAL_ADC_ConvHalfCpltCallback>:
 8001222:	4770      	bx	lr

08001224 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001224:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001226:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001228:	f7ff fffb 	bl	8001222 <HAL_ADC_ConvHalfCpltCallback>
 800122c:	bd08      	pop	{r3, pc}

0800122e <HAL_ADC_ErrorCallback>:
{
 800122e:	4770      	bx	lr

08001230 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001230:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001232:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001234:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800123c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001244:	f7ff fff3 	bl	800122e <HAL_ADC_ErrorCallback>
 8001248:	bd08      	pop	{r3, pc}
	...

0800124c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800124c:	2300      	movs	r3, #0
{ 
 800124e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8001250:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001252:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001256:	2b01      	cmp	r3, #1
 8001258:	f000 80af 	beq.w	80013ba <HAL_ADC_ConfigChannel+0x16e>
 800125c:	2301      	movs	r3, #1
 800125e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7)
 8001262:	684b      	ldr	r3, [r1, #4]
 8001264:	6804      	ldr	r4, [r0, #0]
 8001266:	2b06      	cmp	r3, #6
 8001268:	680d      	ldr	r5, [r1, #0]
 800126a:	d83f      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800126c:	6b66      	ldr	r6, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8001272:	fa92 f7a2 	rbit	r7, r2
 8001276:	fab7 f787 	clz	r7, r7
 800127a:	3b01      	subs	r3, #1
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	f04f 0e1f 	mov.w	lr, #31
 8001288:	435f      	muls	r7, r3
 800128a:	4353      	muls	r3, r2
 800128c:	fa0e f707 	lsl.w	r7, lr, r7
 8001290:	ea26 0607 	bic.w	r6, r6, r7
 8001294:	fa05 f303 	lsl.w	r3, r5, r3
 8001298:	4333      	orrs	r3, r6
 800129a:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800129c:	2d09      	cmp	r5, #9
 800129e:	f04f 0338 	mov.w	r3, #56	; 0x38
 80012a2:	688f      	ldr	r7, [r1, #8]
 80012a4:	d954      	bls.n	8001350 <HAL_ADC_ConfigChannel+0x104>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012a6:	68e6      	ldr	r6, [r4, #12]
 80012a8:	fa93 fea3 	rbit	lr, r3
 80012ac:	fabe fe8e 	clz	lr, lr
 80012b0:	f1a5 010a 	sub.w	r1, r5, #10
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	fab3 f283 	clz	r2, r3
 80012bc:	fb01 f30e 	mul.w	r3, r1, lr
 80012c0:	f04f 0e07 	mov.w	lr, #7
 80012c4:	434a      	muls	r2, r1
 80012c6:	fa0e f303 	lsl.w	r3, lr, r3
 80012ca:	ea26 0303 	bic.w	r3, r6, r3
 80012ce:	fa07 f202 	lsl.w	r2, r7, r2
 80012d2:	431a      	orrs	r2, r3
 80012d4:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012d6:	f1a5 0310 	sub.w	r3, r5, #16
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d94d      	bls.n	800137a <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012de:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	b003      	add	sp, #12
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (sConfig->Rank < 13)
 80012ec:	2b0c      	cmp	r3, #12
 80012ee:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80012f2:	d816      	bhi.n	8001322 <HAL_ADC_ConfigChannel+0xd6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012f4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80012f6:	fa92 f7a2 	rbit	r7, r2
 80012fa:	fab7 f787 	clz	r7, r7
 80012fe:	3b07      	subs	r3, #7
 8001300:	fa92 f2a2 	rbit	r2, r2
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	f04f 0e1f 	mov.w	lr, #31
 800130c:	435f      	muls	r7, r3
 800130e:	435a      	muls	r2, r3
 8001310:	fa0e f707 	lsl.w	r7, lr, r7
 8001314:	ea26 0607 	bic.w	r6, r6, r7
 8001318:	fa05 f202 	lsl.w	r2, r5, r2
 800131c:	4332      	orrs	r2, r6
 800131e:	6322      	str	r2, [r4, #48]	; 0x30
 8001320:	e7bc      	b.n	800129c <HAL_ADC_ConfigChannel+0x50>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001324:	fa92 f7a2 	rbit	r7, r2
 8001328:	fab7 f787 	clz	r7, r7
 800132c:	3b0d      	subs	r3, #13
 800132e:	fa92 f2a2 	rbit	r2, r2
 8001332:	fab2 f282 	clz	r2, r2
 8001336:	f04f 0e1f 	mov.w	lr, #31
 800133a:	435f      	muls	r7, r3
 800133c:	4353      	muls	r3, r2
 800133e:	fa0e f707 	lsl.w	r7, lr, r7
 8001342:	ea26 0607 	bic.w	r6, r6, r7
 8001346:	fa05 f303 	lsl.w	r3, r5, r3
 800134a:	4333      	orrs	r3, r6
 800134c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800134e:	e7a5      	b.n	800129c <HAL_ADC_ConfigChannel+0x50>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001350:	6926      	ldr	r6, [r4, #16]
 8001352:	fa93 f2a3 	rbit	r2, r3
 8001356:	fab2 f282 	clz	r2, r2
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	2107      	movs	r1, #7
 8001364:	436a      	muls	r2, r5
 8001366:	436b      	muls	r3, r5
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	ea26 0602 	bic.w	r6, r6, r2
 8001370:	fa07 f303 	lsl.w	r3, r7, r3
 8001374:	4333      	orrs	r3, r6
 8001376:	6123      	str	r3, [r4, #16]
 8001378:	e7ad      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x8a>
    if (hadc->Instance == ADC1)
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_ADC_ConfigChannel+0x174>)
 800137c:	429c      	cmp	r4, r3
 800137e:	d116      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x162>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001380:	68a3      	ldr	r3, [r4, #8]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	d4ab      	bmi.n	80012de <HAL_ADC_ConfigChannel+0x92>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001386:	68a3      	ldr	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001388:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800138a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800138e:	60a3      	str	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001390:	d1a5      	bne.n	80012de <HAL_ADC_ConfigChannel+0x92>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_ADC_ConfigChannel+0x178>)
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_ADC_ConfigChannel+0x17c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fbb3 f2f2 	udiv	r2, r3, r2
 800139c:	230a      	movs	r3, #10
 800139e:	4353      	muls	r3, r2
            wait_loop_index--;
 80013a0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80013a2:	9b01      	ldr	r3, [sp, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d09a      	beq.n	80012de <HAL_ADC_ConfigChannel+0x92>
            wait_loop_index--;
 80013a8:	9b01      	ldr	r3, [sp, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	e7f8      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x154>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013b0:	f043 0320 	orr.w	r3, r3, #32
 80013b4:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e792      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 80013ba:	2302      	movs	r3, #2
 80013bc:	e793      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x9a>
 80013be:	bf00      	nop
 80013c0:	40012400 	.word	0x40012400
 80013c4:	20000008 	.word	0x20000008
 80013c8:	000f4240 	.word	0x000f4240

080013cc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 80013cc:	2300      	movs	r3, #0
{
 80013ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80013d0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013d2:	6803      	ldr	r3, [r0, #0]
{
 80013d4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	07d2      	lsls	r2, r2, #31
 80013da:	d502      	bpl.n	80013e2 <ADC_Enable+0x16>
  return HAL_OK;
 80013dc:	2000      	movs	r0, #0
}
 80013de:	b002      	add	sp, #8
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	f042 0201 	orr.w	r2, r2, #1
 80013e8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <ADC_Enable+0x68>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <ADC_Enable+0x6c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80013f4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80013f6:	9b01      	ldr	r3, [sp, #4]
 80013f8:	b9c3      	cbnz	r3, 800142c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80013fa:	f7ff fed7 	bl	80011ac <HAL_GetTick>
 80013fe:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	689d      	ldr	r5, [r3, #8]
 8001404:	f015 0501 	ands.w	r5, r5, #1
 8001408:	d1e8      	bne.n	80013dc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800140a:	f7ff fecf 	bl	80011ac <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f5      	bls.n	8001400 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001416:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001422:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800142a:	e7d8      	b.n	80013de <ADC_Enable+0x12>
      wait_loop_index--;
 800142c:	9b01      	ldr	r3, [sp, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	e7e0      	b.n	80013f4 <ADC_Enable+0x28>
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	000f4240 	.word	0x000f4240

0800143c <HAL_ADC_Start_DMA>:
{
 800143c:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8001440:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <HAL_ADC_Start_DMA+0x108>)
 8001444:	6802      	ldr	r2, [r0, #0]
{
 8001446:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001448:	429a      	cmp	r2, r3
{
 800144a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800144c:	d002      	beq.n	8001454 <HAL_ADC_Start_DMA+0x18>
 800144e:	493e      	ldr	r1, [pc, #248]	; (8001548 <HAL_ADC_Start_DMA+0x10c>)
 8001450:	428a      	cmp	r2, r1
 8001452:	d103      	bne.n	800145c <HAL_ADC_Start_DMA+0x20>
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800145a:	d16e      	bne.n	800153a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 800145c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001460:	2b01      	cmp	r3, #1
 8001462:	d06c      	beq.n	800153e <HAL_ADC_Start_DMA+0x102>
 8001464:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001466:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001468:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800146c:	f7ff ffae 	bl	80013cc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001470:	4606      	mov	r6, r0
 8001472:	2800      	cmp	r0, #0
 8001474:	d15d      	bne.n	8001532 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001478:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800147a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800147e:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001480:	f020 0001 	bic.w	r0, r0, #1
 8001484:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001488:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800148a:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800148c:	d104      	bne.n	8001498 <HAL_ADC_Start_DMA+0x5c>
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_ADC_Start_DMA+0x108>)
 8001490:	6853      	ldr	r3, [r2, #4]
 8001492:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001496:	d13e      	bne.n	8001516 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001498:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800149a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800149e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a0:	684b      	ldr	r3, [r1, #4]
 80014a2:	055a      	lsls	r2, r3, #21
 80014a4:	d505      	bpl.n	80014b2 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014b4:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ba:	bf18      	it	ne
 80014bc:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014be:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014c0:	bf18      	it	ne
 80014c2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80014c8:	2300      	movs	r3, #0
 80014ca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d0:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014d2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_ADC_Start_DMA+0x114>)
 80014d6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_ADC_Start_DMA+0x118>)
 80014da:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014dc:	f06f 0302 	mvn.w	r3, #2
 80014e0:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014e4:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014f0:	4643      	mov	r3, r8
 80014f2:	f000 f985 	bl	8001800 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80014fe:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	bf0c      	ite	eq
 8001506:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800150a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800150e:	609a      	str	r2, [r3, #8]
}
 8001510:	4630      	mov	r0, r6
 8001512:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001516:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800151e:	6853      	ldr	r3, [r2, #4]
 8001520:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001522:	bf41      	itttt	mi
 8001524:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001526:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800152a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800152e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001530:	e7bf      	b.n	80014b2 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001532:	2300      	movs	r3, #0
 8001534:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001538:	e7ea      	b.n	8001510 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800153a:	2601      	movs	r6, #1
 800153c:	e7e8      	b.n	8001510 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800153e:	2602      	movs	r6, #2
 8001540:	e7e6      	b.n	8001510 <HAL_ADC_Start_DMA+0xd4>
 8001542:	bf00      	nop
 8001544:	40012400 	.word	0x40012400
 8001548:	40012800 	.word	0x40012800
 800154c:	080011d5 	.word	0x080011d5
 8001550:	08001225 	.word	0x08001225
 8001554:	08001231 	.word	0x08001231

08001558 <ADC_ConversionStop_Disable>:
{
 8001558:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800155a:	6803      	ldr	r3, [r0, #0]
{
 800155c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	07d2      	lsls	r2, r2, #31
 8001562:	d401      	bmi.n	8001568 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001564:	2000      	movs	r0, #0
 8001566:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001570:	f7ff fe1c 	bl	80011ac <HAL_GetTick>
 8001574:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	07db      	lsls	r3, r3, #31
 800157c:	d5f2      	bpl.n	8001564 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800157e:	f7ff fe15 	bl	80011ac <HAL_GetTick>
 8001582:	1b40      	subs	r0, r0, r5
 8001584:	2802      	cmp	r0, #2
 8001586:	d9f6      	bls.n	8001576 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001588:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800159a:	bd38      	pop	{r3, r4, r5, pc}

0800159c <HAL_ADC_Init>:
{
 800159c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800159e:	4604      	mov	r4, r0
 80015a0:	2800      	cmp	r0, #0
 80015a2:	f000 8085 	beq.w	80016b0 <HAL_ADC_Init+0x114>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015a8:	b923      	cbnz	r3, 80015b4 <HAL_ADC_Init+0x18>
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80015ac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80015b0:	f002 ff50 	bl	8004454 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ffcf 	bl	8001558 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015bc:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015c2:	d177      	bne.n	80016b4 <HAL_ADC_Init+0x118>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d175      	bne.n	80016b4 <HAL_ADC_Init+0x118>
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015cc:	f023 0302 	bic.w	r3, r3, #2
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80015d6:	68e6      	ldr	r6, [r4, #12]
 80015d8:	2302      	movs	r3, #2
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	fab3 f383 	clz	r3, r3
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80015e2:	6862      	ldr	r2, [r4, #4]
 80015e4:	69e1      	ldr	r1, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015e6:	68a5      	ldr	r5, [r4, #8]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80015e8:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80015ea:	fa06 f303 	lsl.w	r3, r6, r3
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015ee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80015f2:	ea42 0203 	orr.w	r2, r2, r3
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015f6:	d044      	beq.n	8001682 <HAL_ADC_Init+0xe6>
 80015f8:	2d01      	cmp	r5, #1
 80015fa:	bf14      	ite	ne
 80015fc:	4601      	movne	r1, r0
 80015fe:	f44f 7180 	moveq.w	r1, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001602:	6963      	ldr	r3, [r4, #20]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10d      	bne.n	8001624 <HAL_ADC_Init+0x88>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001608:	2e00      	cmp	r6, #0
 800160a:	d13c      	bne.n	8001686 <HAL_ADC_Init+0xea>
 800160c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001610:	fa93 f3a3 	rbit	r3, r3
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001614:	fab3 f683 	clz	r6, r3
 8001618:	69a3      	ldr	r3, [r4, #24]
 800161a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800161e:	3b01      	subs	r3, #1
 8001620:	40b3      	lsls	r3, r6
 8001622:	4319      	orrs	r1, r3
      MODIFY_REG(hadc->Instance->CR1,
 8001624:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001626:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800162a:	685e      	ldr	r6, [r3, #4]
 800162c:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001630:	ea41 0106 	orr.w	r1, r1, r6
 8001634:	6059      	str	r1, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001636:	689e      	ldr	r6, [r3, #8]
 8001638:	4920      	ldr	r1, [pc, #128]	; (80016bc <HAL_ADC_Init+0x120>)
 800163a:	ea01 0106 	and.w	r1, r1, r6
 800163e:	ea41 0102 	orr.w	r1, r1, r2
 8001642:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001644:	d001      	beq.n	800164a <HAL_ADC_Init+0xae>
 8001646:	2d01      	cmp	r5, #1
 8001648:	d126      	bne.n	8001698 <HAL_ADC_Init+0xfc>
 800164a:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800164e:	fa91 f1a1 	rbit	r1, r1
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001652:	fab1 f581 	clz	r5, r1
 8001656:	6921      	ldr	r1, [r4, #16]
 8001658:	3901      	subs	r1, #1
 800165a:	40a9      	lsls	r1, r5
    MODIFY_REG(hadc->Instance->SQR1,
 800165c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800165e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001662:	4329      	orrs	r1, r5
 8001664:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001666:	6899      	ldr	r1, [r3, #8]
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_ADC_Init+0x124>)
 800166a:	400b      	ands	r3, r1
 800166c:	429a      	cmp	r2, r3
 800166e:	d115      	bne.n	800169c <HAL_ADC_Init+0x100>
      ADC_CLEAR_ERRORCODE(hadc);
 8001670:	2300      	movs	r3, #0
 8001672:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001674:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001680:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001682:	4629      	mov	r1, r5
 8001684:	e7bd      	b.n	8001602 <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001696:	e7c5      	b.n	8001624 <HAL_ADC_Init+0x88>
  uint32_t tmp_sqr1 = 0;
 8001698:	2100      	movs	r1, #0
 800169a:	e7df      	b.n	800165c <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 800169c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800169e:	f023 0312 	bic.w	r3, r3, #18
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
}
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80016ba:	e7f9      	b.n	80016b0 <HAL_ADC_Init+0x114>
 80016bc:	ffe1f7fd 	.word	0xffe1f7fd
 80016c0:	ff1f0efe 	.word	0xff1f0efe

080016c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016c6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016e0:	60d3      	str	r3, [r2, #12]
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ea:	b530      	push	{r4, r5, lr}
 80016ec:	68dc      	ldr	r4, [r3, #12]
 80016ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	bf28      	it	cs
 80016fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001704:	bf98      	it	ls
 8001706:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	fa05 f303 	lsl.w	r3, r5, r3
 800170c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001710:	bf88      	it	hi
 8001712:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4019      	ands	r1, r3
 8001716:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	fa05 f404 	lsl.w	r4, r5, r4
 800171c:	3c01      	subs	r4, #1
 800171e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001720:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001722:	ea42 0201 	orr.w	r2, r2, r1
 8001726:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	bfaf      	iteee	ge
 800172c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	4b06      	ldrlt	r3, [pc, #24]	; (800174c <HAL_NVIC_SetPriority+0x64>)
 8001732:	f000 000f 	andlt.w	r0, r0, #15
 8001736:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	bfa5      	ittet	ge
 800173a:	b2d2      	uxtbge	r2, r2
 800173c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001746:	bd30      	pop	{r4, r5, pc}
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	e000ed14 	.word	0xe000ed14

08001750 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001750:	2301      	movs	r3, #1
 8001752:	0942      	lsrs	r2, r0, #5
 8001754:	f000 001f 	and.w	r0, r0, #31
 8001758:	fa03 f000 	lsl.w	r0, r3, r0
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <HAL_NVIC_EnableIRQ+0x14>)
 800175e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100

08001768 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	3801      	subs	r0, #1
 800176a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800176e:	d20a      	bcs.n	8001786 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001796:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	bf0c      	ite	eq
 800179c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017a0:	f022 0204 	bicne.w	r2, r2, #4
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	4770      	bx	lr
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017ac:	4770      	bx	lr

080017ae <HAL_SYSTICK_IRQHandler>:
{
 80017ae:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80017b0:	f7ff fffc 	bl	80017ac <HAL_SYSTICK_Callback>
 80017b4:	bd08      	pop	{r3, pc}

080017b6 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017b6:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017b8:	b300      	cbz	r0, 80017fc <HAL_DMA_Init+0x46>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80017ba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80017be:	b90b      	cbnz	r3, 80017c4 <HAL_DMA_Init+0xe>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80017c0:	f880 3020 	strb.w	r3, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017c4:	6884      	ldr	r4, [r0, #8]
 80017c6:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80017c8:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80017ca:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017cc:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80017ce:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	4323      	orrs	r3, r4
 80017d2:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017d4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017dc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	4323      	orrs	r3, r4
 80017e2:	6984      	ldr	r4, [r0, #24]
 80017e4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e6:	69c4      	ldr	r4, [r0, #28]
 80017e8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80017ea:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017ec:	600b      	str	r3, [r1, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017ee:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f0:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80017f2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f6:	6343      	str	r3, [r0, #52]	; 0x34
  
  return HAL_OK;
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017fc:	2001      	movs	r0, #1
}
 80017fe:	bd10      	pop	{r4, pc}

08001800 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8001802:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001806:	2c01      	cmp	r4, #1
 8001808:	f04f 0402 	mov.w	r4, #2
 800180c:	d023      	beq.n	8001856 <HAL_DMA_Start_IT+0x56>
 800180e:	2501      	movs	r5, #1

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001810:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001814:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);
 8001816:	f880 5020 	strb.w	r5, [r0, #32]
  __HAL_DMA_DISABLE(hdma);
 800181a:	6825      	ldr	r5, [r4, #0]
 800181c:	f025 0501 	bic.w	r5, r5, #1
 8001820:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001822:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001824:	6843      	ldr	r3, [r0, #4]
  return HAL_OK;
 8001826:	2000      	movs	r0, #0
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001828:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800182a:	bf0b      	itete	eq
 800182c:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800182e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001830:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001832:	60e2      	strne	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001854:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 8001856:	4620      	mov	r0, r4
} 
 8001858:	bd30      	pop	{r4, r5, pc}
	...

0800185c <HAL_DMA_IRQHandler>:
{
 800185c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	4dc3      	ldr	r5, [pc, #780]	; (8001b70 <HAL_DMA_IRQHandler+0x314>)
{
 8001862:	4604      	mov	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001864:	42ab      	cmp	r3, r5
 8001866:	f240 80e3 	bls.w	8001a30 <HAL_DMA_IRQHandler+0x1d4>
 800186a:	4ac2      	ldr	r2, [pc, #776]	; (8001b74 <HAL_DMA_IRQHandler+0x318>)
 800186c:	6811      	ldr	r1, [r2, #0]
 800186e:	3208      	adds	r2, #8
 8001870:	4293      	cmp	r3, r2
 8001872:	f000 80d6 	beq.w	8001a22 <HAL_DMA_IRQHandler+0x1c6>
 8001876:	3214      	adds	r2, #20
 8001878:	4293      	cmp	r3, r2
 800187a:	f000 80d4 	beq.w	8001a26 <HAL_DMA_IRQHandler+0x1ca>
 800187e:	3214      	adds	r2, #20
 8001880:	4293      	cmp	r3, r2
 8001882:	f000 80d2 	beq.w	8001a2a <HAL_DMA_IRQHandler+0x1ce>
 8001886:	3214      	adds	r2, #20
 8001888:	4293      	cmp	r3, r2
 800188a:	bf14      	ite	ne
 800188c:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 8001890:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 8001894:	420a      	tst	r2, r1
 8001896:	d030      	beq.n	80018fa <HAL_DMA_IRQHandler+0x9e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	0712      	lsls	r2, r2, #28
 800189c:	d529      	bpl.n	80018f2 <HAL_DMA_IRQHandler+0x96>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800189e:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80018a0:	42ab      	cmp	r3, r5
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80018a8:	f240 813b 	bls.w	8001b22 <HAL_DMA_IRQHandler+0x2c6>
 80018ac:	4ab2      	ldr	r2, [pc, #712]	; (8001b78 <HAL_DMA_IRQHandler+0x31c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	f000 8130 	beq.w	8001b14 <HAL_DMA_IRQHandler+0x2b8>
 80018b4:	3214      	adds	r2, #20
 80018b6:	4293      	cmp	r3, r2
 80018b8:	f000 812e 	beq.w	8001b18 <HAL_DMA_IRQHandler+0x2bc>
 80018bc:	3214      	adds	r2, #20
 80018be:	4293      	cmp	r3, r2
 80018c0:	f000 812c 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2c0>
 80018c4:	3214      	adds	r2, #20
 80018c6:	4293      	cmp	r3, r2
 80018c8:	bf0c      	ite	eq
 80018ca:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 80018ce:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 80018d2:	4aa8      	ldr	r2, [pc, #672]	; (8001b74 <HAL_DMA_IRQHandler+0x318>)
 80018d4:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80018d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;
 80018de:	2304      	movs	r3, #4
 80018e0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      __HAL_UNLOCK(hdma); 
 80018e4:	2300      	movs	r3, #0
 80018e6:	f884 3020 	strb.w	r3, [r4, #32]
      if (hdma->XferErrorCallback != NULL)
 80018ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018ec:	b10b      	cbz	r3, 80018f2 <HAL_DMA_IRQHandler+0x96>
        hdma->XferErrorCallback(hdma);
 80018ee:	4620      	mov	r0, r4
 80018f0:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	42ab      	cmp	r3, r5
 80018f6:	f240 80b8 	bls.w	8001a6a <HAL_DMA_IRQHandler+0x20e>
 80018fa:	4a9e      	ldr	r2, [pc, #632]	; (8001b74 <HAL_DMA_IRQHandler+0x318>)
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	3208      	adds	r2, #8
 8001900:	4293      	cmp	r3, r2
 8001902:	f000 8142 	beq.w	8001b8a <HAL_DMA_IRQHandler+0x32e>
 8001906:	3214      	adds	r2, #20
 8001908:	4293      	cmp	r3, r2
 800190a:	f000 8140 	beq.w	8001b8e <HAL_DMA_IRQHandler+0x332>
 800190e:	3214      	adds	r2, #20
 8001910:	4293      	cmp	r3, r2
 8001912:	f000 813e 	beq.w	8001b92 <HAL_DMA_IRQHandler+0x336>
 8001916:	3214      	adds	r2, #20
 8001918:	4293      	cmp	r3, r2
 800191a:	bf14      	ite	ne
 800191c:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 8001920:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
 8001924:	420a      	tst	r2, r1
 8001926:	f000 81b9 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x440>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	0756      	lsls	r6, r2, #29
 800192e:	d525      	bpl.n	800197c <HAL_DMA_IRQHandler+0x120>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	0690      	lsls	r0, r2, #26
 8001934:	d403      	bmi.n	800193e <HAL_DMA_IRQHandler+0xe2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f022 0204 	bic.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800193e:	42ab      	cmp	r3, r5
 8001940:	f240 8141 	bls.w	8001bc6 <HAL_DMA_IRQHandler+0x36a>
 8001944:	4a8c      	ldr	r2, [pc, #560]	; (8001b78 <HAL_DMA_IRQHandler+0x31c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	f000 8136 	beq.w	8001bb8 <HAL_DMA_IRQHandler+0x35c>
 800194c:	3214      	adds	r2, #20
 800194e:	4293      	cmp	r3, r2
 8001950:	f000 8134 	beq.w	8001bbc <HAL_DMA_IRQHandler+0x360>
 8001954:	3214      	adds	r2, #20
 8001956:	4293      	cmp	r3, r2
 8001958:	f000 8132 	beq.w	8001bc0 <HAL_DMA_IRQHandler+0x364>
 800195c:	3214      	adds	r2, #20
 800195e:	4293      	cmp	r3, r2
 8001960:	bf14      	ite	ne
 8001962:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001966:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800196a:	4a82      	ldr	r2, [pc, #520]	; (8001b74 <HAL_DMA_IRQHandler+0x318>)
 800196c:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800196e:	2311      	movs	r3, #17
 8001970:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if(hdma->XferHalfCpltCallback != NULL)
 8001974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001976:	b10b      	cbz	r3, 800197c <HAL_DMA_IRQHandler+0x120>
        hdma->XferHalfCpltCallback(hdma);
 8001978:	4620      	mov	r0, r4
 800197a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	42ab      	cmp	r3, r5
 8001980:	f240 8097 	bls.w	8001ab2 <HAL_DMA_IRQHandler+0x256>
 8001984:	4a7b      	ldr	r2, [pc, #492]	; (8001b74 <HAL_DMA_IRQHandler+0x318>)
 8001986:	6811      	ldr	r1, [r2, #0]
 8001988:	3208      	adds	r2, #8
 800198a:	4293      	cmp	r3, r2
 800198c:	f000 8145 	beq.w	8001c1a <HAL_DMA_IRQHandler+0x3be>
 8001990:	3214      	adds	r2, #20
 8001992:	4293      	cmp	r3, r2
 8001994:	f000 8143 	beq.w	8001c1e <HAL_DMA_IRQHandler+0x3c2>
 8001998:	3214      	adds	r2, #20
 800199a:	4293      	cmp	r3, r2
 800199c:	f000 8141 	beq.w	8001c22 <HAL_DMA_IRQHandler+0x3c6>
 80019a0:	3214      	adds	r2, #20
 80019a2:	4293      	cmp	r3, r2
 80019a4:	bf14      	ite	ne
 80019a6:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80019aa:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80019ae:	420a      	tst	r2, r1
 80019b0:	bf14      	ite	ne
 80019b2:	2201      	movne	r2, #1
 80019b4:	2200      	moveq	r2, #0
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	f000 8172 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x444>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	0791      	lsls	r1, r2, #30
 80019c0:	f140 816e 	bpl.w	8001ca0 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	0692      	lsls	r2, r2, #26
 80019c8:	d403      	bmi.n	80019d2 <HAL_DMA_IRQHandler+0x176>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f022 0202 	bic.w	r2, r2, #2
 80019d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019d2:	42ab      	cmp	r3, r5
 80019d4:	f240 8138 	bls.w	8001c48 <HAL_DMA_IRQHandler+0x3ec>
 80019d8:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <HAL_DMA_IRQHandler+0x31c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	f000 812d 	beq.w	8001c3a <HAL_DMA_IRQHandler+0x3de>
 80019e0:	3214      	adds	r2, #20
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f000 812b 	beq.w	8001c3e <HAL_DMA_IRQHandler+0x3e2>
 80019e8:	3214      	adds	r2, #20
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f000 8129 	beq.w	8001c42 <HAL_DMA_IRQHandler+0x3e6>
 80019f0:	3214      	adds	r2, #20
 80019f2:	4293      	cmp	r3, r2
 80019f4:	bf14      	ite	ne
 80019f6:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80019fa:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80019fe:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_DMA_IRQHandler+0x318>)
 8001a00:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8001a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a04:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f884 3020 	strb.w	r3, [r4, #32]
      if(hdma->XferCpltCallback != NULL)
 8001a12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8143 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x444>
        hdma->XferCpltCallback(hdma);
 8001a1a:	4620      	mov	r0, r4
}
 8001a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hdma->XferCpltCallback(hdma);
 8001a20:	4718      	bx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001a22:	2208      	movs	r2, #8
 8001a24:	e736      	b.n	8001894 <HAL_DMA_IRQHandler+0x38>
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	e734      	b.n	8001894 <HAL_DMA_IRQHandler+0x38>
 8001a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2e:	e731      	b.n	8001894 <HAL_DMA_IRQHandler+0x38>
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_DMA_IRQHandler+0x320>)
 8001a32:	6811      	ldr	r1, [r2, #0]
 8001a34:	3208      	adds	r2, #8
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d05c      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x298>
 8001a3a:	3214      	adds	r2, #20
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d05b      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x29c>
 8001a40:	3214      	adds	r2, #20
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d05a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
 8001a46:	3214      	adds	r2, #20
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d05a      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x2a6>
 8001a4c:	3214      	adds	r2, #20
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d05a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x2ac>
 8001a52:	3214      	adds	r2, #20
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d05a      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x2b2>
 8001a58:	42ab      	cmp	r3, r5
 8001a5a:	bf14      	ite	ne
 8001a5c:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 8001a60:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
 8001a64:	420a      	tst	r2, r1
 8001a66:	f47f af17 	bne.w	8001898 <HAL_DMA_IRQHandler+0x3c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001a6a:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_DMA_IRQHandler+0x320>)
 8001a6c:	6811      	ldr	r1, [r2, #0]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f000 8091 	beq.w	8001b98 <HAL_DMA_IRQHandler+0x33c>
 8001a76:	3214      	adds	r2, #20
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f000 808f 	beq.w	8001b9c <HAL_DMA_IRQHandler+0x340>
 8001a7e:	3214      	adds	r2, #20
 8001a80:	4293      	cmp	r3, r2
 8001a82:	f000 808d 	beq.w	8001ba0 <HAL_DMA_IRQHandler+0x344>
 8001a86:	3214      	adds	r2, #20
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	f000 808c 	beq.w	8001ba6 <HAL_DMA_IRQHandler+0x34a>
 8001a8e:	3214      	adds	r2, #20
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f000 808b 	beq.w	8001bac <HAL_DMA_IRQHandler+0x350>
 8001a96:	3214      	adds	r2, #20
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f000 808a 	beq.w	8001bb2 <HAL_DMA_IRQHandler+0x356>
 8001a9e:	42ab      	cmp	r3, r5
 8001aa0:	bf14      	ite	ne
 8001aa2:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 8001aa6:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
 8001aaa:	420a      	tst	r2, r1
 8001aac:	f47f af3d 	bne.w	800192a <HAL_DMA_IRQHandler+0xce>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	4a32      	ldr	r2, [pc, #200]	; (8001b7c <HAL_DMA_IRQHandler+0x320>)
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	f000 80ae 	beq.w	8001c1a <HAL_DMA_IRQHandler+0x3be>
 8001abe:	3214      	adds	r2, #20
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f000 80ac 	beq.w	8001c1e <HAL_DMA_IRQHandler+0x3c2>
 8001ac6:	3214      	adds	r2, #20
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	f000 80aa 	beq.w	8001c22 <HAL_DMA_IRQHandler+0x3c6>
 8001ace:	3214      	adds	r2, #20
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	f000 80a9 	beq.w	8001c28 <HAL_DMA_IRQHandler+0x3cc>
 8001ad6:	3214      	adds	r2, #20
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	f000 80a8 	beq.w	8001c2e <HAL_DMA_IRQHandler+0x3d2>
 8001ade:	3214      	adds	r2, #20
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	f000 80a7 	beq.w	8001c34 <HAL_DMA_IRQHandler+0x3d8>
 8001ae6:	42ab      	cmp	r3, r5
 8001ae8:	bf14      	ite	ne
 8001aea:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001aee:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8001af2:	e75c      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001af4:	2208      	movs	r2, #8
 8001af6:	e7b5      	b.n	8001a64 <HAL_DMA_IRQHandler+0x208>
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	e7b3      	b.n	8001a64 <HAL_DMA_IRQHandler+0x208>
 8001afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b00:	e7b0      	b.n	8001a64 <HAL_DMA_IRQHandler+0x208>
 8001b02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b06:	e7ad      	b.n	8001a64 <HAL_DMA_IRQHandler+0x208>
 8001b08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b0c:	e7aa      	b.n	8001a64 <HAL_DMA_IRQHandler+0x208>
 8001b0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b12:	e7a7      	b.n	8001a64 <HAL_DMA_IRQHandler+0x208>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001b14:	2308      	movs	r3, #8
 8001b16:	e6dc      	b.n	80018d2 <HAL_DMA_IRQHandler+0x76>
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	e6da      	b.n	80018d2 <HAL_DMA_IRQHandler+0x76>
 8001b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b20:	e6d7      	b.n	80018d2 <HAL_DMA_IRQHandler+0x76>
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_DMA_IRQHandler+0x324>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d016      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x2fa>
 8001b28:	3214      	adds	r2, #20
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d015      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x2fe>
 8001b2e:	3214      	adds	r2, #20
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d014      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x302>
 8001b34:	3214      	adds	r2, #20
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d014      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x308>
 8001b3a:	3214      	adds	r2, #20
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d014      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
 8001b40:	3214      	adds	r2, #20
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01e      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x328>
 8001b46:	42ab      	cmp	r3, r5
 8001b48:	bf0c      	ite	eq
 8001b4a:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8001b4e:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_DMA_IRQHandler+0x320>)
 8001b54:	e6be      	b.n	80018d4 <HAL_DMA_IRQHandler+0x78>
 8001b56:	2308      	movs	r3, #8
 8001b58:	e7fb      	b.n	8001b52 <HAL_DMA_IRQHandler+0x2f6>
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	e7f9      	b.n	8001b52 <HAL_DMA_IRQHandler+0x2f6>
 8001b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b62:	e7f6      	b.n	8001b52 <HAL_DMA_IRQHandler+0x2f6>
 8001b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b68:	e7f3      	b.n	8001b52 <HAL_DMA_IRQHandler+0x2f6>
 8001b6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b6e:	e7f0      	b.n	8001b52 <HAL_DMA_IRQHandler+0x2f6>
 8001b70:	40020080 	.word	0x40020080
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020408 	.word	0x40020408
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020008 	.word	0x40020008
 8001b84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b88:	e7e3      	b.n	8001b52 <HAL_DMA_IRQHandler+0x2f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	e6ca      	b.n	8001924 <HAL_DMA_IRQHandler+0xc8>
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	e6c8      	b.n	8001924 <HAL_DMA_IRQHandler+0xc8>
 8001b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b96:	e6c5      	b.n	8001924 <HAL_DMA_IRQHandler+0xc8>
 8001b98:	2204      	movs	r2, #4
 8001b9a:	e786      	b.n	8001aaa <HAL_DMA_IRQHandler+0x24e>
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	e784      	b.n	8001aaa <HAL_DMA_IRQHandler+0x24e>
 8001ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba4:	e781      	b.n	8001aaa <HAL_DMA_IRQHandler+0x24e>
 8001ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001baa:	e77e      	b.n	8001aaa <HAL_DMA_IRQHandler+0x24e>
 8001bac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001bb0:	e77b      	b.n	8001aaa <HAL_DMA_IRQHandler+0x24e>
 8001bb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bb6:	e778      	b.n	8001aaa <HAL_DMA_IRQHandler+0x24e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bb8:	2304      	movs	r3, #4
 8001bba:	e6d6      	b.n	800196a <HAL_DMA_IRQHandler+0x10e>
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	e6d4      	b.n	800196a <HAL_DMA_IRQHandler+0x10e>
 8001bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc4:	e6d1      	b.n	800196a <HAL_DMA_IRQHandler+0x10e>
 8001bc6:	4a37      	ldr	r2, [pc, #220]	; (8001ca4 <HAL_DMA_IRQHandler+0x448>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d016      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x39e>
 8001bcc:	3214      	adds	r2, #20
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d015      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x3a2>
 8001bd2:	3214      	adds	r2, #20
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d014      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x3a6>
 8001bd8:	3214      	adds	r2, #20
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d014      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x3ac>
 8001bde:	3214      	adds	r2, #20
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d014      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x3b2>
 8001be4:	3214      	adds	r2, #20
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d014      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x3b8>
 8001bea:	42ab      	cmp	r3, r5
 8001bec:	bf14      	ite	ne
 8001bee:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001bf2:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <HAL_DMA_IRQHandler+0x44c>)
 8001bf8:	e6b8      	b.n	800196c <HAL_DMA_IRQHandler+0x110>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e7fb      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x39a>
 8001bfe:	2340      	movs	r3, #64	; 0x40
 8001c00:	e7f9      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x39a>
 8001c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c06:	e7f6      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x39a>
 8001c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c0c:	e7f3      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x39a>
 8001c0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c12:	e7f0      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x39a>
 8001c14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c18:	e7ed      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x39a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	e6c7      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
 8001c1e:	2220      	movs	r2, #32
 8001c20:	e6c5      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
 8001c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c26:	e6c2      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
 8001c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2c:	e6bf      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
 8001c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c32:	e6bc      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
 8001c34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c38:	e6b9      	b.n	80019ae <HAL_DMA_IRQHandler+0x152>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e6df      	b.n	80019fe <HAL_DMA_IRQHandler+0x1a2>
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e6dd      	b.n	80019fe <HAL_DMA_IRQHandler+0x1a2>
 8001c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c46:	e6da      	b.n	80019fe <HAL_DMA_IRQHandler+0x1a2>
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_DMA_IRQHandler+0x448>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d016      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x420>
 8001c4e:	3214      	adds	r2, #20
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d015      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x424>
 8001c54:	3214      	adds	r2, #20
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d014      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x428>
 8001c5a:	3214      	adds	r2, #20
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d014      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x42e>
 8001c60:	3214      	adds	r2, #20
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d014      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x434>
 8001c66:	3214      	adds	r2, #20
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d014      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x43a>
 8001c6c:	42ab      	cmp	r3, r5
 8001c6e:	bf14      	ite	ne
 8001c70:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001c74:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_DMA_IRQHandler+0x44c>)
 8001c7a:	e6c1      	b.n	8001a00 <HAL_DMA_IRQHandler+0x1a4>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e7fb      	b.n	8001c78 <HAL_DMA_IRQHandler+0x41c>
 8001c80:	2320      	movs	r3, #32
 8001c82:	e7f9      	b.n	8001c78 <HAL_DMA_IRQHandler+0x41c>
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	e7f6      	b.n	8001c78 <HAL_DMA_IRQHandler+0x41c>
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	e7f3      	b.n	8001c78 <HAL_DMA_IRQHandler+0x41c>
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	e7f0      	b.n	8001c78 <HAL_DMA_IRQHandler+0x41c>
 8001c96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c9a:	e7ed      	b.n	8001c78 <HAL_DMA_IRQHandler+0x41c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	e671      	b.n	8001984 <HAL_DMA_IRQHandler+0x128>
 8001ca0:	bd70      	pop	{r4, r5, r6, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020008 	.word	0x40020008
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8001cb0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cb2:	4616      	mov	r6, r2
 8001cb4:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001e5c <HAL_GPIO_Init+0x1b0>
 8001cba:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001e60 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 8001cbe:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001cc4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001ccc:	45a0      	cmp	r8, r4
 8001cce:	d17f      	bne.n	8001dd0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001cd0:	684d      	ldr	r5, [r1, #4]
 8001cd2:	2d12      	cmp	r5, #18
 8001cd4:	f000 80af 	beq.w	8001e36 <HAL_GPIO_Init+0x18a>
 8001cd8:	f200 8088 	bhi.w	8001dec <HAL_GPIO_Init+0x140>
 8001cdc:	2d02      	cmp	r5, #2
 8001cde:	f000 80a7 	beq.w	8001e30 <HAL_GPIO_Init+0x184>
 8001ce2:	d87c      	bhi.n	8001dde <HAL_GPIO_Init+0x132>
 8001ce4:	2d00      	cmp	r5, #0
 8001ce6:	f000 808e 	beq.w	8001e06 <HAL_GPIO_Init+0x15a>
 8001cea:	2d01      	cmp	r5, #1
 8001cec:	f000 809e 	beq.w	8001e2c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001cf0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf4:	2cff      	cmp	r4, #255	; 0xff
 8001cf6:	bf93      	iteet	ls
 8001cf8:	4682      	movls	sl, r0
 8001cfa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001cfe:	3d08      	subhi	r5, #8
 8001d00:	f8d0 b000 	ldrls.w	fp, [r0]
 8001d04:	bf92      	itee	ls
 8001d06:	00b5      	lslls	r5, r6, #2
 8001d08:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001d0c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001d0e:	fa09 f805 	lsl.w	r8, r9, r5
 8001d12:	ea2b 0808 	bic.w	r8, fp, r8
 8001d16:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d1a:	bf88      	it	hi
 8001d1c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001d20:	ea48 0505 	orr.w	r5, r8, r5
 8001d24:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001d28:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001d2c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001d30:	d04e      	beq.n	8001dd0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d32:	4d47      	ldr	r5, [pc, #284]	; (8001e50 <HAL_GPIO_Init+0x1a4>)
 8001d34:	4f46      	ldr	r7, [pc, #280]	; (8001e50 <HAL_GPIO_Init+0x1a4>)
 8001d36:	69ad      	ldr	r5, [r5, #24]
 8001d38:	f026 0803 	bic.w	r8, r6, #3
 8001d3c:	f045 0501 	orr.w	r5, r5, #1
 8001d40:	61bd      	str	r5, [r7, #24]
 8001d42:	69bd      	ldr	r5, [r7, #24]
 8001d44:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d48:	f005 0501 	and.w	r5, r5, #1
 8001d4c:	9501      	str	r5, [sp, #4]
 8001d4e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d52:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d56:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d58:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8001d5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d60:	fa09 f90b 	lsl.w	r9, r9, fp
 8001d64:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d68:	4d3a      	ldr	r5, [pc, #232]	; (8001e54 <HAL_GPIO_Init+0x1a8>)
 8001d6a:	42a8      	cmp	r0, r5
 8001d6c:	d068      	beq.n	8001e40 <HAL_GPIO_Init+0x194>
 8001d6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d72:	42a8      	cmp	r0, r5
 8001d74:	d066      	beq.n	8001e44 <HAL_GPIO_Init+0x198>
 8001d76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d7a:	42a8      	cmp	r0, r5
 8001d7c:	d064      	beq.n	8001e48 <HAL_GPIO_Init+0x19c>
 8001d7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	bf0c      	ite	eq
 8001d86:	2503      	moveq	r5, #3
 8001d88:	2504      	movne	r5, #4
 8001d8a:	fa05 f50b 	lsl.w	r5, r5, fp
 8001d8e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 8001d92:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001d96:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d98:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8001d9c:	bf14      	ite	ne
 8001d9e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001da0:	43a5      	biceq	r5, r4
 8001da2:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001da4:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8001daa:	bf14      	ite	ne
 8001dac:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001dae:	43a5      	biceq	r5, r4
 8001db0:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001db2:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001db8:	bf14      	ite	ne
 8001dba:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001dbc:	43a5      	biceq	r5, r4
 8001dbe:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001dc0:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001dc6:	bf14      	ite	ne
 8001dc8:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001dca:	ea25 0404 	biceq.w	r4, r5, r4
 8001dce:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dd0:	3601      	adds	r6, #1
 8001dd2:	2e10      	cmp	r6, #16
 8001dd4:	f47f af73 	bne.w	8001cbe <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001dd8:	b003      	add	sp, #12
 8001dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001dde:	2d03      	cmp	r5, #3
 8001de0:	d022      	beq.n	8001e28 <HAL_GPIO_Init+0x17c>
 8001de2:	2d11      	cmp	r5, #17
 8001de4:	d184      	bne.n	8001cf0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de6:	68ca      	ldr	r2, [r1, #12]
 8001de8:	3204      	adds	r2, #4
          break;
 8001dea:	e781      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001dec:	4f1a      	ldr	r7, [pc, #104]	; (8001e58 <HAL_GPIO_Init+0x1ac>)
 8001dee:	42bd      	cmp	r5, r7
 8001df0:	d009      	beq.n	8001e06 <HAL_GPIO_Init+0x15a>
 8001df2:	d812      	bhi.n	8001e1a <HAL_GPIO_Init+0x16e>
 8001df4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001e64 <HAL_GPIO_Init+0x1b8>
 8001df8:	454d      	cmp	r5, r9
 8001dfa:	d004      	beq.n	8001e06 <HAL_GPIO_Init+0x15a>
 8001dfc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001e00:	454d      	cmp	r5, r9
 8001e02:	f47f af75 	bne.w	8001cf0 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001e06:	688a      	ldr	r2, [r1, #8]
 8001e08:	b1c2      	cbz	r2, 8001e3c <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8001e0a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001e0c:	bf0c      	ite	eq
 8001e0e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001e12:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e16:	2208      	movs	r2, #8
 8001e18:	e76a      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001e1a:	4575      	cmp	r5, lr
 8001e1c:	d0f3      	beq.n	8001e06 <HAL_GPIO_Init+0x15a>
 8001e1e:	4565      	cmp	r5, ip
 8001e20:	d0f1      	beq.n	8001e06 <HAL_GPIO_Init+0x15a>
 8001e22:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001e68 <HAL_GPIO_Init+0x1bc>
 8001e26:	e7eb      	b.n	8001e00 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	e761      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e2c:	68ca      	ldr	r2, [r1, #12]
          break;
 8001e2e:	e75f      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e30:	68ca      	ldr	r2, [r1, #12]
 8001e32:	3208      	adds	r2, #8
          break;
 8001e34:	e75c      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e36:	68ca      	ldr	r2, [r1, #12]
 8001e38:	320c      	adds	r2, #12
          break;
 8001e3a:	e759      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	e757      	b.n	8001cf0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e40:	2500      	movs	r5, #0
 8001e42:	e7a2      	b.n	8001d8a <HAL_GPIO_Init+0xde>
 8001e44:	2501      	movs	r5, #1
 8001e46:	e7a0      	b.n	8001d8a <HAL_GPIO_Init+0xde>
 8001e48:	2502      	movs	r5, #2
 8001e4a:	e79e      	b.n	8001d8a <HAL_GPIO_Init+0xde>
 8001e4c:	40010400 	.word	0x40010400
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	10210000 	.word	0x10210000
 8001e5c:	10310000 	.word	0x10310000
 8001e60:	10320000 	.word	0x10320000
 8001e64:	10110000 	.word	0x10110000
 8001e68:	10220000 	.word	0x10220000

08001e6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	b10a      	cbz	r2, 8001e72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e6e:	6101      	str	r1, [r0, #16]
 8001e70:	4770      	bx	lr
 8001e72:	0409      	lsls	r1, r1, #16
 8001e74:	e7fb      	b.n	8001e6e <HAL_GPIO_WritePin+0x2>

08001e76 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001e76:	68c3      	ldr	r3, [r0, #12]
 8001e78:	4059      	eors	r1, r3
 8001e7a:	60c1      	str	r1, [r0, #12]
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e80:	6803      	ldr	r3, [r0, #0]
{
 8001e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	07dc      	lsls	r4, r3, #31
{
 8001e88:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	d438      	bmi.n	8001efe <HAL_RCC_OscConfig+0x7e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	0798      	lsls	r0, r3, #30
 8001e90:	f100 80ab 	bmi.w	8001fea <HAL_RCC_OscConfig+0x16a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	0719      	lsls	r1, r3, #28
 8001e98:	d523      	bpl.n	8001ee2 <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	69ea      	ldr	r2, [r5, #28]
 8001e9c:	4cc0      	ldr	r4, [pc, #768]	; (80021a0 <HAL_RCC_OscConfig+0x320>)
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	49c0      	ldr	r1, [pc, #768]	; (80021a4 <HAL_RCC_OscConfig+0x324>)
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	f000 8119 	beq.w	80020da <HAL_RCC_OscConfig+0x25a>
 8001ea8:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f97a 	bl	80011ac <HAL_GetTick>
 8001eb8:	2602      	movs	r6, #2
 8001eba:	4607      	mov	r7, r0
 8001ebc:	fa96 f3a6 	rbit	r3, r6
 8001ec0:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ec6:	fa96 f3a6 	rbit	r3, r6
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	07da      	lsls	r2, r3, #31
 8001ed8:	f140 80f8 	bpl.w	80020cc <HAL_RCC_OscConfig+0x24c>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff f96b 	bl	80011b8 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	0758      	lsls	r0, r3, #29
 8001ee6:	f100 8118 	bmi.w	800211a <HAL_RCC_OscConfig+0x29a>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001eea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	f040 8197 	bne.w	8002220 <HAL_RCC_OscConfig+0x3a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef2:	6a2a      	ldr	r2, [r5, #32]
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	f040 822d 	bne.w	8002354 <HAL_RCC_OscConfig+0x4d4>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001efa:	2000      	movs	r0, #0
 8001efc:	e020      	b.n	8001f40 <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001efe:	4ca8      	ldr	r4, [pc, #672]	; (80021a0 <HAL_RCC_OscConfig+0x320>)
 8001f00:	6863      	ldr	r3, [r4, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d007      	beq.n	8001f1a <HAL_RCC_OscConfig+0x9a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0a:	6863      	ldr	r3, [r4, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d118      	bne.n	8001f46 <HAL_RCC_OscConfig+0xc6>
 8001f14:	6863      	ldr	r3, [r4, #4]
 8001f16:	03d9      	lsls	r1, r3, #15
 8001f18:	d515      	bpl.n	8001f46 <HAL_RCC_OscConfig+0xc6>
 8001f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	6822      	ldr	r2, [r4, #0]
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	07da      	lsls	r2, r3, #31
 8001f36:	d5a9      	bpl.n	8001e8c <HAL_RCC_OscConfig+0xc>
 8001f38:	68ab      	ldr	r3, [r5, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1a6      	bne.n	8001e8c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
}
 8001f40:	b003      	add	sp, #12
 8001f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f46:	68ab      	ldr	r3, [r5, #8]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f56:	f7ff f929 	bl	80011ac <HAL_GetTick>
 8001f5a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f5e:	4607      	mov	r7, r0
 8001f60:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	fa96 f3a6 	rbit	r3, r6
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	07db      	lsls	r3, r3, #31
 8001f78:	d488      	bmi.n	8001e8c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7a:	f7ff f917 	bl	80011ac <HAL_GetTick>
 8001f7e:	1bc0      	subs	r0, r0, r7
 8001f80:	2864      	cmp	r0, #100	; 0x64
 8001f82:	d9ed      	bls.n	8001f60 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8001f84:	2003      	movs	r0, #3
 8001f86:	e7db      	b.n	8001f40 <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	bb03      	cbnz	r3, 8001fcc <HAL_RCC_OscConfig+0x14c>
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f905 	bl	80011ac <HAL_GetTick>
 8001fa2:	4607      	mov	r7, r0
 8001fa4:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	fa96 f3a6 	rbit	r3, r6
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	07d8      	lsls	r0, r3, #31
 8001fbc:	f57f af66 	bpl.w	8001e8c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f8f4 	bl	80011ac <HAL_GetTick>
 8001fc4:	1bc0      	subs	r0, r0, r7
 8001fc6:	2864      	cmp	r0, #100	; 0x64
 8001fc8:	d9ec      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x124>
 8001fca:	e7db      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	d103      	bne.n	8001fdc <HAL_RCC_OscConfig+0x15c>
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	e7b8      	b.n	8001f4e <HAL_RCC_OscConfig+0xce>
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe8:	e7b4      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fea:	4c6d      	ldr	r4, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x320>)
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	f013 0f0c 	tst.w	r3, #12
 8001ff2:	d007      	beq.n	8002004 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d120      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
 8001ffe:	6863      	ldr	r3, [r4, #4]
 8002000:	03d9      	lsls	r1, r3, #15
 8002002:	d41d      	bmi.n	8002040 <HAL_RCC_OscConfig+0x1c0>
 8002004:	2302      	movs	r3, #2
 8002006:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	07da      	lsls	r2, r3, #31
 800201e:	d502      	bpl.n	8002026 <HAL_RCC_OscConfig+0x1a6>
 8002020:	696b      	ldr	r3, [r5, #20]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d18b      	bne.n	8001f3e <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	6821      	ldr	r1, [r4, #0]
 8002028:	23f8      	movs	r3, #248	; 0xf8
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	fab3 f283 	clz	r2, r3
 8002032:	69ab      	ldr	r3, [r5, #24]
 8002034:	4093      	lsls	r3, r2
 8002036:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800203a:	4313      	orrs	r3, r2
 800203c:	6023      	str	r3, [r4, #0]
 800203e:	e729      	b.n	8001e94 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002040:	696a      	ldr	r2, [r5, #20]
 8002042:	2301      	movs	r3, #1
 8002044:	b302      	cbz	r2, 8002088 <HAL_RCC_OscConfig+0x208>
 8002046:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8002054:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8002058:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800205a:	f7ff f8a7 	bl	80011ac <HAL_GetTick>
 800205e:	2602      	movs	r6, #2
 8002060:	4607      	mov	r7, r0
 8002062:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	fa96 f3a6 	rbit	r3, r6
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	07db      	lsls	r3, r3, #31
 800207a:	d4d4      	bmi.n	8002026 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7ff f896 	bl	80011ac <HAL_GetTick>
 8002080:	1bc0      	subs	r0, r0, r7
 8002082:	2802      	cmp	r0, #2
 8002084:	d9ed      	bls.n	8002062 <HAL_RCC_OscConfig+0x1e2>
 8002086:	e77d      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
 8002088:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002096:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800209a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800209c:	f7ff f886 	bl	80011ac <HAL_GetTick>
 80020a0:	2602      	movs	r6, #2
 80020a2:	4607      	mov	r7, r0
 80020a4:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	fa96 f3a6 	rbit	r3, r6
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	07d8      	lsls	r0, r3, #31
 80020bc:	f57f aeea 	bpl.w	8001e94 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff f874 	bl	80011ac <HAL_GetTick>
 80020c4:	1bc0      	subs	r0, r0, r7
 80020c6:	2802      	cmp	r0, #2
 80020c8:	d9ec      	bls.n	80020a4 <HAL_RCC_OscConfig+0x224>
 80020ca:	e75b      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff f86e 	bl	80011ac <HAL_GetTick>
 80020d0:	1bc0      	subs	r0, r0, r7
 80020d2:	2802      	cmp	r0, #2
 80020d4:	f67f aef2 	bls.w	8001ebc <HAL_RCC_OscConfig+0x3c>
 80020d8:	e754      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
 80020da:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 80020e6:	f7ff f861 	bl	80011ac <HAL_GetTick>
 80020ea:	2602      	movs	r6, #2
 80020ec:	4607      	mov	r7, r0
 80020ee:	fa96 f3a6 	rbit	r3, r6
 80020f2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020f8:	fa96 f3a6 	rbit	r3, r6
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	07db      	lsls	r3, r3, #31
 800210a:	f57f aeea 	bpl.w	8001ee2 <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff f84d 	bl	80011ac <HAL_GetTick>
 8002112:	1bc0      	subs	r0, r0, r7
 8002114:	2802      	cmp	r0, #2
 8002116:	d9ea      	bls.n	80020ee <HAL_RCC_OscConfig+0x26e>
 8002118:	e734      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4c21      	ldr	r4, [pc, #132]	; (80021a0 <HAL_RCC_OscConfig+0x320>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211c:	4e22      	ldr	r6, [pc, #136]	; (80021a8 <HAL_RCC_OscConfig+0x328>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	69e3      	ldr	r3, [r4, #28]
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61e3      	str	r3, [r4, #28]
 8002126:	69e3      	ldr	r3, [r4, #28]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002130:	6833      	ldr	r3, [r6, #0]
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002138:	f7ff f838 	bl	80011ac <HAL_GetTick>
 800213c:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800213e:	6833      	ldr	r3, [r6, #0]
 8002140:	05d9      	lsls	r1, r3, #23
 8002142:	d526      	bpl.n	8002192 <HAL_RCC_OscConfig+0x312>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	692b      	ldr	r3, [r5, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d130      	bne.n	80021ac <HAL_RCC_OscConfig+0x32c>
 800214a:	6a23      	ldr	r3, [r4, #32]
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002152:	f7ff f82b 	bl	80011ac <HAL_GetTick>
 8002156:	2602      	movs	r6, #2
 8002158:	4681      	mov	r9, r0
 800215a:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f241 3788 	movw	r7, #5000	; 0x1388
 8002160:	fa96 f3a6 	rbit	r3, r6
 8002164:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	2b00      	cmp	r3, #0
 800216a:	d055      	beq.n	8002218 <HAL_RCC_OscConfig+0x398>
 800216c:	6a22      	ldr	r2, [r4, #32]
 800216e:	fa98 f3a8 	rbit	r3, r8
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	07da      	lsls	r2, r3, #31
 8002180:	f53f aeb3 	bmi.w	8001eea <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7ff f812 	bl	80011ac <HAL_GetTick>
 8002188:	eba0 0009 	sub.w	r0, r0, r9
 800218c:	42b8      	cmp	r0, r7
 800218e:	d9e7      	bls.n	8002160 <HAL_RCC_OscConfig+0x2e0>
 8002190:	e6f8      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7ff f80b 	bl	80011ac <HAL_GetTick>
 8002196:	1bc0      	subs	r0, r0, r7
 8002198:	2864      	cmp	r0, #100	; 0x64
 800219a:	d9d0      	bls.n	800213e <HAL_RCC_OscConfig+0x2be>
 800219c:	e6f2      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	42420480 	.word	0x42420480
 80021a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	bb33      	cbnz	r3, 80021fc <HAL_RCC_OscConfig+0x37c>
 80021ae:	6a23      	ldr	r3, [r4, #32]
 80021b0:	2602      	movs	r6, #2
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6223      	str	r3, [r4, #32]
 80021b8:	6a23      	ldr	r3, [r4, #32]
 80021ba:	4637      	mov	r7, r6
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80021c2:	f7fe fff3 	bl	80011ac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80021ca:	4680      	mov	r8, r0
 80021cc:	fa96 f3a6 	rbit	r3, r6
 80021d0:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	b313      	cbz	r3, 800221c <HAL_RCC_OscConfig+0x39c>
 80021d6:	6a22      	ldr	r2, [r4, #32]
 80021d8:	fa97 f3a7 	rbit	r3, r7
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	07db      	lsls	r3, r3, #31
 80021ea:	f57f ae7e 	bpl.w	8001eea <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe ffdd 	bl	80011ac <HAL_GetTick>
 80021f2:	eba0 0008 	sub.w	r0, r0, r8
 80021f6:	4548      	cmp	r0, r9
 80021f8:	d9e8      	bls.n	80021cc <HAL_RCC_OscConfig+0x34c>
 80021fa:	e6c3      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	6a23      	ldr	r3, [r4, #32]
 8002200:	d103      	bne.n	800220a <HAL_RCC_OscConfig+0x38a>
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6223      	str	r3, [r4, #32]
 8002208:	e79f      	b.n	800214a <HAL_RCC_OscConfig+0x2ca>
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6223      	str	r3, [r4, #32]
 8002210:	6a23      	ldr	r3, [r4, #32]
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	e79b      	b.n	8002150 <HAL_RCC_OscConfig+0x2d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221a:	e7a8      	b.n	800216e <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221e:	e7db      	b.n	80021d8 <HAL_RCC_OscConfig+0x358>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002220:	4c93      	ldr	r4, [pc, #588]	; (8002470 <HAL_RCC_OscConfig+0x5f0>)
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	03de      	lsls	r6, r3, #15
 8002226:	d508      	bpl.n	800223a <HAL_RCC_OscConfig+0x3ba>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002228:	6863      	ldr	r3, [r4, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800222e:	2b08      	cmp	r3, #8
 8002230:	d103      	bne.n	800223a <HAL_RCC_OscConfig+0x3ba>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002234:	03d8      	lsls	r0, r3, #15
 8002236:	f53f ae82 	bmi.w	8001f3e <HAL_RCC_OscConfig+0xbe>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800223a:	2a02      	cmp	r2, #2
 800223c:	d160      	bne.n	8002300 <HAL_RCC_OscConfig+0x480>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	00d9      	lsls	r1, r3, #3
 8002242:	d506      	bpl.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8002246:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 800224c:	4293      	cmp	r3, r2
 800224e:	f47f ae76 	bne.w	8001f3e <HAL_RCC_OscConfig+0xbe>
 8002252:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002256:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL2_DISABLE();
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	2200      	movs	r2, #0
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002266:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800226a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800226c:	f7fe ff9e 	bl	80011ac <HAL_GetTick>
 8002270:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8002274:	4607      	mov	r7, r0
 8002276:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	fa96 f3a6 	rbit	r3, r6
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	07da      	lsls	r2, r3, #31
 800228e:	d431      	bmi.n	80022f4 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002292:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002298:	4313      	orrs	r3, r2
 800229a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800229c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800229e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80022a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022a4:	4313      	orrs	r3, r2
 80022a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL2_ENABLE();
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	2201      	movs	r2, #1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80022bc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80022c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022c2:	f7fe ff73 	bl	80011ac <HAL_GetTick>
 80022c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80022ca:	4607      	mov	r7, r0
 80022cc:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	fa96 f3a6 	rbit	r3, r6
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	07db      	lsls	r3, r3, #31
 80022e4:	f53f ae05 	bmi.w	8001ef2 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80022e8:	f7fe ff60 	bl	80011ac <HAL_GetTick>
 80022ec:	1bc0      	subs	r0, r0, r7
 80022ee:	2864      	cmp	r0, #100	; 0x64
 80022f0:	d9ec      	bls.n	80022cc <HAL_RCC_OscConfig+0x44c>
 80022f2:	e647      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80022f4:	f7fe ff5a 	bl	80011ac <HAL_GetTick>
 80022f8:	1bc0      	subs	r0, r0, r7
 80022fa:	2864      	cmp	r0, #100	; 0x64
 80022fc:	d9bb      	bls.n	8002276 <HAL_RCC_OscConfig+0x3f6>
 80022fe:	e641      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002300:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800230c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL2_DISABLE();
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	2200      	movs	r2, #0
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800231c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002320:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002322:	f7fe ff43 	bl	80011ac <HAL_GetTick>
 8002326:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 800232a:	4607      	mov	r7, r0
 800232c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	fa96 f3a6 	rbit	r3, r6
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	07d8      	lsls	r0, r3, #31
 8002344:	f57f add5 	bpl.w	8001ef2 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002348:	f7fe ff30 	bl	80011ac <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	2864      	cmp	r0, #100	; 0x64
 8002350:	d9ec      	bls.n	800232c <HAL_RCC_OscConfig+0x4ac>
 8002352:	e617      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4c46      	ldr	r4, [pc, #280]	; (8002470 <HAL_RCC_OscConfig+0x5f0>)
 8002356:	6863      	ldr	r3, [r4, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	f43f adee 	beq.w	8001f3e <HAL_RCC_OscConfig+0xbe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	2a02      	cmp	r2, #2
 8002364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002368:	d15d      	bne.n	8002426 <HAL_RCC_OscConfig+0x5a6>
 800236a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	2200      	movs	r2, #0
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800237a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800237e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002380:	f7fe ff14 	bl	80011ac <HAL_GetTick>
 8002384:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8002388:	4607      	mov	r7, r0
 800238a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	6822      	ldr	r2, [r4, #0]
 8002390:	fa96 f3a6 	rbit	r3, r6
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	07d9      	lsls	r1, r3, #31
 80023a2:	d43a      	bmi.n	800241a <HAL_RCC_OscConfig+0x59a>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_OscConfig+0x540>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80023ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023ae:	6869      	ldr	r1, [r5, #4]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023b6:	68e9      	ldr	r1, [r5, #12]
 80023b8:	f022 020f 	bic.w	r2, r2, #15
 80023bc:	430a      	orrs	r2, r1
 80023be:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c0:	6862      	ldr	r2, [r4, #4]
 80023c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80023c4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80023c8:	430b      	orrs	r3, r1
 80023ca:	4313      	orrs	r3, r2
 80023cc:	6063      	str	r3, [r4, #4]
 80023ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80023e2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80023e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023e8:	f7fe fee0 	bl	80011ac <HAL_GetTick>
 80023ec:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80023f0:	4606      	mov	r6, r0
 80023f2:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	fa95 f3a5 	rbit	r3, r5
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	07da      	lsls	r2, r3, #31
 800240a:	f53f ad76 	bmi.w	8001efa <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe fecd 	bl	80011ac <HAL_GetTick>
 8002412:	1b80      	subs	r0, r0, r6
 8002414:	2802      	cmp	r0, #2
 8002416:	d9ec      	bls.n	80023f2 <HAL_RCC_OscConfig+0x572>
 8002418:	e5b4      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fec7 	bl	80011ac <HAL_GetTick>
 800241e:	1bc0      	subs	r0, r0, r7
 8002420:	2802      	cmp	r0, #2
 8002422:	d9b2      	bls.n	800238a <HAL_RCC_OscConfig+0x50a>
 8002424:	e5ae      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
 8002426:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	2200      	movs	r2, #0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002436:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800243a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800243c:	f7fe feb6 	bl	80011ac <HAL_GetTick>
 8002440:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002444:	4606      	mov	r6, r0
 8002446:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	fa95 f3a5 	rbit	r3, r5
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	07db      	lsls	r3, r3, #31
 800245e:	f57f ad4c 	bpl.w	8001efa <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fea3 	bl	80011ac <HAL_GetTick>
 8002466:	1b80      	subs	r0, r0, r6
 8002468:	2802      	cmp	r0, #2
 800246a:	d9ec      	bls.n	8002446 <HAL_RCC_OscConfig+0x5c6>
 800246c:	e58a      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_GetSysClockFreq+0xe8>)
{
 8002478:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	aa01      	add	r2, sp, #4
 8002480:	c203      	stmia	r2!, {r0, r1}
 8002482:	6898      	ldr	r0, [r3, #8]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8002484:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 8002486:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8002488:	f103 020c 	add.w	r2, r3, #12
 800248c:	331c      	adds	r3, #28
 800248e:	462c      	mov	r4, r5
 8002490:	6810      	ldr	r0, [r2, #0]
 8002492:	6851      	ldr	r1, [r2, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	c403      	stmia	r4!, {r0, r1}
 8002498:	429a      	cmp	r2, r3
 800249a:	4625      	mov	r5, r4
 800249c:	d1f7      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x1a>
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800249e:	4c30      	ldr	r4, [pc, #192]	; (8002560 <HAL_RCC_GetSysClockFreq+0xec>)
 80024a0:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a2:	f000 030c 	and.w	r3, r0, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d055      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0xe2>
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d002      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x40>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ae:	482d      	ldr	r0, [pc, #180]	; (8002564 <HAL_RCC_GetSysClockFreq+0xf0>)
      break;
    }
  }
  return sysclockfreq;
}
 80024b0:	b009      	add	sp, #36	; 0x24
 80024b2:	bd30      	pop	{r4, r5, pc}
 80024b4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80024b8:	fa93 f3a3 	rbit	r3, r3
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80024bc:	fab3 f283 	clz	r2, r3
 80024c0:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
 80024c4:	40d3      	lsrs	r3, r2
 80024c6:	aa08      	add	r2, sp, #32
 80024c8:	4413      	add	r3, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ca:	03c2      	lsls	r2, r0, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80024cc:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d0:	d53e      	bpl.n	8002550 <HAL_RCC_GetSysClockFreq+0xdc>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 80024d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	fab2 f282 	clz	r2, r2
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	40d3      	lsrs	r3, r2
 80024e4:	aa08      	add	r2, sp, #32
 80024e6:	4413      	add	r3, r2
 80024e8:	f813 5c10 	ldrb.w	r5, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80024ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024ee:	03db      	lsls	r3, r3, #15
 80024f0:	d52c      	bpl.n	800254c <HAL_RCC_GetSysClockFreq+0xd8>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 80024f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024f4:	20f0      	movs	r0, #240	; 0xf0
 80024f6:	fa90 f0a0 	rbit	r0, r0
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 80024fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 80024fc:	fab0 f080 	clz	r0, r0
 8002500:	f44f 6470 	mov.w	r4, #3840	; 0xf00
 8002504:	fa94 f4a4 	rbit	r4, r4
 8002508:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800250c:	40c2      	lsrs	r2, r0
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 800250e:	fab4 f484 	clz	r4, r4
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8002512:	4815      	ldr	r0, [pc, #84]	; (8002568 <HAL_RCC_GetSysClockFreq+0xf4>)
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8002514:	3201      	adds	r2, #1
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8002516:	fbb0 f2f2 	udiv	r2, r0, r2
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 800251a:	f403 6070 	and.w	r0, r3, #3840	; 0xf00
 800251e:	40e0      	lsrs	r0, r4
 8002520:	3002      	adds	r0, #2
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8002522:	4350      	muls	r0, r2
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002524:	fbb0 f0f5 	udiv	r0, r0, r5
 8002528:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800252c:	4348      	muls	r0, r1
 800252e:	fa93 f3a3 	rbit	r3, r3
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 8002532:	fab3 f283 	clz	r2, r3
 8002536:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 800253a:	40d3      	lsrs	r3, r2
 800253c:	aa08      	add	r2, sp, #32
 800253e:	4413      	add	r3, r2
 8002540:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002544:	4299      	cmp	r1, r3
 8002546:	d1b3      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0x3c>
            pllclk = pllclk / 2;
 8002548:	0840      	lsrs	r0, r0, #1
 800254a:	e7b1      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x3c>
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800254c:	4806      	ldr	r0, [pc, #24]	; (8002568 <HAL_RCC_GetSysClockFreq+0xf4>)
 800254e:	e7e9      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb0>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002552:	4348      	muls	r0, r1
 8002554:	e7ac      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002556:	4804      	ldr	r0, [pc, #16]	; (8002568 <HAL_RCC_GetSysClockFreq+0xf4>)
  return sysclockfreq;
 8002558:	e7aa      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x3c>
 800255a:	bf00      	nop
 800255c:	08004764 	.word	0x08004764
 8002560:	40021000 	.word	0x40021000
 8002564:	007a1200 	.word	0x007a1200
 8002568:	00f42400 	.word	0x00f42400
 800256c:	003d0900 	.word	0x003d0900

08002570 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002570:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_RCC_ClockConfig+0x158>)
{
 8002572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002576:	6813      	ldr	r3, [r2, #0]
{
 8002578:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	428b      	cmp	r3, r1
{
 8002580:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002582:	d330      	bcc.n	80025e6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	6832      	ldr	r2, [r6, #0]
 8002586:	0794      	lsls	r4, r2, #30
 8002588:	d43a      	bmi.n	8002600 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	07d0      	lsls	r0, r2, #31
 800258c:	d440      	bmi.n	8002610 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800258e:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_RCC_ClockConfig+0x158>)
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	429d      	cmp	r5, r3
 8002598:	f0c0 8084 	bcc.w	80026a4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	6832      	ldr	r2, [r6, #0]
 800259e:	4c4b      	ldr	r4, [pc, #300]	; (80026cc <HAL_RCC_ClockConfig+0x15c>)
 80025a0:	f012 0f04 	tst.w	r2, #4
 80025a4:	f040 8089 	bne.w	80026ba <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	0713      	lsls	r3, r2, #28
 80025aa:	d506      	bpl.n	80025ba <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	6932      	ldr	r2, [r6, #16]
 80025b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025b8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025ba:	f7ff ff5b 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 80025be:	6863      	ldr	r3, [r4, #4]
 80025c0:	22f0      	movs	r2, #240	; 0xf0
 80025c2:	fa92 f2a2 	rbit	r2, r2
 80025c6:	fab2 f282 	clz	r2, r2
 80025ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ce:	40d3      	lsrs	r3, r2
 80025d0:	4a3f      	ldr	r2, [pc, #252]	; (80026d0 <HAL_RCC_ClockConfig+0x160>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	40d8      	lsrs	r0, r3
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x164>)
 80025d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe fdba 	bl	8001154 <HAL_InitTick>
  return HAL_OK;
 80025e0:	2000      	movs	r0, #0
}
 80025e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	f023 0307 	bic.w	r3, r3, #7
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	4299      	cmp	r1, r3
 80025f8:	d0c4      	beq.n	8002584 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
 80025fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4932      	ldr	r1, [pc, #200]	; (80026cc <HAL_RCC_ClockConfig+0x15c>)
 8002602:	68b0      	ldr	r0, [r6, #8]
 8002604:	684b      	ldr	r3, [r1, #4]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260a:	4303      	orrs	r3, r0
 800260c:	604b      	str	r3, [r1, #4]
 800260e:	e7bc      	b.n	800258a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002610:	6872      	ldr	r2, [r6, #4]
 8002612:	4c2e      	ldr	r4, [pc, #184]	; (80026cc <HAL_RCC_ClockConfig+0x15c>)
 8002614:	2a01      	cmp	r2, #1
 8002616:	d128      	bne.n	800266a <HAL_RCC_ClockConfig+0xfa>
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	6821      	ldr	r1, [r4, #0]
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa21 f303 	lsr.w	r3, r1, r3
 8002632:	07d9      	lsls	r1, r3, #31
 8002634:	d5e1      	bpl.n	80025fa <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263c:	f023 0303 	bic.w	r3, r3, #3
 8002640:	431a      	orrs	r2, r3
 8002642:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8002644:	f7fe fdb2 	bl	80011ac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002648:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800264a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264c:	2b01      	cmp	r3, #1
 800264e:	d112      	bne.n	8002676 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d099      	beq.n	800258e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265a:	f7fe fda7 	bl	80011ac <HAL_GetTick>
 800265e:	1bc0      	subs	r0, r0, r7
 8002660:	4540      	cmp	r0, r8
 8002662:	d9f5      	bls.n	8002650 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8002664:	2003      	movs	r0, #3
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	2a02      	cmp	r2, #2
 800266c:	bf0c      	ite	eq
 800266e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002672:	2302      	movne	r3, #2
 8002674:	e7d2      	b.n	800261c <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	2b02      	cmp	r3, #2
 8002678:	d10f      	bne.n	800269a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d084      	beq.n	800258e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fd92 	bl	80011ac <HAL_GetTick>
 8002688:	1bc0      	subs	r0, r0, r7
 800268a:	4540      	cmp	r0, r8
 800268c:	d9f5      	bls.n	800267a <HAL_RCC_ClockConfig+0x10a>
 800268e:	e7e9      	b.n	8002664 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fe fd8c 	bl	80011ac <HAL_GetTick>
 8002694:	1bc0      	subs	r0, r0, r7
 8002696:	4540      	cmp	r0, r8
 8002698:	d8e4      	bhi.n	8002664 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800269a:	6863      	ldr	r3, [r4, #4]
 800269c:	f013 0f0c 	tst.w	r3, #12
 80026a0:	d1f6      	bne.n	8002690 <HAL_RCC_ClockConfig+0x120>
 80026a2:	e774      	b.n	800258e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	432b      	orrs	r3, r5
 80026ac:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	429d      	cmp	r5, r3
 80026b6:	d1a0      	bne.n	80025fa <HAL_RCC_ClockConfig+0x8a>
 80026b8:	e770      	b.n	800259c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	68f1      	ldr	r1, [r6, #12]
 80026be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026c2:	430b      	orrs	r3, r1
 80026c4:	6063      	str	r3, [r4, #4]
 80026c6:	e76f      	b.n	80025a8 <HAL_RCC_ClockConfig+0x38>
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08004780 	.word	0x08004780
 80026d4:	20000008 	.word	0x20000008

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026d8:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000008 	.word	0x20000008

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026f8:	40d3      	lsrs	r3, r2
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_RCC_GetPCLK1Freq+0x28>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002700:	6810      	ldr	r0, [r2, #0]
}    
 8002702:	40d8      	lsrs	r0, r3
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	08004790 	.word	0x08004790
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002716:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	fa92 f2a2 	rbit	r2, r2
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002728:	40d3      	lsrs	r3, r2
 800272a:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_RCC_GetPCLK2Freq+0x28>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002730:	6810      	ldr	r0, [r2, #0]
} 
 8002732:	40d8      	lsrs	r0, r3
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	08004790 	.word	0x08004790
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002744:	6803      	ldr	r3, [r0, #0]
{
 8002746:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800274a:	f013 0f01 	tst.w	r3, #1
{
 800274e:	4605      	mov	r5, r0
 8002750:	4c6c      	ldr	r4, [pc, #432]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002752:	d01d      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	69e3      	ldr	r3, [r4, #28]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4e6c      	ldr	r6, [pc, #432]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	61e3      	str	r3, [r4, #28]
 800275e:	69e3      	ldr	r3, [r4, #28]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002768:	6833      	ldr	r3, [r6, #0]
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002770:	f7fe fd1c 	bl	80011ac <HAL_GetTick>
 8002774:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002776:	6833      	ldr	r3, [r6, #0]
 8002778:	05d8      	lsls	r0, r3, #23
 800277a:	d536      	bpl.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xa6>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800277c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800277e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002782:	d13b      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002784:	6a23      	ldr	r3, [r4, #32]
 8002786:	686a      	ldr	r2, [r5, #4]
 8002788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278c:	4313      	orrs	r3, r2
 800278e:	6223      	str	r3, [r4, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002790:	682a      	ldr	r2, [r5, #0]
 8002792:	0793      	lsls	r3, r2, #30
 8002794:	d505      	bpl.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002796:	6863      	ldr	r3, [r4, #4]
 8002798:	68a9      	ldr	r1, [r5, #8]
 800279a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800279e:	430b      	orrs	r3, r1
 80027a0:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80027a2:	0757      	lsls	r7, r2, #29
 80027a4:	d505      	bpl.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027a8:	68e9      	ldr	r1, [r5, #12]
 80027aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027ae:	430b      	orrs	r3, r1
 80027b0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80027b2:	0716      	lsls	r6, r2, #28
 80027b4:	d505      	bpl.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80027b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027b8:	692a      	ldr	r2, [r5, #16]
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027be:	4313      	orrs	r3, r2
 80027c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80027c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027c4:	0398      	lsls	r0, r3, #14
 80027c6:	f100 8090 	bmi.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027cc:	0359      	lsls	r1, r3, #13
 80027ce:	f100 808c 	bmi.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027d2:	6828      	ldr	r0, [r5, #0]
 80027d4:	f010 0010 	ands.w	r0, r0, #16
 80027d8:	d00d      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027da:	6863      	ldr	r3, [r4, #4]
 80027dc:	69ea      	ldr	r2, [r5, #28]
 80027de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027e2:	4313      	orrs	r3, r2
 80027e4:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027e6:	2000      	movs	r0, #0
 80027e8:	e005      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7fe fcdf 	bl	80011ac <HAL_GetTick>
 80027ee:	1bc0      	subs	r0, r0, r7
 80027f0:	2864      	cmp	r0, #100	; 0x64
 80027f2:	d9c0      	bls.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x32>
        return HAL_TIMEOUT;
 80027f4:	2003      	movs	r0, #3
}
 80027f6:	b003      	add	sp, #12
 80027f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027fc:	686a      	ldr	r2, [r5, #4]
 80027fe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002802:	4293      	cmp	r3, r2
 8002804:	d0be      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002806:	6a21      	ldr	r1, [r4, #32]
 8002808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002810:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002814:	2701      	movs	r7, #1
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	483c      	ldr	r0, [pc, #240]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800281c:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 8002820:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002824:	2200      	movs	r2, #0
 8002826:	fab3 f383 	clz	r3, r3
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800282a:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      RCC->BDCR = temp_reg;
 8002830:	6226      	str	r6, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002832:	d5a7      	bpl.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8002834:	f7fe fcba 	bl	80011ac <HAL_GetTick>
 8002838:	2602      	movs	r6, #2
 800283a:	4680      	mov	r8, r0
 800283c:	4637      	mov	r7, r6
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f241 3988 	movw	r9, #5000	; 0x1388
 8002842:	fa96 f3a6 	rbit	r3, r6
 8002846:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	b18b      	cbz	r3, 8002870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800284c:	6a22      	ldr	r2, [r4, #32]
 800284e:	fa97 f3a7 	rbit	r3, r7
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	07da      	lsls	r2, r3, #31
 8002860:	d490      	bmi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x40>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fca3 	bl	80011ac <HAL_GetTick>
 8002866:	eba0 0008 	sub.w	r0, r0, r8
 800286a:	4548      	cmp	r0, r9
 800286c:	d9e9      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800286e:	e7c1      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002872:	e7ec      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	69a9      	ldr	r1, [r5, #24]
 8002878:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800287c:	d004      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x144>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800287e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002880:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002884:	428a      	cmp	r2, r1
 8002886:	d13a      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	430b      	orrs	r3, r1
 8002890:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002894:	696a      	ldr	r2, [r5, #20]
 8002896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800289a:	4313      	orrs	r3, r2
 800289c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800289e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028a2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_ENABLE();
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80028b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80028b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028b8:	f7fe fc78 	bl	80011ac <HAL_GetTick>
 80028bc:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
 80028c0:	4607      	mov	r7, r0
 80028c2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c6:	6822      	ldr	r2, [r4, #0]
 80028c8:	fa96 f3a6 	rbit	r3, r6
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
 80028d8:	07da      	lsls	r2, r3, #31
 80028da:	f53f af7a 	bmi.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028de:	f7fe fc65 	bl	80011ac <HAL_GetTick>
 80028e2:	1bc0      	subs	r0, r0, r7
 80028e4:	2864      	cmp	r0, #100	; 0x64
 80028e6:	d9ec      	bls.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80028e8:	e784      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	d5c1      	bpl.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80028f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028f2:	696a      	ldr	r2, [r5, #20]
 80028f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80028f8:	4293      	cmp	r3, r2
 80028fa:	f43f af6a 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
 8002900:	e779      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420400 	.word	0x42420400

08002910 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002910:	6a03      	ldr	r3, [r0, #32]
{
 8002912:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800291c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800291e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002922:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002926:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002928:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800292a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800292e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002930:	4d0a      	ldr	r5, [pc, #40]	; (800295c <TIM_OC1_SetConfig+0x4c>)
 8002932:	42a8      	cmp	r0, r5
 8002934:	d10b      	bne.n	800294e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002936:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002938:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800293c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800293e:	698e      	ldr	r6, [r1, #24]
 8002940:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002942:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002946:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002948:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800294c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002950:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002952:	684a      	ldr	r2, [r1, #4]
 8002954:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002956:	6203      	str	r3, [r0, #32]
 8002958:	bd70      	pop	{r4, r5, r6, pc}
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00

08002960 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002960:	6a03      	ldr	r3, [r0, #32]
{
 8002962:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800296c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800296e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002972:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002976:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002978:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800297a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 800297e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002982:	4d0b      	ldr	r5, [pc, #44]	; (80029b0 <TIM_OC3_SetConfig+0x50>)
 8002984:	42a8      	cmp	r0, r5
 8002986:	d10d      	bne.n	80029a4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002988:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800298a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800298e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002992:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002994:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002996:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800299a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800299c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80029a0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029a8:	684a      	ldr	r2, [r1, #4]
 80029aa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ac:	6203      	str	r3, [r0, #32]
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b4:	6a03      	ldr	r3, [r0, #32]
{
 80029b6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80029c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80029ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80029ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80029d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 80029d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80029d8:	4d06      	ldr	r5, [pc, #24]	; (80029f4 <TIM_OC4_SetConfig+0x40>)
 80029da:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80029dc:	bf02      	ittt	eq
 80029de:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80029e4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029ec:	684a      	ldr	r2, [r1, #4]
 80029ee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f0:	6203      	str	r3, [r0, #32]
 80029f2:	bd30      	pop	{r4, r5, pc}
 80029f4:	40012c00 	.word	0x40012c00

080029f8 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	6803      	ldr	r3, [r0, #0]
}
 80029fa:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_TIM_OC_MspInit>:
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_PWM_MspInit>:
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a12:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8002a16:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f04f 0302 	mov.w	r3, #2
 8002a1e:	d01c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x48>
 8002a20:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002a22:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002a26:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002a28:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a32:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002a36:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a38:	680a      	ldr	r2, [r1, #0]
 8002a3a:	2a40      	cmp	r2, #64	; 0x40
 8002a3c:	d079      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x120>
 8002a3e:	d819      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x62>
 8002a40:	2a10      	cmp	r2, #16
 8002a42:	f000 8093 	beq.w	8002b6c <HAL_TIM_ConfigClockSource+0x15a>
 8002a46:	d80a      	bhi.n	8002a5e <HAL_TIM_ConfigClockSource+0x4c>
 8002a48:	2a00      	cmp	r2, #0
 8002a4a:	f000 8089 	beq.w	8002b60 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002a54:	2300      	movs	r3, #0
 8002a56:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002a5a:	4618      	mov	r0, r3
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002a5e:	2a20      	cmp	r2, #32
 8002a60:	f000 808a 	beq.w	8002b78 <HAL_TIM_ConfigClockSource+0x166>
 8002a64:	2a30      	cmp	r2, #48	; 0x30
 8002a66:	d1f2      	bne.n	8002a4e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a68:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a6e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002a72:	e036      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002a74:	2a70      	cmp	r2, #112	; 0x70
 8002a76:	d036      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0xd4>
 8002a78:	d81b      	bhi.n	8002ab2 <HAL_TIM_ConfigClockSource+0xa0>
 8002a7a:	2a50      	cmp	r2, #80	; 0x50
 8002a7c:	d042      	beq.n	8002b04 <HAL_TIM_ConfigClockSource+0xf2>
 8002a7e:	2a60      	cmp	r2, #96	; 0x60
 8002a80:	d1e5      	bne.n	8002a4e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a82:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a84:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a86:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002a90:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a92:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002a9a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002a9e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002aa6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002aa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002aac:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002ab0:	e017      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002ab2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ab6:	d011      	beq.n	8002adc <HAL_TIM_ConfigClockSource+0xca>
 8002ab8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002abc:	d1c7      	bne.n	8002a4e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002abe:	688a      	ldr	r2, [r1, #8]
 8002ac0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002ac2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ac4:	68c9      	ldr	r1, [r1, #12]
 8002ac6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002acc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ad0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ada:	e002      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e7b3      	b.n	8002a4e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ae6:	688a      	ldr	r2, [r1, #8]
 8002ae8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002aea:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002aec:	68c9      	ldr	r1, [r1, #12]
 8002aee:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002af4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002af8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002afa:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002afc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afe:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002b02:	e7ee      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b04:	684c      	ldr	r4, [r1, #4]
 8002b06:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b08:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b0a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b10:	f025 0501 	bic.w	r5, r5, #1
 8002b14:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b16:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002b18:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002b1e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b24:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002b26:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b2c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002b30:	e7d7      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	684c      	ldr	r4, [r1, #4]
 8002b34:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b36:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b38:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b3a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3e:	f025 0501 	bic.w	r5, r5, #1
 8002b42:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b44:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002b46:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002b4c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002b50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b52:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002b54:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b5a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002b5e:	e7c0      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002b60:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b66:	f042 0207 	orr.w	r2, r2, #7
 8002b6a:	e7ba      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002b6c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b72:	f042 0217 	orr.w	r2, r2, #23
 8002b76:	e7b4      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002b78:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b7e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002b82:	e7ae      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0xd0>

08002b84 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIM_IC_CaptureCallback>:
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIM_TriggerCallback>:
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b8c:	6803      	ldr	r3, [r0, #0]
{
 8002b8e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b90:	691a      	ldr	r2, [r3, #16]
{
 8002b92:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b94:	0791      	lsls	r1, r2, #30
 8002b96:	d50e      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	0792      	lsls	r2, r2, #30
 8002b9c:	d50b      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b9e:	f06f 0202 	mvn.w	r2, #2
 8002ba2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba4:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002ba6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba8:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002baa:	079b      	lsls	r3, r3, #30
 8002bac:	d077      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	f7ff ffea 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	0750      	lsls	r0, r2, #29
 8002bbc:	d510      	bpl.n	8002be0 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	0751      	lsls	r1, r2, #29
 8002bc2:	d50d      	bpl.n	8002be0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc4:	f06f 0204 	mvn.w	r2, #4
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bca:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002bcc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bce:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002bd0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002bd6:	d068      	beq.n	8002caa <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd8:	f7ff ffd5 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	0712      	lsls	r2, r2, #28
 8002be6:	d50f      	bpl.n	8002c08 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	0710      	lsls	r0, r2, #28
 8002bec:	d50c      	bpl.n	8002c08 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bee:	f06f 0208 	mvn.w	r2, #8
 8002bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002bf6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf8:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002bfa:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002bfe:	d05a      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c00:	f7ff ffc1 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c04:	2300      	movs	r3, #0
 8002c06:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	06d2      	lsls	r2, r2, #27
 8002c0e:	d510      	bpl.n	8002c32 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	06d0      	lsls	r0, r2, #27
 8002c14:	d50d      	bpl.n	8002c32 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c16:	f06f 0210 	mvn.w	r2, #16
 8002c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c1e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c20:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c22:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c28:	d04b      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	f7ff ffac 	bl	8002b86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	07d1      	lsls	r1, r2, #31
 8002c38:	d508      	bpl.n	8002c4c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	07d2      	lsls	r2, r2, #31
 8002c3e:	d505      	bpl.n	8002c4c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c40:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c46:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c48:	f000 fde2 	bl	8003810 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	0610      	lsls	r0, r2, #24
 8002c52:	d508      	bpl.n	8002c66 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	0611      	lsls	r1, r2, #24
 8002c58:	d505      	bpl.n	8002c66 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002c5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c62:	f000 f9c0 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	0652      	lsls	r2, r2, #25
 8002c6c:	d508      	bpl.n	8002c80 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	0650      	lsls	r0, r2, #25
 8002c72:	d505      	bpl.n	8002c80 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002c78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c7c:	f7ff ff85 	bl	8002b8a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	0691      	lsls	r1, r2, #26
 8002c86:	d522      	bpl.n	8002cce <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	0692      	lsls	r2, r2, #26
 8002c8c:	d51f      	bpl.n	8002cce <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002c92:	4620      	mov	r0, r4
}
 8002c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002c9a:	f000 b9a3 	b.w	8002fe4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	f7ff ff71 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff ff70 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ca8:	e783      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	f7ff ff6b 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff ff6a 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cb4:	e792      	b.n	8002bdc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	f7ff ff65 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff ff64 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cc0:	e7a0      	b.n	8002c04 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	f7ff ff5f 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff ff5e 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ccc:	e7af      	b.n	8002c2e <HAL_TIM_IRQHandler+0xa2>
 8002cce:	bd10      	pop	{r4, pc}

08002cd0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 8002cd2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	4290      	cmp	r0, r2
 8002cd6:	d00e      	beq.n	8002cf6 <TIM_Base_SetConfig+0x26>
 8002cd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x26>
 8002cde:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ce2:	4290      	cmp	r0, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x26>
 8002ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cea:	4290      	cmp	r0, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x26>
 8002cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf2:	4290      	cmp	r0, r2
 8002cf4:	d119      	bne.n	8002d2a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8002cf6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfe:	4a11      	ldr	r2, [pc, #68]	; (8002d44 <TIM_Base_SetConfig+0x74>)
 8002d00:	4290      	cmp	r0, r2
 8002d02:	d00e      	beq.n	8002d22 <TIM_Base_SetConfig+0x52>
 8002d04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x52>
 8002d0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d0e:	4290      	cmp	r0, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x52>
 8002d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d16:	4290      	cmp	r0, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x52>
 8002d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d1e:	4290      	cmp	r0, r2
 8002d20:	d103      	bne.n	8002d2a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d22:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2c:	688b      	ldr	r3, [r1, #8]
 8002d2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <TIM_Base_SetConfig+0x74>)
 8002d36:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002d38:	bf04      	itt	eq
 8002d3a:	690b      	ldreq	r3, [r1, #16]
 8002d3c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	6143      	str	r3, [r0, #20]
 8002d42:	4770      	bx	lr
 8002d44:	40012c00 	.word	0x40012c00

08002d48 <HAL_TIM_Base_Init>:
{
 8002d48:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	b1a0      	cbz	r0, 8002d78 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d56:	b91b      	cbnz	r3, 8002d60 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002d5c:	f001 fbc0 	bl	80044e0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d60:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d62:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d68:	1d21      	adds	r1, r4, #4
 8002d6a:	f7ff ffb1 	bl	8002cd0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d6e:	2301      	movs	r3, #1
  return HAL_OK;
 8002d70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002d72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002d76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d78:	2001      	movs	r0, #1
}
 8002d7a:	bd10      	pop	{r4, pc}

08002d7c <HAL_TIM_OC_Init>:
{
 8002d7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d7e:	4604      	mov	r4, r0
 8002d80:	b1a0      	cbz	r0, 8002dac <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d8a:	b91b      	cbnz	r3, 8002d94 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8002d90:	f7ff fe3d 	bl	8002a0e <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d96:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002d98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d9c:	1d21      	adds	r1, r4, #4
 8002d9e:	f7ff ff97 	bl	8002cd0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002da2:	2301      	movs	r3, #1
  return HAL_OK;
 8002da4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002da6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002daa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dac:	2001      	movs	r0, #1
}
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <HAL_TIM_PWM_Init>:
{
 8002db0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002db2:	4604      	mov	r4, r0
 8002db4:	b1a0      	cbz	r0, 8002de0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002db6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dbe:	b91b      	cbnz	r3, 8002dc8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002dc0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002dc4:	f7ff fe24 	bl	8002a10 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002dc8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dca:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002dcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd0:	1d21      	adds	r1, r4, #4
 8002dd2:	f7ff ff7d 	bl	8002cd0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002dd6:	2301      	movs	r3, #1
  return HAL_OK;
 8002dd8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002dda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002dde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
}
 8002de2:	bd10      	pop	{r4, pc}

08002de4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de4:	6a03      	ldr	r3, [r0, #32]
{
 8002de6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de8:	f023 0310 	bic.w	r3, r3, #16
 8002dec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002dee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002df0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002df2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002df4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002df6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002dfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002dfe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002e00:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002e04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e08:	4d0b      	ldr	r5, [pc, #44]	; (8002e38 <TIM_OC2_SetConfig+0x54>)
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	d10d      	bne.n	8002e2a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002e0e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002e14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002e18:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002e1a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e1c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002e20:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002e26:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002e2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e2c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e2e:	684a      	ldr	r2, [r1, #4]
 8002e30:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e32:	6203      	str	r3, [r0, #32]
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00

08002e3c <HAL_TIM_OC_ConfigChannel>:
{
 8002e3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e3e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8002e42:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f04f 0002 	mov.w	r0, #2
 8002e4a:	d018      	beq.n	8002e7e <HAL_TIM_OC_ConfigChannel+0x42>
 8002e4c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_LOCK(htim);
 8002e52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002e56:	461d      	mov	r5, r3
  switch (Channel)
 8002e58:	2a0c      	cmp	r2, #12
 8002e5a:	d80b      	bhi.n	8002e74 <HAL_TIM_OC_ConfigChannel+0x38>
 8002e5c:	e8df f002 	tbb	[pc, r2]
 8002e60:	0a0a0a07 	.word	0x0a0a0a07
 8002e64:	0a0a0a10 	.word	0x0a0a0a10
 8002e68:	0a0a0a14 	.word	0x0a0a0a14
 8002e6c:	18          	.byte	0x18
 8002e6d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	f7ff fd4e 	bl	8002910 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8002e74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e76:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002e7a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	f7ff ffaf 	bl	8002de4 <TIM_OC2_SetConfig>
    break;
 8002e86:	e7f5      	b.n	8002e74 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	f7ff fd69 	bl	8002960 <TIM_OC3_SetConfig>
    break;
 8002e8e:	e7f1      	b.n	8002e74 <HAL_TIM_OC_ConfigChannel+0x38>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	f7ff fd8f 	bl	80029b4 <TIM_OC4_SetConfig>
    break;
 8002e96:	e7ed      	b.n	8002e74 <HAL_TIM_OC_ConfigChannel+0x38>

08002e98 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e98:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e9a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8002e9e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f04f 0002 	mov.w	r0, #2
 8002ea6:	d025      	beq.n	8002ef4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002ea8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002eaa:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_LOCK(htim);
 8002eae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  switch (Channel)
 8002eb2:	2a0c      	cmp	r2, #12
 8002eb4:	d818      	bhi.n	8002ee8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002eb6:	e8df f002 	tbb	[pc, r2]
 8002eba:	1707      	.short	0x1707
 8002ebc:	171e1717 	.word	0x171e1717
 8002ec0:	172f1717 	.word	0x172f1717
 8002ec4:	1717      	.short	0x1717
 8002ec6:	40          	.byte	0x40
 8002ec7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	f7ff fd21 	bl	8002910 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ece:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ed0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	f042 0208 	orr.w	r2, r2, #8
 8002ed8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	f022 0204 	bic.w	r2, r2, #4
 8002ee0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002ee6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002eea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002ef0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef6:	6820      	ldr	r0, [r4, #0]
 8002ef8:	f7ff ff74 	bl	8002de4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002efc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002efe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f16:	e7e6      	b.n	8002ee6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	f7ff fd21 	bl	8002960 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f1e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f20:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	f042 0208 	orr.w	r2, r2, #8
 8002f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002f36:	61da      	str	r2, [r3, #28]
    break;
 8002f38:	e7d6      	b.n	8002ee8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f3a:	6820      	ldr	r0, [r4, #0]
 8002f3c:	f7ff fd3a 	bl	80029b4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f40:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002f42:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f5a:	e7ec      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f5c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002f5e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f60:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002f62:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002f64:	ea23 0304 	bic.w	r3, r3, r4
 8002f68:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002f6a:	6a03      	ldr	r3, [r0, #32]
 8002f6c:	408a      	lsls	r2, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	6202      	str	r2, [r0, #32]
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <HAL_TIM_PWM_Start>:
{
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	f7ff ffee 	bl	8002f5c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	4a06      	ldr	r2, [pc, #24]	; (8002f9c <HAL_TIM_PWM_Start+0x28>)
}
 8002f84:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f86:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002f88:	bf02      	ittt	eq
 8002f8a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002f8c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002f90:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bd10      	pop	{r4, pc}
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002fa0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8002fa4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	f04f 0302 	mov.w	r3, #2
 8002fac:	d018      	beq.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002fae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002fb2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002fb6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002fb8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002fba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fbe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4322      	orrs	r2, r4
 8002fc4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002fe0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002fe2:	bd10      	pop	{r4, pc}

08002fe4 <HAL_TIMEx_CommutationCallback>:
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	4770      	bx	lr

08002fe8 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fec:	6805      	ldr	r5, [r0, #0]
 8002fee:	68c2      	ldr	r2, [r0, #12]
 8002ff0:	692b      	ldr	r3, [r5, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002ff2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002ffc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002ffe:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8003000:	430b      	orrs	r3, r1
 8003002:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8003004:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003008:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 800300c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800300e:	4313      	orrs	r3, r2
 8003010:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003012:	696b      	ldr	r3, [r5, #20]
 8003014:	6982      	ldr	r2, [r0, #24]
 8003016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301a:	4313      	orrs	r3, r2
 800301c:	616b      	str	r3, [r5, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 800301e:	4b40      	ldr	r3, [pc, #256]	; (8003120 <UART_SetConfig+0x138>)
{
 8003020:	4681      	mov	r9, r0
  if((huart->Instance == USART1))
 8003022:	429d      	cmp	r5, r3
 8003024:	f04f 0419 	mov.w	r4, #25
 8003028:	d146      	bne.n	80030b8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800302a:	f7ff fb73 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 800302e:	fb04 f300 	mul.w	r3, r4, r0
 8003032:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003036:	f04f 0864 	mov.w	r8, #100	; 0x64
 800303a:	00b6      	lsls	r6, r6, #2
 800303c:	fbb3 f3f6 	udiv	r3, r3, r6
 8003040:	fbb3 f3f8 	udiv	r3, r3, r8
 8003044:	011e      	lsls	r6, r3, #4
 8003046:	f7ff fb65 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 800304a:	4360      	muls	r0, r4
 800304c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fbb0 f7f3 	udiv	r7, r0, r3
 8003056:	f7ff fb5d 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 800305a:	4360      	muls	r0, r4
 800305c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	fbb3 f3f8 	udiv	r3, r3, r8
 800306a:	fb08 7313 	mls	r3, r8, r3, r7
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	fbb3 f3f8 	udiv	r3, r3, r8
 8003076:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800307a:	f7ff fb4b 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 800307e:	4360      	muls	r0, r4
 8003080:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003084:	0092      	lsls	r2, r2, #2
 8003086:	fbb0 faf2 	udiv	sl, r0, r2
 800308a:	f7ff fb43 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800308e:	4360      	muls	r0, r4
 8003090:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	fbb3 f3f8 	udiv	r3, r3, r8
 800309e:	fb08 a313 	mls	r3, r8, r3, sl
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	3332      	adds	r3, #50	; 0x32
 80030a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	433b      	orrs	r3, r7
 80030b0:	4433      	add	r3, r6
 80030b2:	60ab      	str	r3, [r5, #8]
 80030b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b8:	f7ff fb14 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80030bc:	fb04 f300 	mul.w	r3, r4, r0
 80030c0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80030c4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80030c8:	00b6      	lsls	r6, r6, #2
 80030ca:	fbb3 f3f6 	udiv	r3, r3, r6
 80030ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80030d2:	011e      	lsls	r6, r3, #4
 80030d4:	f7ff fb06 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80030d8:	4360      	muls	r0, r4
 80030da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fbb0 f7f3 	udiv	r7, r0, r3
 80030e4:	f7ff fafe 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80030e8:	4360      	muls	r0, r4
 80030ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80030f8:	fb08 7313 	mls	r3, r8, r3, r7
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	fbb3 f3f8 	udiv	r3, r3, r8
 8003104:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003108:	f7ff faec 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 800310c:	4360      	muls	r0, r4
 800310e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	fbb0 faf2 	udiv	sl, r0, r2
 8003118:	f7ff fae4 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 800311c:	e7b7      	b.n	800308e <UART_SetConfig+0xa6>
 800311e:	bf00      	nop
 8003120:	40013800 	.word	0x40013800

08003124 <HAL_UART_Init>:
{
 8003124:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003126:	4604      	mov	r4, r0
 8003128:	b330      	cbz	r0, 8003178 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800312a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800312e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003132:	b91b      	cbnz	r3, 800313c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003134:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003138:	f001 fa1e 	bl	8004578 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 800313c:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800313e:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8003140:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003144:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003146:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800314c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800314e:	f7ff ff4b 	bl	8002fe8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003152:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800315c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003164:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800316c:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 800316e:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8003172:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003176:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	bd10      	pop	{r4, pc}

0800317c <HAL_UART_Transmit_DMA>:
{
 800317c:	4613      	mov	r3, r2
  tmp_state = huart->State;
 800317e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
{
 8003182:	b510      	push	{r4, lr}
  tmp_state = huart->State;
 8003184:	b2d2      	uxtb	r2, r2
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003186:	2a01      	cmp	r2, #1
{
 8003188:	4604      	mov	r4, r0
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800318a:	d001      	beq.n	8003190 <HAL_UART_Transmit_DMA+0x14>
 800318c:	2a22      	cmp	r2, #34	; 0x22
 800318e:	d12e      	bne.n	80031ee <HAL_UART_Transmit_DMA+0x72>
    if((pData == NULL ) || (Size == 0)) 
 8003190:	b359      	cbz	r1, 80031ea <HAL_UART_Transmit_DMA+0x6e>
 8003192:	b353      	cbz	r3, 80031ea <HAL_UART_Transmit_DMA+0x6e>
    __HAL_LOCK(huart);
 8003194:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003198:	2a01      	cmp	r2, #1
 800319a:	d028      	beq.n	80031ee <HAL_UART_Transmit_DMA+0x72>
 800319c:	2201      	movs	r2, #1
 800319e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	2200      	movs	r2, #0
 80031a4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80031a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80031ac:	2a22      	cmp	r2, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80031ae:	bf0c      	ite	eq
 80031b0:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80031b2:	2212      	movne	r2, #18
 80031b4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <HAL_UART_Transmit_DMA+0x78>)
    huart->TxXferSize = Size;
 80031ba:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80031bc:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 80031be:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031c0:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031c2:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <HAL_UART_Transmit_DMA+0x7c>)
 80031c4:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031c6:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_UART_Transmit_DMA+0x80>)
 80031c8:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	3204      	adds	r2, #4
 80031ce:	f7fe fb17 	bl	8001800 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80031d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 80031d6:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031e2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80031e4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80031e8:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80031ea:	2001      	movs	r0, #1
 80031ec:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80031ee:	2002      	movs	r0, #2
}
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	bf00      	nop
 80031f4:	0800327f 	.word	0x0800327f
 80031f8:	080032ad 	.word	0x080032ad
 80031fc:	080032f7 	.word	0x080032f7

08003200 <HAL_UART_Receive_DMA>:
{
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8003204:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 8003208:	4613      	mov	r3, r2
  tmp_state = huart->State;
 800320a:	b2c0      	uxtb	r0, r0
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800320c:	2801      	cmp	r0, #1
 800320e:	d001      	beq.n	8003214 <HAL_UART_Receive_DMA+0x14>
 8003210:	2812      	cmp	r0, #18
 8003212:	d12b      	bne.n	800326c <HAL_UART_Receive_DMA+0x6c>
    if((pData == NULL ) || (Size == 0))
 8003214:	b341      	cbz	r1, 8003268 <HAL_UART_Receive_DMA+0x68>
 8003216:	b33b      	cbz	r3, 8003268 <HAL_UART_Receive_DMA+0x68>
    __HAL_LOCK(huart);
 8003218:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800321c:	2a01      	cmp	r2, #1
 800321e:	d025      	beq.n	800326c <HAL_UART_Receive_DMA+0x6c>
 8003220:	2201      	movs	r2, #1
 8003222:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003226:	2200      	movs	r2, #0
 8003228:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800322a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800322e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8003230:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003232:	bf0c      	ite	eq
 8003234:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003236:	2222      	movne	r2, #34	; 0x22
 8003238:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800323c:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <HAL_UART_Receive_DMA+0x70>)
    huart->pRxBuffPtr = pData;
 800323e:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8003240:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003242:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <HAL_UART_Receive_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003246:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003248:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_UART_Receive_DMA+0x78>)
 800324c:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800324e:	460a      	mov	r2, r1
 8003250:	1d29      	adds	r1, r5, #4
 8003252:	f7fe fad5 	bl	8001800 <HAL_DMA_Start_IT>
    __HAL_UNLOCK(huart);
 8003256:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	6953      	ldr	r3, [r2, #20]
 800325c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003260:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(huart);
 8003262:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003266:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003268:	2001      	movs	r0, #1
 800326a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800326c:	2002      	movs	r0, #2
}
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	080032b7 	.word	0x080032b7
 8003274:	080032eb 	.word	0x080032eb
 8003278:	080032f7 	.word	0x080032f7

0800327c <HAL_UART_TxCpltCallback>:
 800327c:	4770      	bx	lr

0800327e <UART_DMATransmitCplt>:
{
 800327e:	b508      	push	{r3, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003280:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003282:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f013 0320 	ands.w	r3, r3, #32
 800328a:	d10a      	bne.n	80032a2 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0;
 800328c:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003296:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7ff ffea 	bl	800327c <HAL_UART_TxCpltCallback>
 80032a8:	bd08      	pop	{r3, pc}

080032aa <HAL_UART_TxHalfCpltCallback>:
 80032aa:	4770      	bx	lr

080032ac <UART_DMATxHalfCplt>:
{
 80032ac:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80032ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80032b0:	f7ff fffb 	bl	80032aa <HAL_UART_TxHalfCpltCallback>
 80032b4:	bd08      	pop	{r3, pc}

080032b6 <UART_DMAReceiveCplt>:
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80032b6:	6802      	ldr	r2, [r0, #0]
{
 80032b8:	b508      	push	{r3, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80032ba:	6812      	ldr	r2, [r2, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80032be:	f012 0220 	ands.w	r2, r2, #32
 80032c2:	d10d      	bne.n	80032e0 <UART_DMAReceiveCplt+0x2a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c4:	6819      	ldr	r1, [r3, #0]
    huart->RxXferCount = 0;
 80032c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c8:	694a      	ldr	r2, [r1, #20]
 80032ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ce:	614a      	str	r2, [r1, #20]
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80032d0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80032d4:	2a32      	cmp	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80032d6:	bf0c      	ite	eq
 80032d8:	2212      	moveq	r2, #18
      huart->State = HAL_UART_STATE_READY;
 80032da:	2201      	movne	r2, #1
 80032dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_RxCpltCallback(huart);
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f85f 	bl	80043a4 <HAL_UART_RxCpltCallback>
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <HAL_UART_RxHalfCpltCallback>:
 80032e8:	4770      	bx	lr

080032ea <UART_DMARxHalfCplt>:
{
 80032ea:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80032ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80032ee:	f7ff fffb 	bl	80032e8 <HAL_UART_RxHalfCpltCallback>
 80032f2:	bd08      	pop	{r3, pc}

080032f4 <HAL_UART_ErrorCallback>:
{
 80032f4:	4770      	bx	lr

080032f6 <UART_DMAError>:
{
 80032f6:	b508      	push	{r3, lr}
  huart->RxXferCount = 0;
 80032f8:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80032fc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 80032fe:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 8003300:	2301      	movs	r3, #1
 8003302:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003306:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800330e:	f7ff fff1 	bl	80032f4 <HAL_UART_ErrorCallback>
 8003312:	bd08      	pop	{r3, pc}

08003314 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003314:	6802      	ldr	r2, [r0, #0]
{
 8003316:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003318:	6811      	ldr	r1, [r2, #0]
{
 800331a:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800331c:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800331e:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003320:	d505      	bpl.n	800332e <HAL_UART_IRQHandler+0x1a>
 8003322:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003324:	bf42      	ittt	mi
 8003326:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8003328:	f043 0301 	orrmi.w	r3, r3, #1
 800332c:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800332e:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003330:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003332:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003334:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003338:	d504      	bpl.n	8003344 <HAL_UART_IRQHandler+0x30>
 800333a:	b11b      	cbz	r3, 8003344 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800333c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800333e:	f041 0104 	orr.w	r1, r1, #4
 8003342:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8003344:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003346:	0749      	lsls	r1, r1, #29
 8003348:	d504      	bpl.n	8003354 <HAL_UART_IRQHandler+0x40>
 800334a:	b11b      	cbz	r3, 8003354 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800334c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800334e:	f041 0102 	orr.w	r1, r1, #2
 8003352:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8003354:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003356:	0708      	lsls	r0, r1, #28
 8003358:	d504      	bpl.n	8003364 <HAL_UART_IRQHandler+0x50>
 800335a:	b11b      	cbz	r3, 8003364 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8003364:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8003366:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003368:	0689      	lsls	r1, r1, #26
 800336a:	d533      	bpl.n	80033d4 <HAL_UART_IRQHandler+0xc0>
 800336c:	0698      	lsls	r0, r3, #26
 800336e:	d531      	bpl.n	80033d4 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 8003370:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8003374:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003378:	2b22      	cmp	r3, #34	; 0x22
 800337a:	d12b      	bne.n	80033d4 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800337c:	68a3      	ldr	r3, [r4, #8]
 800337e:	6921      	ldr	r1, [r4, #16]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003386:	d176      	bne.n	8003476 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003388:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800338a:	2900      	cmp	r1, #0
 800338c:	d16f      	bne.n	800346e <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800338e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003392:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8003396:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8003398:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800339a:	3b01      	subs	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80033a0:	b9c3      	cbnz	r3, 80033d4 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033a2:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 80033a4:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	f022 0220 	bic.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80033ae:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80033b2:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033b4:	bf17      	itett	ne
 80033b6:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 80033b8:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033ba:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 80033be:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033c0:	bf1f      	itttt	ne
 80033c2:	695a      	ldrne	r2, [r3, #20]
 80033c4:	f022 0201 	bicne.w	r2, r2, #1
 80033c8:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 80033ca:	2301      	movne	r3, #1
 80033cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 80033d0:	f000 ffe8 	bl	80043a4 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80033d8:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80033da:	0609      	lsls	r1, r1, #24
 80033dc:	d522      	bpl.n	8003424 <HAL_UART_IRQHandler+0x110>
 80033de:	0610      	lsls	r0, r2, #24
 80033e0:	d520      	bpl.n	8003424 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 80033e2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80033e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80033ea:	2a12      	cmp	r2, #18
 80033ec:	d11a      	bne.n	8003424 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ee:	68a2      	ldr	r2, [r4, #8]
 80033f0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80033f4:	6a22      	ldr	r2, [r4, #32]
 80033f6:	d14c      	bne.n	8003492 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033f8:	8811      	ldrh	r1, [r2, #0]
 80033fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80033fe:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003400:	6921      	ldr	r1, [r4, #16]
 8003402:	2900      	cmp	r1, #0
 8003404:	d143      	bne.n	800348e <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8003406:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8003408:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 800340a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800340c:	3a01      	subs	r2, #1
 800340e:	b292      	uxth	r2, r2
 8003410:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003412:	b93a      	cbnz	r2, 8003424 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003422:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8003424:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8003426:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003428:	0649      	lsls	r1, r1, #25
 800342a:	d510      	bpl.n	800344e <HAL_UART_IRQHandler+0x13a>
 800342c:	0652      	lsls	r2, r2, #25
 800342e:	d50e      	bpl.n	800344e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003430:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003432:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800343a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800343e:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8003440:	bf0c      	ite	eq
 8003442:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8003444:	2301      	movne	r3, #1
 8003446:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800344a:	f7ff ff17 	bl	800327c <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800344e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003450:	b15b      	cbz	r3, 800346a <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8003452:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8003454:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	9201      	str	r2, [sp, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8003460:	2301      	movs	r3, #1
 8003462:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8003466:	f7ff ff45 	bl	80032f4 <HAL_UART_ErrorCallback>
}
 800346a:	b002      	add	sp, #8
 800346c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	f823 2b01 	strh.w	r2, [r3], #1
 8003474:	e78f      	b.n	8003396 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003476:	b921      	cbnz	r1, 8003482 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003478:	1c59      	adds	r1, r3, #1
 800347a:	6852      	ldr	r2, [r2, #4]
 800347c:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e78a      	b.n	8003398 <HAL_UART_IRQHandler+0x84>
 8003482:	6852      	ldr	r2, [r2, #4]
 8003484:	1c59      	adds	r1, r3, #1
 8003486:	62a1      	str	r1, [r4, #40]	; 0x28
 8003488:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800348c:	e7f7      	b.n	800347e <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 800348e:	3201      	adds	r2, #1
 8003490:	e7ba      	b.n	8003408 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003492:	1c51      	adds	r1, r2, #1
 8003494:	6221      	str	r1, [r4, #32]
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e7b6      	b.n	800340a <HAL_UART_IRQHandler+0xf6>

0800349c <UART0_emulate_isr.part.0>:
			marBFM = 0;
		}
	}
}

unsigned char UART0_emulate_isr(char RI0,unsigned char SBUF0,UART_HandleTypeDef huart3)
 800349c:	b510      	push	{r4, lr}
{
	unsigned char SBUF1=0;
	if (RI0)  //-------RX Get Byte-------//
	{
		BuferFromModem [wBFM++] = SBUF0;
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <UART0_emulate_isr.part.0+0x20>)
 80034a0:	4c07      	ldr	r4, [pc, #28]	; (80034c0 <UART0_emulate_isr.part.0+0x24>)
 80034a2:	7811      	ldrb	r1, [r2, #0]
 80034a4:	1c4b      	adds	r3, r1, #1
 80034a6:	b2db      	uxtb	r3, r3
		if(wBFM >= NBFM)
 80034a8:	2b31      	cmp	r3, #49	; 0x31
		BuferFromModem [wBFM++] = SBUF0;
 80034aa:	7013      	strb	r3, [r2, #0]
 80034ac:	5460      	strb	r0, [r4, r1]
		if(wBFM >= NBFM)
 80034ae:	d904      	bls.n	80034ba <UART0_emulate_isr.part.0+0x1e>
		{
			wBFM = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	7013      	strb	r3, [r2, #0]
			marBFM = 1;
 80034b4:	2201      	movs	r2, #1
 80034b6:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <UART0_emulate_isr.part.0+0x28>)
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	bd10      	pop	{r4, pc}
 80034bc:	20000038 	.word	0x20000038
 80034c0:	200002a7 	.word	0x200002a7
 80034c4:	2000002e 	.word	0x2000002e

080034c8 <processReadUART>:
	if(rBFM < (wBFM+marBFM*NBFM))
 80034c8:	2132      	movs	r1, #50	; 0x32
{
 80034ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(rBFM < (wBFM+marBFM*NBFM))
 80034cc:	4a3c      	ldr	r2, [pc, #240]	; (80035c0 <processReadUART+0xf8>)
 80034ce:	4e3d      	ldr	r6, [pc, #244]	; (80035c4 <processReadUART+0xfc>)
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	7833      	ldrb	r3, [r6, #0]
 80034d4:	4d3c      	ldr	r5, [pc, #240]	; (80035c8 <processReadUART+0x100>)
 80034d6:	fb01 2303 	mla	r3, r1, r3, r2
 80034da:	782c      	ldrb	r4, [r5, #0]
 80034dc:	429c      	cmp	r4, r3
 80034de:	da6d      	bge.n	80035bc <processReadUART+0xf4>
		if ((BuferFromModem[rBFM] & 0xC0) == 0x40)
 80034e0:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <processReadUART+0x104>)
 80034e2:	f8df e108 	ldr.w	lr, [pc, #264]	; 80035ec <processReadUART+0x124>
 80034e6:	5d1b      	ldrb	r3, [r3, r4]
 80034e8:	4f39      	ldr	r7, [pc, #228]	; (80035d0 <processReadUART+0x108>)
 80034ea:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80034ee:	2a40      	cmp	r2, #64	; 0x40
 80034f0:	d107      	bne.n	8003502 <processReadUART+0x3a>
			nByte = 0;
 80034f2:	2200      	movs	r2, #0
			NPackage = BuferFromModem[rBFM] & 0x3f;
 80034f4:	4937      	ldr	r1, [pc, #220]	; (80035d4 <processReadUART+0x10c>)
			nByte = 0;
 80034f6:	f88e 2000 	strb.w	r2, [lr]
			KontrSumma = 0;
 80034fa:	703a      	strb	r2, [r7, #0]
			NPackage = BuferFromModem[rBFM] & 0x3f;
 80034fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003500:	700a      	strb	r2, [r1, #0]
		RK_code[nByte] = BuferFromModem[rBFM] & 0x7f;
 8003502:	f89e 2000 	ldrb.w	r2, [lr]
 8003506:	4934      	ldr	r1, [pc, #208]	; (80035d8 <processReadUART+0x110>)
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	548b      	strb	r3, [r1, r2]
		if (++nByte > 65)
 800350e:	3201      	adds	r2, #1
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	2a41      	cmp	r2, #65	; 0x41
		nByte = 65;
 8003514:	bf88      	it	hi
 8003516:	2241      	movhi	r2, #65	; 0x41
 8003518:	f88e 2000 	strb.w	r2, [lr]
		KontrSumma = KontrSumma^RK_code[nByte];
 800351c:	7838      	ldrb	r0, [r7, #0]
		if ( (nByte == 3) && (KontrSumma == 0) )
 800351e:	f89e 2000 	ldrb.w	r2, [lr]
		KontrSumma = KontrSumma^RK_code[nByte];
 8003522:	ea83 0c00 	eor.w	ip, r3, r0
		if ( (nByte == 3) && (KontrSumma == 0) )
 8003526:	2a03      	cmp	r2, #3
		KontrSumma = KontrSumma^RK_code[nByte];
 8003528:	f887 c000 	strb.w	ip, [r7]
		if ( (nByte == 3) && (KontrSumma == 0) )
 800352c:	d132      	bne.n	8003594 <processReadUART+0xcc>
 800352e:	4283      	cmp	r3, r0
 8003530:	d10d      	bne.n	800354e <processReadUART+0x86>
			if (NPackage == 1)
 8003532:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <processReadUART+0x10c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <processReadUART+0x78>
				rgAnswer = 4;
 800353a:	4a28      	ldr	r2, [pc, #160]	; (80035dc <processReadUART+0x114>)
 800353c:	7013      	strb	r3, [r2, #0]
 800353e:	e006      	b.n	800354e <processReadUART+0x86>
			if (NPackage == 2)//start dvs
 8003540:	2b02      	cmp	r3, #2
 8003542:	d10a      	bne.n	800355a <processReadUART+0x92>
				rgAnswer = 2;
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <processReadUART+0x114>)
 8003546:	7013      	strb	r3, [r2, #0]
				startDvs=1;
 8003548:	2201      	movs	r2, #1
				startDvs=0;
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <processReadUART+0x118>)
 800354c:	701a      	strb	r2, [r3, #0]
		rBFM++;
 800354e:	3401      	adds	r4, #1
 8003550:	b2e4      	uxtb	r4, r4
		if(rBFM >= NBFM)
 8003552:	2c31      	cmp	r4, #49	; 0x31
 8003554:	d82f      	bhi.n	80035b6 <processReadUART+0xee>
		rBFM++;
 8003556:	702c      	strb	r4, [r5, #0]
 8003558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (NPackage == 3)//stop dvs
 800355a:	2b03      	cmp	r3, #3
 800355c:	d103      	bne.n	8003566 <processReadUART+0x9e>
				rgAnswer = 3;
 800355e:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <processReadUART+0x114>)
 8003560:	7013      	strb	r3, [r2, #0]
				startDvs=0;
 8003562:	2200      	movs	r2, #0
 8003564:	e7f1      	b.n	800354a <processReadUART+0x82>
			if (NPackage == 4)//ICE telemetry
 8003566:	2b04      	cmp	r3, #4
 8003568:	d0e7      	beq.n	800353a <processReadUART+0x72>
			if (NPackage == 5)//ICE injector ++
 800356a:	2b05      	cmp	r3, #5
 800356c:	d108      	bne.n	8003580 <processReadUART+0xb8>
				rgAnswer = 5;
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <processReadUART+0x114>)
				injector_pwm+=10;
 8003570:	4f1c      	ldr	r7, [pc, #112]	; (80035e4 <processReadUART+0x11c>)
				rgAnswer = 5;
 8003572:	7013      	strb	r3, [r2, #0]
				injector_pwm+=10;
 8003574:	491c      	ldr	r1, [pc, #112]	; (80035e8 <processReadUART+0x120>)
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f7fd fafe 	bl	8000b78 <__addsf3>
				injector_pwm-=10;
 800357c:	6038      	str	r0, [r7, #0]
 800357e:	e7e6      	b.n	800354e <processReadUART+0x86>
			if (NPackage == 6)//ICE injector --
 8003580:	2b06      	cmp	r3, #6
 8003582:	d1e4      	bne.n	800354e <processReadUART+0x86>
				rgAnswer = 6;
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <processReadUART+0x114>)
				injector_pwm-=10;
 8003586:	4f17      	ldr	r7, [pc, #92]	; (80035e4 <processReadUART+0x11c>)
				rgAnswer = 6;
 8003588:	7013      	strb	r3, [r2, #0]
				injector_pwm-=10;
 800358a:	4917      	ldr	r1, [pc, #92]	; (80035e8 <processReadUART+0x120>)
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f7fd faf1 	bl	8000b74 <__aeabi_fsub>
 8003592:	e7f3      	b.n	800357c <processReadUART+0xb4>
		if ( (nByte == 4) && (KontrSumma == 0) )
 8003594:	2a04      	cmp	r2, #4
 8003596:	d1da      	bne.n	800354e <processReadUART+0x86>
 8003598:	4283      	cmp	r3, r0
 800359a:	d1d8      	bne.n	800354e <processReadUART+0x86>
			if (NPackage == 7)//ICE injector set
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <processReadUART+0x10c>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b07      	cmp	r3, #7
 80035a2:	d1d4      	bne.n	800354e <processReadUART+0x86>
				injector_pwm= ((int)RK_code[2])<<7 | (int)RK_code[3];
 80035a4:	78cb      	ldrb	r3, [r1, #3]
 80035a6:	7888      	ldrb	r0, [r1, #2]
 80035a8:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80035ac:	f7fd fb98 	bl	8000ce0 <__aeabi_i2f>
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <processReadUART+0x11c>)
 80035b2:	6018      	str	r0, [r3, #0]
 80035b4:	e7cb      	b.n	800354e <processReadUART+0x86>
			rBFM = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	702b      	strb	r3, [r5, #0]
			marBFM = 0;
 80035ba:	7033      	strb	r3, [r6, #0]
 80035bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000038 	.word	0x20000038
 80035c4:	2000002e 	.word	0x2000002e
 80035c8:	20000030 	.word	0x20000030
 80035cc:	200002a7 	.word	0x200002a7
 80035d0:	2000002c 	.word	0x2000002c
 80035d4:	2000002d 	.word	0x2000002d
 80035d8:	200001e4 	.word	0x200001e4
 80035dc:	200002a5 	.word	0x200002a5
 80035e0:	20000090 	.word	0x20000090
 80035e4:	20000000 	.word	0x20000000
 80035e8:	41200000 	.word	0x41200000
 80035ec:	2000002f 	.word	0x2000002f

080035f0 <OutModem2>:
	BufferInModem[i] = Data | 0x80;
}
//------------------------------------------------------------------------------
void OutModem2(unsigned int Data, char i)
{
	BufferInModem[i] = (Data & 0x007f)| 0x80;
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <OutModem2+0x14>)
 80035f2:	f060 027f 	orn	r2, r0, #127	; 0x7f
	BufferInModem[i+1] = ((Data & 0x3f80) >> 7)| 0x80;
 80035f6:	09c0      	lsrs	r0, r0, #7
	BufferInModem[i] = (Data & 0x007f)| 0x80;
 80035f8:	545a      	strb	r2, [r3, r1]
	BufferInModem[i+1] = ((Data & 0x3f80) >> 7)| 0x80;
 80035fa:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80035fe:	440b      	add	r3, r1
 8003600:	7058      	strb	r0, [r3, #1]
 8003602:	4770      	bx	lr
 8003604:	20000334 	.word	0x20000334

08003608 <processWriteUART>:
{
 8003608:	b084      	sub	sp, #16
 800360a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360c:	ac06      	add	r4, sp, #24
 800360e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(flRun)
 8003612:	4b60      	ldr	r3, [pc, #384]	; (8003794 <processWriteUART+0x18c>)
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	b10a      	cbz	r2, 800361c <processWriteUART+0x14>
		flRun = 0;
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
	if(flTransmiter)
 800361c:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <processWriteUART+0x190>)
 800361e:	781d      	ldrb	r5, [r3, #0]
 8003620:	2d00      	cmp	r5, #0
 8003622:	f040 80b3 	bne.w	800378c <processWriteUART+0x184>
		if(rgAnswer == 1)
 8003626:	4e5d      	ldr	r6, [pc, #372]	; (800379c <processWriteUART+0x194>)
 8003628:	7837      	ldrb	r7, [r6, #0]
 800362a:	2f01      	cmp	r7, #1
 800362c:	d147      	bne.n	80036be <processWriteUART+0xb6>
			BufferInModem[0] = 1 | 0x40;
 800362e:	2341      	movs	r3, #65	; 0x41
 8003630:	4c5b      	ldr	r4, [pc, #364]	; (80037a0 <processWriteUART+0x198>)
			OutModem2( 100*bat, 1);
 8003632:	495c      	ldr	r1, [pc, #368]	; (80037a4 <processWriteUART+0x19c>)
			BufferInModem[0] = 1 | 0x40;
 8003634:	7023      	strb	r3, [r4, #0]
			OutModem2( 100*bat, 1);
 8003636:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <processWriteUART+0x1a0>)
			rgAnswer = 0;
 8003638:	7035      	strb	r5, [r6, #0]
			OutModem2( 100*bat, 1);
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	f7fd fba4 	bl	8000d88 <__aeabi_fmul>
 8003640:	f7fd fd68 	bl	8001114 <__aeabi_f2uiz>
 8003644:	4639      	mov	r1, r7
 8003646:	f7ff ffd3 	bl	80035f0 <OutModem2>
			OutModem2( 10*smoothCurrent, 3);
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <processWriteUART+0x1a4>)
 800364c:	4958      	ldr	r1, [pc, #352]	; (80037b0 <processWriteUART+0x1a8>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	f7fd fb9a 	bl	8000d88 <__aeabi_fmul>
 8003654:	f7fd fd5e 	bl	8001114 <__aeabi_f2uiz>
 8003658:	2103      	movs	r1, #3
 800365a:	f7ff ffc9 	bl	80035f0 <OutModem2>
			OutModem2( 10*cap, 5);
 800365e:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <processWriteUART+0x1ac>)
 8003660:	4953      	ldr	r1, [pc, #332]	; (80037b0 <processWriteUART+0x1a8>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f7fd fb90 	bl	8000d88 <__aeabi_fmul>
 8003668:	f7fd fd54 	bl	8001114 <__aeabi_f2uiz>
 800366c:	2105      	movs	r1, #5
 800366e:	f7ff ffbf 	bl	80035f0 <OutModem2>
			OutModem1( 4 | (char)flMem , 7);
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <processWriteUART+0x1b0>)
			BufferInModem[10] = 0;
 8003674:	72a5      	strb	r5, [r4, #10]
	BufferInModem[i] = Data | 0x80;
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	f063 037b 	orn	r3, r3, #123	; 0x7b
 800367c:	71e3      	strb	r3, [r4, #7]
			OutModem1( rst_src , 8);
 800367e:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <processWriteUART+0x1b4>)
	BufferInModem[i] = Data | 0x80;
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003686:	7223      	strb	r3, [r4, #8]
			OutModem1( rst_count , 9);
 8003688:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <processWriteUART+0x1b8>)
	BufferInModem[i] = Data | 0x80;
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003690:	7263      	strb	r3, [r4, #9]
				BufferInModem[10] = BufferInModem[10] ^ BufferInModem[i];
 8003692:	5d62      	ldrb	r2, [r4, r5]
 8003694:	7aa3      	ldrb	r3, [r4, #10]
			for (i = 0; i < 10; i++ )
 8003696:	3501      	adds	r5, #1
				BufferInModem[10] = BufferInModem[10] ^ BufferInModem[i];
 8003698:	4053      	eors	r3, r2
			for (i = 0; i < 10; i++ )
 800369a:	2d0a      	cmp	r5, #10
				BufferInModem[10] = BufferInModem[10] ^ BufferInModem[i];
 800369c:	72a3      	strb	r3, [r4, #10]
			for (i = 0; i < 10; i++ )
 800369e:	d1f8      	bne.n	8003692 <processWriteUART+0x8a>
	BufferInModem[i] = Data | 0x80;
 80036a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a4:	72a3      	strb	r3, [r4, #10]
			BufferInModem[11] = 0;
 80036a6:	2300      	movs	r3, #0
			r0 = 0;
 80036a8:	4a46      	ldr	r2, [pc, #280]	; (80037c4 <processWriteUART+0x1bc>)
			BufferInModem[11] = 0;
 80036aa:	72e3      	strb	r3, [r4, #11]
			r0 = 0;
 80036ac:	6013      	str	r3, [r2, #0]
			rk = 11;
 80036ae:	220b      	movs	r2, #11
 80036b0:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <processWriteUART+0x1c0>)
			HAL_UART_Transmit_DMA(&huart3, BufferInModem, 12);
 80036b2:	493b      	ldr	r1, [pc, #236]	; (80037a0 <processWriteUART+0x198>)
			rk = 11;
 80036b4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart3, BufferInModem, 12);
 80036b6:	a806      	add	r0, sp, #24
 80036b8:	220c      	movs	r2, #12
 80036ba:	f7ff fd5f 	bl	800317c <HAL_UART_Transmit_DMA>
		if(rgAnswer == 4)
 80036be:	7833      	ldrb	r3, [r6, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d163      	bne.n	800378c <processWriteUART+0x184>
			BufferInModem[0] = 4 | 0x40;
 80036c4:	2344      	movs	r3, #68	; 0x44
			rgAnswer = 0;
 80036c6:	2500      	movs	r5, #0
			BufferInModem[0] = 4 | 0x40;
 80036c8:	4c35      	ldr	r4, [pc, #212]	; (80037a0 <processWriteUART+0x198>)
			OutModem2( 100*bat, 1);
 80036ca:	4936      	ldr	r1, [pc, #216]	; (80037a4 <processWriteUART+0x19c>)
			BufferInModem[0] = 4 | 0x40;
 80036cc:	7023      	strb	r3, [r4, #0]
			OutModem2( 100*bat, 1);
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <processWriteUART+0x1a0>)
			rgAnswer = 0;
 80036d0:	7035      	strb	r5, [r6, #0]
			OutModem2( 100*bat, 1);
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	f7fd fb58 	bl	8000d88 <__aeabi_fmul>
 80036d8:	f7fd fd1c 	bl	8001114 <__aeabi_f2uiz>
 80036dc:	2101      	movs	r1, #1
 80036de:	f7ff ff87 	bl	80035f0 <OutModem2>
			OutModem2( 10*smoothCurrent, 3);
 80036e2:	4b32      	ldr	r3, [pc, #200]	; (80037ac <processWriteUART+0x1a4>)
 80036e4:	4932      	ldr	r1, [pc, #200]	; (80037b0 <processWriteUART+0x1a8>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	f7fd fb4e 	bl	8000d88 <__aeabi_fmul>
 80036ec:	f7fd fd12 	bl	8001114 <__aeabi_f2uiz>
 80036f0:	2103      	movs	r1, #3
 80036f2:	f7ff ff7d 	bl	80035f0 <OutModem2>
			OutModem2( 10*cap, 5);
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <processWriteUART+0x1ac>)
 80036f8:	492d      	ldr	r1, [pc, #180]	; (80037b0 <processWriteUART+0x1a8>)
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	f7fd fb44 	bl	8000d88 <__aeabi_fmul>
 8003700:	f7fd fd08 	bl	8001114 <__aeabi_f2uiz>
 8003704:	2105      	movs	r1, #5
 8003706:	f7ff ff73 	bl	80035f0 <OutModem2>
			OutModem2( 100*chgCurrSmooth, 7);
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <processWriteUART+0x1c4>)
 800370c:	4925      	ldr	r1, [pc, #148]	; (80037a4 <processWriteUART+0x19c>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f7fd fb3a 	bl	8000d88 <__aeabi_fmul>
 8003714:	f7fd fcfe 	bl	8001114 <__aeabi_f2uiz>
 8003718:	2107      	movs	r1, #7
 800371a:	f7ff ff69 	bl	80035f0 <OutModem2>
			OutModem2( 10*temperature, 9);
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <processWriteUART+0x1c8>)
 8003720:	4923      	ldr	r1, [pc, #140]	; (80037b0 <processWriteUART+0x1a8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	f7fd fb30 	bl	8000d88 <__aeabi_fmul>
 8003728:	f7fd fcf4 	bl	8001114 <__aeabi_f2uiz>
 800372c:	2109      	movs	r1, #9
 800372e:	f7ff ff5f 	bl	80035f0 <OutModem2>
			OutModem2( injector_pwm, 11);
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <processWriteUART+0x1cc>)
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f7fd fced 	bl	8001114 <__aeabi_f2uiz>
 800373a:	210b      	movs	r1, #11
 800373c:	f7ff ff58 	bl	80035f0 <OutModem2>
			OutModem1( startDvs , 13);
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <processWriteUART+0x1d0>)
			BufferInModem[16] = 0;
 8003742:	7425      	strb	r5, [r4, #16]
	BufferInModem[i] = Data | 0x80;
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800374a:	7363      	strb	r3, [r4, #13]
			OutModem1( rst_src , 14);
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <processWriteUART+0x1b4>)
	BufferInModem[i] = Data | 0x80;
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003754:	73a3      	strb	r3, [r4, #14]
			OutModem1( rst_count , 15);
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <processWriteUART+0x1b8>)
	BufferInModem[i] = Data | 0x80;
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800375e:	73e3      	strb	r3, [r4, #15]
			for (i = 0; i < 16; i++ )
 8003760:	462b      	mov	r3, r5
			BufferInModem[16] = BufferInModem[16] ^ BufferInModem[i];
 8003762:	5ce1      	ldrb	r1, [r4, r3]
 8003764:	7c22      	ldrb	r2, [r4, #16]
			for (i = 0; i < 16; i++ )
 8003766:	3301      	adds	r3, #1
			BufferInModem[16] = BufferInModem[16] ^ BufferInModem[i];
 8003768:	404a      	eors	r2, r1
			for (i = 0; i < 16; i++ )
 800376a:	2b10      	cmp	r3, #16
			BufferInModem[16] = BufferInModem[16] ^ BufferInModem[i];
 800376c:	7422      	strb	r2, [r4, #16]
			for (i = 0; i < 16; i++ )
 800376e:	d1f8      	bne.n	8003762 <processWriteUART+0x15a>
			BufferInModem[17] = 0;
 8003770:	2300      	movs	r3, #0
	BufferInModem[i] = Data | 0x80;
 8003772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003776:	7422      	strb	r2, [r4, #16]
			r0 = 0;
 8003778:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <processWriteUART+0x1bc>)
			BufferInModem[17] = 0;
 800377a:	7463      	strb	r3, [r4, #17]
			r0 = 0;
 800377c:	6013      	str	r3, [r2, #0]
			rk = 17;
 800377e:	2211      	movs	r2, #17
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <processWriteUART+0x1c0>)
			HAL_UART_Transmit_DMA(&huart3, BufferInModem, 17);
 8003782:	4907      	ldr	r1, [pc, #28]	; (80037a0 <processWriteUART+0x198>)
 8003784:	a806      	add	r0, sp, #24
			rk = 17;
 8003786:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart3, BufferInModem, 17);
 8003788:	f7ff fcf8 	bl	800317c <HAL_UART_Transmit_DMA>
}
 800378c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003790:	b004      	add	sp, #16
 8003792:	4770      	bx	lr
 8003794:	200002a6 	.word	0x200002a6
 8003798:	200003ac 	.word	0x200003ac
 800379c:	200002a5 	.word	0x200002a5
 80037a0:	20000334 	.word	0x20000334
 80037a4:	42c80000 	.word	0x42c80000
 80037a8:	200002f4 	.word	0x200002f4
 80037ac:	20000264 	.word	0x20000264
 80037b0:	41200000 	.word	0x41200000
 80037b4:	20000374 	.word	0x20000374
 80037b8:	20000120 	.word	0x20000120
 80037bc:	200002d9 	.word	0x200002d9
 80037c0:	20000031 	.word	0x20000031
 80037c4:	20000164 	.word	0x20000164
 80037c8:	200000a4 	.word	0x200000a4
 80037cc:	20000124 	.word	0x20000124
 80037d0:	20000004 	.word	0x20000004
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000090 	.word	0x20000090

080037dc <pushValuesToOldSES>:
/* USER CODE BEGIN 0 */
//#define SAINQUAKE

void pushValuesToOldSES()
{
	bat=val.u_bat;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <pushValuesToOldSES+0x1c>)
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <pushValuesToOldSES+0x20>)
 80037e0:	6959      	ldr	r1, [r3, #20]
 80037e2:	6011      	str	r1, [r2, #0]
	smoothCurrent=val.smoothCurrent;
 80037e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80037e6:	4a06      	ldr	r2, [pc, #24]	; (8003800 <pushValuesToOldSES+0x24>)
 80037e8:	6011      	str	r1, [r2, #0]
	cap=val.cap;
 80037ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ec:	4a05      	ldr	r2, [pc, #20]	; (8003804 <pushValuesToOldSES+0x28>)
 80037ee:	6011      	str	r1, [r2, #0]
	chgCurrSmooth=val.chgCurrSmooth;
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <pushValuesToOldSES+0x2c>)
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4770      	bx	lr
 80037f8:	2000022c 	.word	0x2000022c
 80037fc:	200002f4 	.word	0x200002f4
 8003800:	20000264 	.word	0x20000264
 8003804:	20000374 	.word	0x20000374
 8003808:	20000124 	.word	0x20000124
 800380c:	00000000 	.word	0x00000000

08003810 <HAL_TIM_PeriodElapsedCallback>:

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (htim->Instance==TIM2) //check if the interrupt comes from TIM3
 8003814:	6803      	ldr	r3, [r0, #0]
{
 8003816:	b085      	sub	sp, #20
	if (htim->Instance==TIM2) //check if the interrupt comes from TIM3
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	f040 8397 	bne.w	8003f4e <HAL_TIM_PeriodElapsedCallback+0x73e>
	{
		in.a1 = ADC.a1*3.3/4095;
 8003820:	4cc9      	ldr	r4, [pc, #804]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003822:	4eca      	ldr	r6, [pc, #808]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	f7fc fe41 	bl	80004ac <__aeabi_ui2d>
 800382a:	a3b7      	add	r3, pc, #732	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc feb2 	bl	8000598 <__aeabi_dmul>
 8003834:	a3b6      	add	r3, pc, #728	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc ffd7 	bl	80007ec <__aeabi_ddiv>
 800383e:	f7fd f945 	bl	8000acc <__aeabi_d2f>
 8003842:	4682      	mov	sl, r0
 8003844:	6030      	str	r0, [r6, #0]
		in.a2 = ADC.a2*3.3/4095;
 8003846:	6860      	ldr	r0, [r4, #4]
 8003848:	f7fc fe30 	bl	80004ac <__aeabi_ui2d>
 800384c:	a3ae      	add	r3, pc, #696	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fc fea1 	bl	8000598 <__aeabi_dmul>
 8003856:	a3ae      	add	r3, pc, #696	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f7fc ffc6 	bl	80007ec <__aeabi_ddiv>
 8003860:	f7fd f934 	bl	8000acc <__aeabi_d2f>
 8003864:	4683      	mov	fp, r0
 8003866:	6070      	str	r0, [r6, #4]
		in.a3 = ADC.a3*3.3/4095;
 8003868:	68a0      	ldr	r0, [r4, #8]
 800386a:	f7fc fe1f 	bl	80004ac <__aeabi_ui2d>
 800386e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fe90 	bl	8000598 <__aeabi_dmul>
 8003878:	a3a5      	add	r3, pc, #660	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc ffb5 	bl	80007ec <__aeabi_ddiv>
 8003882:	f7fd f923 	bl	8000acc <__aeabi_d2f>
 8003886:	4681      	mov	r9, r0
 8003888:	60b0      	str	r0, [r6, #8]
		in.a4 = ADC.a4*3.3/4095;
 800388a:	68e0      	ldr	r0, [r4, #12]
 800388c:	f7fc fe0e 	bl	80004ac <__aeabi_ui2d>
 8003890:	a39d      	add	r3, pc, #628	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc fe7f 	bl	8000598 <__aeabi_dmul>
 800389a:	a39d      	add	r3, pc, #628	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc ffa4 	bl	80007ec <__aeabi_ddiv>
 80038a4:	f7fd f912 	bl	8000acc <__aeabi_d2f>
 80038a8:	4607      	mov	r7, r0
 80038aa:	60f0      	str	r0, [r6, #12]

		in.u_bat = ADC.u_bat*3.3/4095;
 80038ac:	6920      	ldr	r0, [r4, #16]
 80038ae:	f7fc fdfd 	bl	80004ac <__aeabi_ui2d>
 80038b2:	a395      	add	r3, pc, #596	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fe6e 	bl	8000598 <__aeabi_dmul>
 80038bc:	a394      	add	r3, pc, #592	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc ff93 	bl	80007ec <__aeabi_ddiv>
 80038c6:	f7fd f901 	bl	8000acc <__aeabi_d2f>
 80038ca:	4605      	mov	r5, r0
 80038cc:	6170      	str	r0, [r6, #20]
		in.current_sense = ADC.current_sense*3.3/4095;
 80038ce:	6960      	ldr	r0, [r4, #20]
 80038d0:	f7fc fdec 	bl	80004ac <__aeabi_ui2d>
 80038d4:	a38c      	add	r3, pc, #560	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f7fc fe5d 	bl	8000598 <__aeabi_dmul>
 80038de:	a38c      	add	r3, pc, #560	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f7fc ff82 	bl	80007ec <__aeabi_ddiv>
 80038e8:	f7fd f8f0 	bl	8000acc <__aeabi_d2f>
 80038ec:	61b0      	str	r0, [r6, #24]
 80038ee:	4680      	mov	r8, r0
		in.temp = ADC.temp*3.3/4095.0;
 80038f0:	69a0      	ldr	r0, [r4, #24]
 80038f2:	f7fc fddb 	bl	80004ac <__aeabi_ui2d>
 80038f6:	a384      	add	r3, pc, #528	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc fe4c 	bl	8000598 <__aeabi_dmul>
 8003900:	a383      	add	r3, pc, #524	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc ff71 	bl	80007ec <__aeabi_ddiv>
 800390a:	f7fd f8df 	bl	8000acc <__aeabi_d2f>
 800390e:	6230      	str	r0, [r6, #32]
		in.pot = ADC.pot*3.3/4095.0;
 8003910:	69e0      	ldr	r0, [r4, #28]
 8003912:	f7fc fdcb 	bl	80004ac <__aeabi_ui2d>
 8003916:	a37c      	add	r3, pc, #496	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f7fc fe3c 	bl	8000598 <__aeabi_dmul>
 8003920:	a37b      	add	r3, pc, #492	; (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc ff61 	bl	80007ec <__aeabi_ddiv>
 800392a:	f7fd f8cf 	bl	8000acc <__aeabi_d2f>

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
 800392e:	4659      	mov	r1, fp
		in.pot = ADC.pot*3.3/4095.0;
 8003930:	6270      	str	r0, [r6, #36]	; 0x24
		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
 8003932:	4650      	mov	r0, sl
 8003934:	f7fd f920 	bl	8000b78 <__addsf3>
 8003938:	4649      	mov	r1, r9
 800393a:	f7fd f91d 	bl	8000b78 <__addsf3>
 800393e:	4639      	mov	r1, r7
 8003940:	f7fd f91a 	bl	8000b78 <__addsf3>
 8003944:	f7fc fdd4 	bl	80004f0 <__aeabi_f2d>
 8003948:	a373      	add	r3, pc, #460	; (adr r3, 8003b18 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f7fc fe23 	bl	8000598 <__aeabi_dmul>
 8003952:	2200      	movs	r2, #0
 8003954:	4b7e      	ldr	r3, [pc, #504]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003956:	f7fc ff49 	bl	80007ec <__aeabi_ddiv>
 800395a:	2200      	movs	r2, #0
 800395c:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800395e:	f7fc ff45 	bl	80007ec <__aeabi_ddiv>
 8003962:	f7fd f8b3 	bl	8000acc <__aeabi_d2f>
 8003966:	4c7c      	ldr	r4, [pc, #496]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003968:	46b2      	mov	sl, r6
 800396a:	6120      	str	r0, [r4, #16]
		val.u_bat = 25.0/25.8*in.u_bat*(3+22)/3.0;
 800396c:	4628      	mov	r0, r5
 800396e:	f7fc fdbf 	bl	80004f0 <__aeabi_f2d>
 8003972:	a36b      	add	r3, pc, #428	; (adr r3, 8003b20 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fe0e 	bl	8000598 <__aeabi_dmul>
 800397c:	2200      	movs	r2, #0
 800397e:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003980:	f7fc fe0a 	bl	8000598 <__aeabi_dmul>
 8003984:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003986:	2200      	movs	r2, #0
 8003988:	f7fc ff30 	bl	80007ec <__aeabi_ddiv>
 800398c:	f7fd f89e 	bl	8000acc <__aeabi_d2f>
		if(state.init)
 8003990:	4d74      	ldr	r5, [pc, #464]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x354>)
		val.u_bat = 25.0/25.8*in.u_bat*(3+22)/3.0;
 8003992:	6160      	str	r0, [r4, #20]
		if(state.init)
 8003994:	782b      	ldrb	r3, [r5, #0]
 8003996:	b1cb      	cbz	r3, 80039cc <HAL_TIM_PeriodElapsedCallback+0x1bc>
			val.current_sense0 = (val.current_sense0*199.0 +in.current_sense)/200.0;
 8003998:	69e0      	ldr	r0, [r4, #28]
 800399a:	f7fc fda9 	bl	80004f0 <__aeabi_f2d>
 800399e:	a362      	add	r3, pc, #392	; (adr r3, 8003b28 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fdf8 	bl	8000598 <__aeabi_dmul>
 80039a8:	4606      	mov	r6, r0
 80039aa:	4640      	mov	r0, r8
 80039ac:	460f      	mov	r7, r1
 80039ae:	f7fc fd9f 	bl	80004f0 <__aeabi_f2d>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4630      	mov	r0, r6
 80039b8:	4639      	mov	r1, r7
 80039ba:	f7fc fc3b 	bl	8000234 <__adddf3>
 80039be:	2200      	movs	r2, #0
 80039c0:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80039c2:	f7fc ff13 	bl	80007ec <__aeabi_ddiv>
 80039c6:	f7fd f881 	bl	8000acc <__aeabi_d2f>
 80039ca:	61e0      	str	r0, [r4, #28]
		if(HAL_GetTick()>2000)
 80039cc:	f7fd fbee 	bl	80011ac <HAL_GetTick>
 80039d0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			state.init = false;
 80039d4:	bf88      	it	hi
 80039d6:	2300      	movhi	r3, #0
		val.current_sense = fabs( (in.current_sense-val.current_sense0)*100.0/20.0*31.0);
 80039d8:	69e1      	ldr	r1, [r4, #28]
			state.init = false;
 80039da:	bf88      	it	hi
 80039dc:	702b      	strbhi	r3, [r5, #0]
		val.current_sense = fabs( (in.current_sense-val.current_sense0)*100.0/20.0*31.0);
 80039de:	f8da 0018 	ldr.w	r0, [sl, #24]
 80039e2:	f7fd f8c7 	bl	8000b74 <__aeabi_fsub>
 80039e6:	f7fc fd83 	bl	80004f0 <__aeabi_f2d>
 80039ea:	2200      	movs	r2, #0
 80039ec:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80039ee:	f7fc fdd3 	bl	8000598 <__aeabi_dmul>
 80039f2:	2200      	movs	r2, #0
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80039f6:	f7fc fef9 	bl	80007ec <__aeabi_ddiv>
 80039fa:	2200      	movs	r2, #0
 80039fc:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80039fe:	f7fc fdcb 	bl	8000598 <__aeabi_dmul>
 8003a02:	f7fd f863 	bl	8000acc <__aeabi_d2f>
 8003a06:	f020 4b00 	bic.w	fp, r0, #2147483648	; 0x80000000
 8003a0a:	f8c4 b018 	str.w	fp, [r4, #24]
		val.temp =  19.48*in.temp*in.temp-20.09*in.temp+2.87;
 8003a0e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8003a12:	f7fc fd6d 	bl	80004f0 <__aeabi_f2d>
 8003a16:	a346      	add	r3, pc, #280	; (adr r3, 8003b30 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	460f      	mov	r7, r1
 8003a20:	f7fc fdba 	bl	8000598 <__aeabi_dmul>
 8003a24:	4632      	mov	r2, r6
 8003a26:	463b      	mov	r3, r7
 8003a28:	f7fc fdb6 	bl	8000598 <__aeabi_dmul>
 8003a2c:	a342      	add	r3, pc, #264	; (adr r3, 8003b38 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	4680      	mov	r8, r0
 8003a34:	4689      	mov	r9, r1
 8003a36:	4630      	mov	r0, r6
 8003a38:	4639      	mov	r1, r7
 8003a3a:	f7fc fdad 	bl	8000598 <__aeabi_dmul>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	f7fc fbf3 	bl	8000230 <__aeabi_dsub>
 8003a4a:	a33d      	add	r3, pc, #244	; (adr r3, 8003b40 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fbf0 	bl	8000234 <__adddf3>
 8003a54:	f7fd f83a 	bl	8000acc <__aeabi_d2f>
 8003a58:	4681      	mov	r9, r0
 8003a5a:	6220      	str	r0, [r4, #32]
		val.pot = in.pot*100.0/3.3;
 8003a5c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8003a60:	f7fc fd46 	bl	80004f0 <__aeabi_f2d>
 8003a64:	2200      	movs	r2, #0
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003a68:	f7fc fd96 	bl	8000598 <__aeabi_dmul>
 8003a6c:	a326      	add	r3, pc, #152	; (adr r3, 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc febb 	bl	80007ec <__aeabi_ddiv>
 8003a76:	f7fd f829 	bl	8000acc <__aeabi_d2f>

		avg.current = (avg.current*199.0 + val.current)/200.0;
 8003a7a:	4e3f      	ldr	r6, [pc, #252]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x368>)
		val.pot = in.pot*100.0/3.3;
 8003a7c:	4680      	mov	r8, r0
 8003a7e:	6260      	str	r0, [r4, #36]	; 0x24
		avg.current = (avg.current*199.0 + val.current)/200.0;
 8003a80:	6930      	ldr	r0, [r6, #16]
 8003a82:	f7fc fd35 	bl	80004f0 <__aeabi_f2d>
 8003a86:	a328      	add	r3, pc, #160	; (adr r3, 8003b28 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc fd84 	bl	8000598 <__aeabi_dmul>
 8003a90:	6927      	ldr	r7, [r4, #16]
 8003a92:	e9cd 0100 	strd	r0, r1, [sp]
 8003a96:	4638      	mov	r0, r7
 8003a98:	f7fc fd2a 	bl	80004f0 <__aeabi_f2d>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aa4:	f7fc fbc6 	bl	8000234 <__adddf3>
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003aac:	f7fc fe9e 	bl	80007ec <__aeabi_ddiv>
 8003ab0:	f7fd f80c 	bl	8000acc <__aeabi_d2f>
 8003ab4:	6130      	str	r0, [r6, #16]
		avg.u_bat = (avg.u_bat*39.0 + val.u_bat)/40.0;
 8003ab6:	6970      	ldr	r0, [r6, #20]
 8003ab8:	f7fc fd1a 	bl	80004f0 <__aeabi_f2d>
 8003abc:	2200      	movs	r2, #0
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003ac0:	f7fc fd6a 	bl	8000598 <__aeabi_dmul>
 8003ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8003ac8:	6960      	ldr	r0, [r4, #20]
 8003aca:	f7fc fd11 	bl	80004f0 <__aeabi_f2d>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ad6:	f7fc fbad 	bl	8000234 <__adddf3>
 8003ada:	2200      	movs	r2, #0
 8003adc:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003ade:	f7fc fe85 	bl	80007ec <__aeabi_ddiv>
 8003ae2:	f7fc fff3 	bl	8000acc <__aeabi_d2f>
 8003ae6:	4682      	mov	sl, r0
 8003ae8:	6170      	str	r0, [r6, #20]
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
 8003aea:	69b0      	ldr	r0, [r6, #24]
 8003aec:	f7fc fd00 	bl	80004f0 <__aeabi_f2d>
 8003af0:	2200      	movs	r2, #0
 8003af2:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003af4:	f7fc fd50 	bl	8000598 <__aeabi_dmul>
 8003af8:	e9cd 0100 	strd	r0, r1, [sp]
 8003afc:	4658      	mov	r0, fp
 8003afe:	f7fc fcf7 	bl	80004f0 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	e03e      	b.n	8003b84 <HAL_TIM_PeriodElapsedCallback+0x374>
 8003b06:	bf00      	nop
 8003b08:	66666666 	.word	0x66666666
 8003b0c:	400a6666 	.word	0x400a6666
 8003b10:	00000000 	.word	0x00000000
 8003b14:	40affe00 	.word	0x40affe00
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	40dd4c00 	.word	0x40dd4c00
 8003b20:	07f01fc0 	.word	0x07f01fc0
 8003b24:	3fef01fc 	.word	0x3fef01fc
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	4068e000 	.word	0x4068e000
 8003b30:	47ae147b 	.word	0x47ae147b
 8003b34:	40337ae1 	.word	0x40337ae1
 8003b38:	3d70a3d7 	.word	0x3d70a3d7
 8003b3c:	4034170a 	.word	0x4034170a
 8003b40:	8f5c28f6 	.word	0x8f5c28f6
 8003b44:	4006f5c2 	.word	0x4006f5c2
 8003b48:	2000003c 	.word	0x2000003c
 8003b4c:	2000005c 	.word	0x2000005c
 8003b50:	4089a000 	.word	0x4089a000
 8003b54:	408f4000 	.word	0x408f4000
 8003b58:	2000022c 	.word	0x2000022c
 8003b5c:	40390000 	.word	0x40390000
 8003b60:	40080000 	.word	0x40080000
 8003b64:	200001a8 	.word	0x200001a8
 8003b68:	40690000 	.word	0x40690000
 8003b6c:	40590000 	.word	0x40590000
 8003b70:	40340000 	.word	0x40340000
 8003b74:	403f0000 	.word	0x403f0000
 8003b78:	20000378 	.word	0x20000378
 8003b7c:	40438000 	.word	0x40438000
 8003b80:	40440000 	.word	0x40440000
 8003b84:	460b      	mov	r3, r1
 8003b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b8a:	f7fc fb53 	bl	8000234 <__adddf3>
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4bbd      	ldr	r3, [pc, #756]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8003b92:	f7fc fe2b 	bl	80007ec <__aeabi_ddiv>
 8003b96:	f7fc ff99 	bl	8000acc <__aeabi_d2f>
 8003b9a:	61b0      	str	r0, [r6, #24]
 8003b9c:	4683      	mov	fp, r0
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
 8003b9e:	6a30      	ldr	r0, [r6, #32]
 8003ba0:	f7fc fca6 	bl	80004f0 <__aeabi_f2d>
 8003ba4:	a3a4      	add	r3, pc, #656	; (adr r3, 8003e38 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f7fc fcf5 	bl	8000598 <__aeabi_dmul>
 8003bae:	e9cd 0100 	strd	r0, r1, [sp]
 8003bb2:	4648      	mov	r0, r9
 8003bb4:	f7fc fc9c 	bl	80004f0 <__aeabi_f2d>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bc0:	f7fc fb38 	bl	8000234 <__adddf3>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4bb1      	ldr	r3, [pc, #708]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8003bc8:	f7fc fe10 	bl	80007ec <__aeabi_ddiv>
 8003bcc:	f7fc ff7e 	bl	8000acc <__aeabi_d2f>
 8003bd0:	6230      	str	r0, [r6, #32]
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
 8003bd2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003bd4:	f7fc fc8c 	bl	80004f0 <__aeabi_f2d>
 8003bd8:	a397      	add	r3, pc, #604	; (adr r3, 8003e38 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fcdb 	bl	8000598 <__aeabi_dmul>
 8003be2:	e9cd 0100 	strd	r0, r1, [sp]
 8003be6:	4640      	mov	r0, r8
 8003be8:	f7fc fc82 	bl	80004f0 <__aeabi_f2d>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bf4:	f7fc fb1e 	bl	8000234 <__adddf3>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4ba4      	ldr	r3, [pc, #656]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8003bfc:	f7fc fdf6 	bl	80007ec <__aeabi_ddiv>
 8003c00:	f7fc ff64 	bl	8000acc <__aeabi_d2f>
 8003c04:	6270      	str	r0, [r6, #36]	; 0x24
		//
		state.charged = avg.u_bat>4.1*6;
 8003c06:	4650      	mov	r0, sl
 8003c08:	f7fc fc72 	bl	80004f0 <__aeabi_f2d>
 8003c0c:	a38c      	add	r3, pc, #560	; (adr r3, 8003e40 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc ff51 	bl	8000ab8 <__aeabi_dcmpgt>
 8003c16:	f04f 0801 	mov.w	r8, #1
 8003c1a:	9600      	str	r6, [sp, #0]
 8003c1c:	b900      	cbnz	r0, 8003c20 <HAL_TIM_PeriodElapsedCallback+0x410>
 8003c1e:	4680      	mov	r8, r0
#ifdef SAINQUAKE
		state.startDVS = avg.pot>50;
#else
		state.startDVS = startDvs>0;
 8003c20:	4b9b      	ldr	r3, [pc, #620]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x680>)
		val.smoothCurrent = ( val.smoothCurrent*9 + val.current )/10;
 8003c22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		state.startDVS = startDvs>0;
 8003c24:	781b      	ldrb	r3, [r3, #0]
		val.smoothCurrent = ( val.smoothCurrent*9 + val.current )/10;
 8003c26:	499b      	ldr	r1, [pc, #620]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x684>)
		state.startDVS = startDvs>0;
 8003c28:	3300      	adds	r3, #0
 8003c2a:	bf18      	it	ne
 8003c2c:	2301      	movne	r3, #1
		state.charged = avg.u_bat>4.1*6;
 8003c2e:	f885 8002 	strb.w	r8, [r5, #2]
		state.startDVS = startDvs>0;
 8003c32:	706b      	strb	r3, [r5, #1]
		val.smoothCurrent = ( val.smoothCurrent*9 + val.current )/10;
 8003c34:	f7fd f8a8 	bl	8000d88 <__aeabi_fmul>
 8003c38:	4639      	mov	r1, r7
 8003c3a:	f7fc ff9d 	bl	8000b78 <__addsf3>
 8003c3e:	4996      	ldr	r1, [pc, #600]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003c40:	f7fd f956 	bl	8000ef0 <__aeabi_fdiv>
 8003c44:	62a0      	str	r0, [r4, #40]	; 0x28
		val.chgCurrSmooth = ( avg.current_sense*3120.0/4095.0)/10.0 - 165.62;
 8003c46:	4658      	mov	r0, fp
 8003c48:	f7fc fc52 	bl	80004f0 <__aeabi_f2d>
 8003c4c:	a37e      	add	r3, pc, #504	; (adr r3, 8003e48 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fca1 	bl	8000598 <__aeabi_dmul>
 8003c56:	a37e      	add	r3, pc, #504	; (adr r3, 8003e50 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fdc6 	bl	80007ec <__aeabi_ddiv>
 8003c60:	2200      	movs	r2, #0
 8003c62:	4b8e      	ldr	r3, [pc, #568]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003c64:	f7fc fdc2 	bl	80007ec <__aeabi_ddiv>
 8003c68:	a37b      	add	r3, pc, #492	; (adr r3, 8003e58 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc fadf 	bl	8000230 <__aeabi_dsub>
 8003c72:	f7fc ff2b 	bl	8000acc <__aeabi_d2f>
		val.cap += val.current/200/3600;
 8003c76:	498a      	ldr	r1, [pc, #552]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x690>)
		val.chgCurrSmooth = ( avg.current_sense*3120.0/4095.0)/10.0 - 165.62;
 8003c78:	62e0      	str	r0, [r4, #44]	; 0x2c
		val.cap += val.current/200/3600;
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	f7fd f938 	bl	8000ef0 <__aeabi_fdiv>
 8003c80:	4988      	ldr	r1, [pc, #544]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003c82:	f7fd f935 	bl	8000ef0 <__aeabi_fdiv>
 8003c86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c88:	f7fc ff76 	bl	8000b78 <__addsf3>
 8003c8c:	6320      	str	r0, [r4, #48]	; 0x30
		pushValuesToOldSES();
 8003c8e:	f7ff fda5 	bl	80037dc <pushValuesToOldSES>
#endif
		state.coolerEnabled = avg.temp>40.0;
 8003c92:	9b00      	ldr	r3, [sp, #0]
 8003c94:	4984      	ldr	r1, [pc, #528]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003c96:	f8d3 a020 	ldr.w	sl, [r3, #32]
 8003c9a:	f04f 0401 	mov.w	r4, #1
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	f7fd fa2e 	bl	8001100 <__aeabi_fcmpgt>
 8003ca4:	b900      	cbnz	r0, 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x498>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	70ec      	strb	r4, [r5, #3]
		state.coolerRegulated = avg.temp>60.0;
 8003caa:	4980      	ldr	r1, [pc, #512]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8003cac:	4650      	mov	r0, sl
 8003cae:	f04f 0401 	mov.w	r4, #1
 8003cb2:	f7fd fa25 	bl	8001100 <__aeabi_fcmpgt>
 8003cb6:	b900      	cbnz	r0, 8003cba <HAL_TIM_PeriodElapsedCallback+0x4aa>
 8003cb8:	4604      	mov	r4, r0
		state.generateing = avg.current_sense>5;
 8003cba:	9b00      	ldr	r3, [sp, #0]
		state.coolerRegulated = avg.temp>60.0;
 8003cbc:	712c      	strb	r4, [r5, #4]
		state.generateing = avg.current_sense>5;
 8003cbe:	699f      	ldr	r7, [r3, #24]
 8003cc0:	497b      	ldr	r1, [pc, #492]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	f04f 0401 	mov.w	r4, #1
 8003cc8:	f7fd fa1a 	bl	8001100 <__aeabi_fcmpgt>
 8003ccc:	b900      	cbnz	r0, 8003cd0 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 8003cce:	4604      	mov	r4, r0
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
 8003cd0:	786b      	ldrb	r3, [r5, #1]
		state.generateing = avg.current_sense>5;
 8003cd2:	716c      	strb	r4, [r5, #5]
		if(state.startDVS ){//&& tmp<1000)
 8003cd4:	9303      	str	r3, [sp, #12]
 8003cd6:	4c77      	ldr	r4, [pc, #476]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003cd8:	b1c3      	cbz	r3, 8003d0c <HAL_TIM_PeriodElapsedCallback+0x4fc>
			pwm.starter = (pwm.starter*299.0 +1400.0)/300.0;
 8003cda:	6860      	ldr	r0, [r4, #4]
 8003cdc:	f7fc fc08 	bl	80004f0 <__aeabi_f2d>
 8003ce0:	a35f      	add	r3, pc, #380	; (adr r3, 8003e60 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fc57 	bl	8000598 <__aeabi_dmul>
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003cee:	f7fc faa1 	bl	8000234 <__adddf3>
 8003cf2:	a35d      	add	r3, pc, #372	; (adr r3, 8003e68 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fd78 	bl	80007ec <__aeabi_ddiv>
 8003cfc:	f7fc fee6 	bl	8000acc <__aeabi_d2f>
			if(state.generateing)
 8003d00:	496b      	ldr	r1, [pc, #428]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
			pwm.starter = (pwm.starter*299.0 +1400.0)/300.0;
 8003d02:	6060      	str	r0, [r4, #4]
			if(state.generateing)
 8003d04:	4638      	mov	r0, r7
 8003d06:	f7fd f9fb 	bl	8001100 <__aeabi_fcmpgt>
 8003d0a:	b108      	cbz	r0, 8003d10 <HAL_TIM_PeriodElapsedCallback+0x500>
				pwm.starter = 1000;
 8003d0c:	4b6b      	ldr	r3, [pc, #428]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003d0e:	6063      	str	r3, [r4, #4]
		}else
			pwm.starter = 1000;
		//throttle
		ice.delta = ice.target - avg.current_sense;
 8003d10:	4e6b      	ldr	r6, [pc, #428]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003d12:	4639      	mov	r1, r7
 8003d14:	6830      	ldr	r0, [r6, #0]
 8003d16:	f7fc ff2d 	bl	8000b74 <__aeabi_fsub>
 8003d1a:	4683      	mov	fp, r0
 8003d1c:	6070      	str	r0, [r6, #4]
		ice.smooth_delta = (ice.smooth_delta*99.0 +ice.delta)/100.0;
 8003d1e:	68f0      	ldr	r0, [r6, #12]
 8003d20:	f7fc fbe6 	bl	80004f0 <__aeabi_f2d>
 8003d24:	a352      	add	r3, pc, #328	; (adr r3, 8003e70 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc35 	bl	8000598 <__aeabi_dmul>
 8003d2e:	4680      	mov	r8, r0
 8003d30:	4658      	mov	r0, fp
 8003d32:	4689      	mov	r9, r1
 8003d34:	f7fc fbdc 	bl	80004f0 <__aeabi_f2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4649      	mov	r1, r9
 8003d40:	f7fc fa78 	bl	8000234 <__adddf3>
 8003d44:	2200      	movs	r2, #0
 8003d46:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003d48:	f7fc fd50 	bl	80007ec <__aeabi_ddiv>
 8003d4c:	f7fc febe 	bl	8000acc <__aeabi_d2f>
 8003d50:	4683      	mov	fp, r0
 8003d52:	60f0      	str	r0, [r6, #12]
		ice.int_delta += ice.smooth_delta*0.002;
 8003d54:	68b0      	ldr	r0, [r6, #8]
 8003d56:	f7fc fbcb 	bl	80004f0 <__aeabi_f2d>
 8003d5a:	4680      	mov	r8, r0
 8003d5c:	4658      	mov	r0, fp
 8003d5e:	4689      	mov	r9, r1
 8003d60:	f7fc fbc6 	bl	80004f0 <__aeabi_f2d>
 8003d64:	a344      	add	r3, pc, #272	; (adr r3, 8003e78 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fc15 	bl	8000598 <__aeabi_dmul>
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4602      	mov	r2, r0
 8003d72:	4649      	mov	r1, r9
 8003d74:	4640      	mov	r0, r8
 8003d76:	f7fc fa5d 	bl	8000234 <__adddf3>
 8003d7a:	f7fc fea7 	bl	8000acc <__aeabi_d2f>


		if(state.startDVS){
 8003d7e:	9b03      	ldr	r3, [sp, #12]
		ice.int_delta += ice.smooth_delta*0.002;
 8003d80:	4680      	mov	r8, r0
 8003d82:	60b0      	str	r0, [r6, #8]
		if(state.startDVS){
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80e9 	beq.w	8003f5c <HAL_TIM_PeriodElapsedCallback+0x74c>
			pwm.throttle = HOLOSTOI;
 8003d8a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8003ed0 <HAL_TIM_PeriodElapsedCallback+0x6c0>
			if(state.generateing){//zavelsa
 8003d8e:	4948      	ldr	r1, [pc, #288]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
			pwm.throttle = HOLOSTOI;
 8003d90:	f8c4 9008 	str.w	r9, [r4, #8]
			if(state.generateing){//zavelsa
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7fd f9b3 	bl	8001100 <__aeabi_fcmpgt>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	f000 80da 	beq.w	8003f54 <HAL_TIM_PeriodElapsedCallback+0x744>
				ice.target = 40.0;
 8003da0:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x698>)
				pwm.throttle = (HOLOSTOI+ice.int_delta);//1750*PCA0_MKS;
 8003da2:	4649      	mov	r1, r9
				ice.target = 40.0;
 8003da4:	6033      	str	r3, [r6, #0]
				pwm.throttle = (HOLOSTOI+ice.int_delta);//1750*PCA0_MKS;
 8003da6:	4640      	mov	r0, r8
 8003da8:	f7fc fee6 	bl	8000b78 <__addsf3>
 8003dac:	60a0      	str	r0, [r4, #8]
			}
		}else{
			pwm.throttle = MIN_Z;//1200*PCA0_MKS;//;1200*PCA0_MKS;//0//1320
		}
		//cooler routine
				if(state.coolerEnabled && HAL_GetTick()>=COOLER_DELAY*1000){
 8003dae:	493e      	ldr	r1, [pc, #248]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003db0:	4650      	mov	r0, sl
 8003db2:	f7fd f9a5 	bl	8001100 <__aeabi_fcmpgt>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	f000 80d3 	beq.w	8003f62 <HAL_TIM_PeriodElapsedCallback+0x752>
 8003dbc:	f7fd f9f6 	bl	80011ac <HAL_GetTick>
 8003dc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003dc4:	4298      	cmp	r0, r3
 8003dc6:	f240 80cc 	bls.w	8003f62 <HAL_TIM_PeriodElapsedCallback+0x752>
					pwm.cooler = (pwm.cooler*299.0 +COOLER_PWM_DUTY)/300.0;
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	f7fc fb90 	bl	80004f0 <__aeabi_f2d>
 8003dd0:	a323      	add	r3, pc, #140	; (adr r3, 8003e60 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f7fc fbdf 	bl	8000598 <__aeabi_dmul>
 8003dda:	a329      	add	r3, pc, #164	; (adr r3, 8003e80 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fa28 	bl	8000234 <__adddf3>
 8003de4:	a320      	add	r3, pc, #128	; (adr r3, 8003e68 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f7fc fcff 	bl	80007ec <__aeabi_ddiv>
 8003dee:	f7fc fe6d 	bl	8000acc <__aeabi_d2f>
 8003df2:	6020      	str	r0, [r4, #0]
				}else{
					pwm.cooler = COOLER_PWM_OFF;//cooler
				}
				if(state.coolerRegulated && HAL_GetTick()>=COOLER_DELAY*1000){
 8003df4:	792b      	ldrb	r3, [r5, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d07f      	beq.n	8003efa <HAL_TIM_PeriodElapsedCallback+0x6ea>
 8003dfa:	f7fd f9d7 	bl	80011ac <HAL_GetTick>
 8003dfe:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e02:	4298      	cmp	r0, r3
 8003e04:	d979      	bls.n	8003efa <HAL_TIM_PeriodElapsedCallback+0x6ea>
					pwm.cooler = (pwm.cooler*299.0 +(COOLER_PWM_DUTY+(avg.temp-60.0)*COOLER_PWM_K))/300.0;
 8003e06:	9b00      	ldr	r3, [sp, #0]
 8003e08:	6a18      	ldr	r0, [r3, #32]
 8003e0a:	f7fc fb71 	bl	80004f0 <__aeabi_f2d>
 8003e0e:	2200      	movs	r2, #0
 8003e10:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003e12:	f7fc fa0d 	bl	8000230 <__aeabi_dsub>
 8003e16:	2200      	movs	r2, #0
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8003e1a:	f7fc fbbd 	bl	8000598 <__aeabi_dmul>
 8003e1e:	a318      	add	r3, pc, #96	; (adr r3, 8003e80 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fa06 	bl	8000234 <__adddf3>
 8003e28:	4606      	mov	r6, r0
 8003e2a:	6820      	ldr	r0, [r4, #0]
 8003e2c:	460f      	mov	r7, r1
 8003e2e:	f7fc fb5f 	bl	80004f0 <__aeabi_f2d>
 8003e32:	e04f      	b.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x6c4>
 8003e34:	f3af 8000 	nop.w
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	4068e000 	.word	0x4068e000
 8003e40:	99999999 	.word	0x99999999
 8003e44:	40389999 	.word	0x40389999
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	40a86000 	.word	0x40a86000
 8003e50:	00000000 	.word	0x00000000
 8003e54:	40affe00 	.word	0x40affe00
 8003e58:	0a3d70a4 	.word	0x0a3d70a4
 8003e5c:	4064b3d7 	.word	0x4064b3d7
 8003e60:	00000000 	.word	0x00000000
 8003e64:	4072b000 	.word	0x4072b000
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	4072c000 	.word	0x4072c000
 8003e70:	00000000 	.word	0x00000000
 8003e74:	4058c000 	.word	0x4058c000
 8003e78:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e7c:	3f60624d 	.word	0x3f60624d
 8003e80:	00000000 	.word	0x00000000
 8003e84:	40913000 	.word	0x40913000
 8003e88:	40440000 	.word	0x40440000
 8003e8c:	40690000 	.word	0x40690000
 8003e90:	20000090 	.word	0x20000090
 8003e94:	41100000 	.word	0x41100000
 8003e98:	41200000 	.word	0x41200000
 8003e9c:	40240000 	.word	0x40240000
 8003ea0:	43480000 	.word	0x43480000
 8003ea4:	45610000 	.word	0x45610000
 8003ea8:	42200000 	.word	0x42200000
 8003eac:	42700000 	.word	0x42700000
 8003eb0:	40a00000 	.word	0x40a00000
 8003eb4:	200002e0 	.word	0x200002e0
 8003eb8:	4095e000 	.word	0x4095e000
 8003ebc:	447a0000 	.word	0x447a0000
 8003ec0:	200003b0 	.word	0x200003b0
 8003ec4:	40590000 	.word	0x40590000
 8003ec8:	404e0000 	.word	0x404e0000
 8003ecc:	40140000 	.word	0x40140000
 8003ed0:	44898000 	.word	0x44898000
 8003ed4:	a32a      	add	r3, pc, #168	; (adr r3, 8003f80 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f7fc fb5d 	bl	8000598 <__aeabi_dmul>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	4639      	mov	r1, r7
 8003ee6:	f7fc f9a5 	bl	8000234 <__adddf3>
 8003eea:	a327      	add	r3, pc, #156	; (adr r3, 8003f88 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f7fc fc7c 	bl	80007ec <__aeabi_ddiv>
 8003ef4:	f7fc fdea 	bl	8000acc <__aeabi_d2f>
 8003ef8:	6020      	str	r0, [r4, #0]
				}
				if(pwm.cooler>COOLER_PWM_MAX)
 8003efa:	4e25      	ldr	r6, [pc, #148]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8003efc:	6820      	ldr	r0, [r4, #0]
 8003efe:	4631      	mov	r1, r6
 8003f00:	f7fd f8fe 	bl	8001100 <__aeabi_fcmpgt>
 8003f04:	b100      	cbz	r0, 8003f08 <HAL_TIM_PeriodElapsedCallback+0x6f8>
					pwm.cooler = COOLER_PWM_MAX;
 8003f06:	6026      	str	r6, [r4, #0]
		//pwm control
		TIM3->CCR4 = pwm.cooler;
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	f7fd f903 	bl	8001114 <__aeabi_f2uiz>
 8003f0e:	4e21      	ldr	r6, [pc, #132]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8003f10:	6430      	str	r0, [r6, #64]	; 0x40
		TIM3->CCR3 = pwm.throttle;
 8003f12:	68a0      	ldr	r0, [r4, #8]
 8003f14:	f7fd f8fe 	bl	8001114 <__aeabi_f2uiz>
 8003f18:	63f0      	str	r0, [r6, #60]	; 0x3c
		TIM3->CCR2 = pwm.starter;
 8003f1a:	6860      	ldr	r0, [r4, #4]
 8003f1c:	f7fd f8fa 	bl	8001114 <__aeabi_f2uiz>
 8003f20:	63b0      	str	r0, [r6, #56]	; 0x38
		//LED control
		if(state.startDVS)
 8003f22:	786e      	ldrb	r6, [r5, #1]
 8003f24:	4c1c      	ldr	r4, [pc, #112]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8003f26:	b1fe      	cbz	r6, 8003f68 <HAL_TIM_PeriodElapsedCallback+0x758>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	481b      	ldr	r0, [pc, #108]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8003f2e:	f7fd ff9d 	bl	8001e6c <HAL_GPIO_WritePin>
		else if(time>500){
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
			time=0;
		}
		if(state.coolerEnabled && time>50){
 8003f32:	78eb      	ldrb	r3, [r5, #3]
 8003f34:	b143      	cbz	r3, 8003f48 <HAL_TIM_PeriodElapsedCallback+0x738>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	2b32      	cmp	r3, #50	; 0x32
 8003f3a:	d905      	bls.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0x738>
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8003f3c:	2140      	movs	r1, #64	; 0x40
 8003f3e:	4817      	ldr	r0, [pc, #92]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8003f40:	f7fd ff99 	bl	8001e76 <HAL_GPIO_TogglePin>
			time=0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	6023      	str	r3, [r4, #0]
		}
		time++;
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	6023      	str	r3, [r4, #0]
	}

}
 8003f4e:	b005      	add	sp, #20
 8003f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ice.int_delta = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60b3      	str	r3, [r6, #8]
				ice.target=0;
 8003f58:	6033      	str	r3, [r6, #0]
 8003f5a:	e728      	b.n	8003dae <HAL_TIM_PeriodElapsedCallback+0x59e>
			pwm.throttle = MIN_Z;//1200*PCA0_MKS;//;1200*PCA0_MKS;//0//1320
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8003f5e:	60a3      	str	r3, [r4, #8]
 8003f60:	e725      	b.n	8003dae <HAL_TIM_PeriodElapsedCallback+0x59e>
					pwm.cooler = COOLER_PWM_OFF;//cooler
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	e745      	b.n	8003df4 <HAL_TIM_PeriodElapsedCallback+0x5e4>
		else if(time>500){
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f6e:	d9e0      	bls.n	8003f32 <HAL_TIM_PeriodElapsedCallback+0x722>
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	480a      	ldr	r0, [pc, #40]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8003f74:	f7fd ff7f 	bl	8001e76 <HAL_GPIO_TogglePin>
			time=0;
 8003f78:	6026      	str	r6, [r4, #0]
 8003f7a:	e7da      	b.n	8003f32 <HAL_TIM_PeriodElapsedCallback+0x722>
 8003f7c:	f3af 8000 	nop.w
 8003f80:	00000000 	.word	0x00000000
 8003f84:	4072b000 	.word	0x4072b000
 8003f88:	00000000 	.word	0x00000000
 8003f8c:	4072c000 	.word	0x4072c000
 8003f90:	44e10000 	.word	0x44e10000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	20000034 	.word	0x20000034
 8003f9c:	40011000 	.word	0x40011000
 8003fa0:	44660000 	.word	0x44660000
 8003fa4:	44480000 	.word	0x44480000

08003fa8 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
{
 8003fac:	b530      	push	{r4, r5, lr}
 8003fae:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fb0:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8003fb2:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fb4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fb8:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fba:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fbe:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fc0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003fc2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc4:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8003fc6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fc8:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fca:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8003fcc:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fce:	f7fd ff57 	bl	8001e80 <HAL_RCC_OscConfig>
 8003fd2:	b100      	cbz	r0, 8003fd6 <SystemClock_Config+0x2e>
 8003fd4:	e7fe      	b.n	8003fd4 <SystemClock_Config+0x2c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd6:	230f      	movs	r3, #15
 8003fd8:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fde:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fe0:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fe6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fe8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fea:	f7fe fac1 	bl	8002570 <HAL_RCC_ClockConfig>
 8003fee:	b100      	cbz	r0, 8003ff2 <SystemClock_Config+0x4a>
 8003ff0:	e7fe      	b.n	8003ff0 <SystemClock_Config+0x48>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ff6:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003ff8:	9506      	str	r5, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003ffa:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ffc:	f7fe fba2 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 8004000:	4605      	mov	r5, r0
 8004002:	b100      	cbz	r0, 8004006 <SystemClock_Config+0x5e>
 8004004:	e7fe      	b.n	8004004 <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004006:	f7fe fb67 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 800400a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004012:	f7fd fba9 	bl	8001768 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004016:	2004      	movs	r0, #4
 8004018:	f7fd fbbc 	bl	8001794 <HAL_SYSTICK_CLKSourceConfig>
 800401c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004020:	fa93 f3a3 	rbit	r3, r3

    /**Configure the Systick interrupt time 
    */
  __HAL_RCC_PLLI2S_ENABLE();
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800402e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004032:	601c      	str	r4, [r3, #0]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004034:	462a      	mov	r2, r5
 8004036:	4629      	mov	r1, r5
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	f7fd fb54 	bl	80016e8 <HAL_NVIC_SetPriority>
}
 8004040:	b01d      	add	sp, #116	; 0x74
 8004042:	bd30      	pop	{r4, r5, pc}

08004044 <main>:
{
 8004044:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004046:	4c9b      	ldr	r4, [pc, #620]	; (80042b4 <main+0x270>)
{
 8004048:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 800404a:	f7fd f895 	bl	8001178 <HAL_Init>
  SystemClock_Config();
 800404e:	f7ff ffab 	bl	8003fa8 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004052:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8004054:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	61a3      	str	r3, [r4, #24]
 800405c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800405e:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	930d      	str	r3, [sp, #52]	; 0x34
 8004066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004068:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800406a:	4893      	ldr	r0, [pc, #588]	; (80042b8 <main+0x274>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800406c:	f043 0310 	orr.w	r3, r3, #16
 8004070:	61a3      	str	r3, [r4, #24]
 8004072:	69a3      	ldr	r3, [r4, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004074:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	930e      	str	r3, [sp, #56]	; 0x38
 800407c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800407e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004080:	2503      	movs	r5, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	61a3      	str	r3, [r4, #24]
 8004088:	69a3      	ldr	r3, [r4, #24]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004092:	69a3      	ldr	r3, [r4, #24]
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	61a3      	str	r3, [r4, #24]
 800409a:	69a3      	ldr	r3, [r4, #24]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	9310      	str	r3, [sp, #64]	; 0x40
 80040a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80040a4:	f7fd fee2 	bl	8001e6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80040ae:	4883      	ldr	r0, [pc, #524]	; (80042bc <main+0x278>)
 80040b0:	f7fd fedc 	bl	8001e6c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_R_Pin;
 80040b4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80040b6:	a917      	add	r1, sp, #92	; 0x5c
 80040b8:	487f      	ldr	r0, [pc, #508]	; (80042b8 <main+0x274>)
  GPIO_InitStruct.Pin = LED_R_Pin;
 80040ba:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040bc:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040be:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80040c0:	f7fd fdf4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 80040c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c8:	a917      	add	r1, sp, #92	; 0x5c
 80040ca:	487c      	ldr	r0, [pc, #496]	; (80042bc <main+0x278>)
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 80040cc:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ce:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d0:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d2:	f7fd fdeb 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040d6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d8:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040da:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040dc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040de:	a917      	add	r1, sp, #92	; 0x5c
 80040e0:	4877      	ldr	r0, [pc, #476]	; (80042c0 <main+0x27c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040e2:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e4:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e6:	f7fd fde1 	bl	8001cac <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040ea:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040ec:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040ee:	433b      	orrs	r3, r7
 80040f0:	6163      	str	r3, [r4, #20]
 80040f2:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040f4:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040f6:	403b      	ands	r3, r7
 80040f8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040fa:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040fe:	f7fd faf3 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004102:	200b      	movs	r0, #11
 8004104:	f7fd fb24 	bl	8001750 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004108:	462a      	mov	r2, r5
 800410a:	4629      	mov	r1, r5
 800410c:	200c      	movs	r0, #12
 800410e:	f7fd faeb 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004112:	200c      	movs	r0, #12
 8004114:	f7fd fb1c 	bl	8001750 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004118:	462a      	mov	r2, r5
 800411a:	4629      	mov	r1, r5
 800411c:	200d      	movs	r0, #13
 800411e:	f7fd fae3 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004122:	200d      	movs	r0, #13
 8004124:	f7fd fb14 	bl	8001750 <HAL_NVIC_EnableIRQ>
  htim3.Init.Prescaler = 71;
 8004128:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 800412a:	4c66      	ldr	r4, [pc, #408]	; (80042c4 <main+0x280>)
  htim3.Init.Prescaler = 71;
 800412c:	4866      	ldr	r0, [pc, #408]	; (80042c8 <main+0x284>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412e:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 71;
 8004130:	e884 0009 	stmia.w	r4, {r0, r3}
  htim3.Init.Period = 2790;
 8004134:	f640 23e6 	movw	r3, #2790	; 0xae6
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004138:	4620      	mov	r0, r4
  htim3.Init.Period = 2790;
 800413a:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800413c:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800413e:	f7fe fe03 	bl	8002d48 <HAL_TIM_Base_Init>
 8004142:	b100      	cbz	r0, 8004146 <main+0x102>
 8004144:	e7fe      	b.n	8004144 <main+0x100>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414a:	ad1e      	add	r5, sp, #120	; 0x78
 800414c:	f845 3d2c 	str.w	r3, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004150:	4629      	mov	r1, r5
 8004152:	4620      	mov	r0, r4
 8004154:	f7fe fc5d 	bl	8002a12 <HAL_TIM_ConfigClockSource>
 8004158:	b100      	cbz	r0, 800415c <main+0x118>
 800415a:	e7fe      	b.n	800415a <main+0x116>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800415c:	4620      	mov	r0, r4
 800415e:	f7fe fe0d 	bl	8002d7c <HAL_TIM_OC_Init>
 8004162:	b100      	cbz	r0, 8004166 <main+0x122>
 8004164:	e7fe      	b.n	8004164 <main+0x120>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004166:	4620      	mov	r0, r4
 8004168:	f7fe fe22 	bl	8002db0 <HAL_TIM_PWM_Init>
 800416c:	b100      	cbz	r0, 8004170 <main+0x12c>
 800416e:	e7fe      	b.n	800416e <main+0x12a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004170:	9011      	str	r0, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004172:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004174:	a911      	add	r1, sp, #68	; 0x44
 8004176:	4620      	mov	r0, r4
 8004178:	f7fe ff12 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800417c:	4602      	mov	r2, r0
 800417e:	b100      	cbz	r0, 8004182 <main+0x13e>
 8004180:	e7fe      	b.n	8004180 <main+0x13c>
  sConfigOC.Pulse = 1000;
 8004182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004186:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004188:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800418a:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800418c:	a917      	add	r1, sp, #92	; 0x5c
 800418e:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1000;
 8004190:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004192:	f7fe fe53 	bl	8002e3c <HAL_TIM_OC_ConfigChannel>
 8004196:	b100      	cbz	r0, 800419a <main+0x156>
 8004198:	e7fe      	b.n	8004198 <main+0x154>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800419a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800419c:	2204      	movs	r2, #4
 800419e:	a917      	add	r1, sp, #92	; 0x5c
 80041a0:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041a2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041a4:	f7fe fe78 	bl	8002e98 <HAL_TIM_PWM_ConfigChannel>
 80041a8:	b100      	cbz	r0, 80041ac <main+0x168>
 80041aa:	e7fe      	b.n	80041aa <main+0x166>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041ac:	2208      	movs	r2, #8
 80041ae:	a917      	add	r1, sp, #92	; 0x5c
 80041b0:	4620      	mov	r0, r4
 80041b2:	f7fe fe71 	bl	8002e98 <HAL_TIM_PWM_ConfigChannel>
 80041b6:	b100      	cbz	r0, 80041ba <main+0x176>
 80041b8:	e7fe      	b.n	80041b8 <main+0x174>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041ba:	220c      	movs	r2, #12
 80041bc:	a917      	add	r1, sp, #92	; 0x5c
 80041be:	4620      	mov	r0, r4
 80041c0:	f7fe fe6a 	bl	8002e98 <HAL_TIM_PWM_ConfigChannel>
 80041c4:	4606      	mov	r6, r0
 80041c6:	b100      	cbz	r0, 80041ca <main+0x186>
 80041c8:	e7fe      	b.n	80041c8 <main+0x184>
  HAL_TIM_MspPostInit(&htim3);
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 f9b6 	bl	800453c <HAL_TIM_MspPostInit>
  hadc1.Instance = ADC1;
 80041d0:	483e      	ldr	r0, [pc, #248]	; (80042cc <main+0x288>)
 80041d2:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <main+0x28c>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 80041d4:	60c7      	str	r7, [r0, #12]
  hadc1.Instance = ADC1;
 80041d6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80041d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041dc:	6083      	str	r3, [r0, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041de:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80041e2:	61c3      	str	r3, [r0, #28]
  hadc1.Init.NbrOfConversion = 8;
 80041e4:	2308      	movs	r3, #8
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041e6:	6146      	str	r6, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041e8:	6046      	str	r6, [r0, #4]
  hadc1.Init.NbrOfConversion = 8;
 80041ea:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ec:	f7fd f9d6 	bl	800159c <HAL_ADC_Init>
 80041f0:	b100      	cbz	r0, 80041f4 <main+0x1b0>
 80041f2:	e7fe      	b.n	80041f2 <main+0x1ae>
  sConfig.Channel = ADC_CHANNEL_12;
 80041f4:	230c      	movs	r3, #12
 80041f6:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = 1;
 80041f8:	2301      	movs	r3, #1
 80041fa:	9318      	str	r3, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80041fc:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041fe:	a917      	add	r1, sp, #92	; 0x5c
 8004200:	4832      	ldr	r0, [pc, #200]	; (80042cc <main+0x288>)
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004202:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004204:	f7fd f822 	bl	800124c <HAL_ADC_ConfigChannel>
 8004208:	b100      	cbz	r0, 800420c <main+0x1c8>
 800420a:	e7fe      	b.n	800420a <main+0x1c6>
  sConfig.Channel = ADC_CHANNEL_13;
 800420c:	230d      	movs	r3, #13
 800420e:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = 2;
 8004210:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004212:	a917      	add	r1, sp, #92	; 0x5c
 8004214:	482d      	ldr	r0, [pc, #180]	; (80042cc <main+0x288>)
  sConfig.Rank = 2;
 8004216:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004218:	f7fd f818 	bl	800124c <HAL_ADC_ConfigChannel>
 800421c:	b100      	cbz	r0, 8004220 <main+0x1dc>
 800421e:	e7fe      	b.n	800421e <main+0x1da>
  sConfig.Channel = ADC_CHANNEL_14;
 8004220:	230e      	movs	r3, #14
 8004222:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = 3;
 8004224:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004226:	a917      	add	r1, sp, #92	; 0x5c
 8004228:	4828      	ldr	r0, [pc, #160]	; (80042cc <main+0x288>)
  sConfig.Rank = 3;
 800422a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800422c:	f7fd f80e 	bl	800124c <HAL_ADC_ConfigChannel>
 8004230:	b100      	cbz	r0, 8004234 <main+0x1f0>
 8004232:	e7fe      	b.n	8004232 <main+0x1ee>
  sConfig.Channel = ADC_CHANNEL_15;
 8004234:	230f      	movs	r3, #15
 8004236:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = 4;
 8004238:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800423a:	a917      	add	r1, sp, #92	; 0x5c
 800423c:	4823      	ldr	r0, [pc, #140]	; (80042cc <main+0x288>)
  sConfig.Rank = 4;
 800423e:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004240:	f7fd f804 	bl	800124c <HAL_ADC_ConfigChannel>
 8004244:	b100      	cbz	r0, 8004248 <main+0x204>
 8004246:	e7fe      	b.n	8004246 <main+0x202>
  sConfig.Channel = ADC_CHANNEL_6;
 8004248:	2406      	movs	r4, #6
  sConfig.Rank = 5;
 800424a:	2605      	movs	r6, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800424c:	a917      	add	r1, sp, #92	; 0x5c
 800424e:	481f      	ldr	r0, [pc, #124]	; (80042cc <main+0x288>)
  sConfig.Channel = ADC_CHANNEL_6;
 8004250:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfig.Rank = 5;
 8004252:	9618      	str	r6, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004254:	f7fc fffa 	bl	800124c <HAL_ADC_ConfigChannel>
 8004258:	b100      	cbz	r0, 800425c <main+0x218>
 800425a:	e7fe      	b.n	800425a <main+0x216>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800425c:	a917      	add	r1, sp, #92	; 0x5c
 800425e:	481b      	ldr	r0, [pc, #108]	; (80042cc <main+0x288>)
  sConfig.Channel = ADC_CHANNEL_5;
 8004260:	9617      	str	r6, [sp, #92]	; 0x5c
  sConfig.Rank = 6;
 8004262:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004264:	f7fc fff2 	bl	800124c <HAL_ADC_ConfigChannel>
 8004268:	b100      	cbz	r0, 800426c <main+0x228>
 800426a:	e7fe      	b.n	800426a <main+0x226>
  sConfig.Channel = ADC_CHANNEL_11;
 800426c:	230b      	movs	r3, #11
 800426e:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = 7;
 8004270:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004272:	a917      	add	r1, sp, #92	; 0x5c
 8004274:	4815      	ldr	r0, [pc, #84]	; (80042cc <main+0x288>)
  sConfig.Rank = 7;
 8004276:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004278:	f7fc ffe8 	bl	800124c <HAL_ADC_ConfigChannel>
 800427c:	b100      	cbz	r0, 8004280 <main+0x23c>
 800427e:	e7fe      	b.n	800427e <main+0x23a>
  sConfig.Channel = ADC_CHANNEL_10;
 8004280:	230a      	movs	r3, #10
 8004282:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = 8;
 8004284:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004286:	a917      	add	r1, sp, #92	; 0x5c
 8004288:	4810      	ldr	r0, [pc, #64]	; (80042cc <main+0x288>)
  sConfig.Rank = 8;
 800428a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800428c:	f7fc ffde 	bl	800124c <HAL_ADC_ConfigChannel>
 8004290:	b100      	cbz	r0, 8004294 <main+0x250>
 8004292:	e7fe      	b.n	8004292 <main+0x24e>
  htim2.Init.Prescaler = 72;
 8004294:	2348      	movs	r3, #72	; 0x48
 8004296:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 800429a:	4c0e      	ldr	r4, [pc, #56]	; (80042d4 <main+0x290>)
  htim2.Init.Prescaler = 72;
 800429c:	e884 000a 	stmia.w	r4, {r1, r3}
  htim2.Init.Period = 1000;
 80042a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a4:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a6:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042a8:	4620      	mov	r0, r4
  htim2.Init.Period = 1000;
 80042aa:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042ac:	f7fe fd4c 	bl	8002d48 <HAL_TIM_Base_Init>
 80042b0:	b190      	cbz	r0, 80042d8 <main+0x294>
 80042b2:	e7fe      	b.n	80042b2 <main+0x26e>
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40010800 	.word	0x40010800
 80042c0:	40010c00 	.word	0x40010c00
 80042c4:	2000016c 	.word	0x2000016c
 80042c8:	40000400 	.word	0x40000400
 80042cc:	200001b4 	.word	0x200001b4
 80042d0:	40012400 	.word	0x40012400
 80042d4:	200002f8 	.word	0x200002f8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042dc:	a917      	add	r1, sp, #92	; 0x5c
 80042de:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042e2:	f7fe fb96 	bl	8002a12 <HAL_TIM_ConfigClockSource>
 80042e6:	b100      	cbz	r0, 80042ea <main+0x2a6>
 80042e8:	e7fe      	b.n	80042e8 <main+0x2a4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ea:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042ec:	4629      	mov	r1, r5
 80042ee:	4824      	ldr	r0, [pc, #144]	; (8004380 <main+0x33c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f0:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f2:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042f4:	f7fe fe54 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80042f8:	b100      	cbz	r0, 80042fc <main+0x2b8>
 80042fa:	e7fe      	b.n	80042fa <main+0x2b6>
  huart3.Init.BaudRate = 57600;
 80042fc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004300:	260c      	movs	r6, #12
  huart3.Instance = USART3;
 8004302:	4c20      	ldr	r4, [pc, #128]	; (8004384 <main+0x340>)
  huart3.Init.BaudRate = 57600;
 8004304:	4a20      	ldr	r2, [pc, #128]	; (8004388 <main+0x344>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004306:	60a0      	str	r0, [r4, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004308:	60e0      	str	r0, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800430a:	6120      	str	r0, [r4, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430c:	61a0      	str	r0, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800430e:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004310:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 57600;
 8004312:	e884 000c 	stmia.w	r4, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004316:	6166      	str	r6, [r4, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004318:	f7fe ff04 	bl	8003124 <HAL_UART_Init>
 800431c:	b100      	cbz	r0, 8004320 <main+0x2dc>
 800431e:	e7fe      	b.n	800431e <main+0x2da>
  state.init = true;
 8004320:	2501      	movs	r5, #1
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <main+0x348>)
  HAL_ADC_Start_DMA(&hadc1,&ADC,8);
 8004324:	2208      	movs	r2, #8
 8004326:	491a      	ldr	r1, [pc, #104]	; (8004390 <main+0x34c>)
 8004328:	481a      	ldr	r0, [pc, #104]	; (8004394 <main+0x350>)
  state.init = true;
 800432a:	701d      	strb	r5, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1,&ADC,8);
 800432c:	f7fd f886 	bl	800143c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8004330:	2104      	movs	r1, #4
 8004332:	4819      	ldr	r0, [pc, #100]	; (8004398 <main+0x354>)
 8004334:	f7fe fe1e 	bl	8002f74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8004338:	2108      	movs	r1, #8
 800433a:	4817      	ldr	r0, [pc, #92]	; (8004398 <main+0x354>)
 800433c:	f7fe fe1a 	bl	8002f74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8004340:	4631      	mov	r1, r6
 8004342:	4815      	ldr	r0, [pc, #84]	; (8004398 <main+0x354>)
 8004344:	f7fe fe16 	bl	8002f74 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8004348:	480d      	ldr	r0, [pc, #52]	; (8004380 <main+0x33c>)
 800434a:	f7fe fb55 	bl	80029f8 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800434e:	2064      	movs	r0, #100	; 0x64
 8004350:	f7fc ff32 	bl	80011b8 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, receiveBuffer, 1);
 8004354:	462a      	mov	r2, r5
 8004356:	4911      	ldr	r1, [pc, #68]	; (800439c <main+0x358>)
 8004358:	4620      	mov	r0, r4
 800435a:	f7fe ff51 	bl	8003200 <HAL_UART_Receive_DMA>
	  processWriteUART(huart3);
 800435e:	466d      	mov	r5, sp
 8004360:	4e0f      	ldr	r6, [pc, #60]	; (80043a0 <main+0x35c>)
	  processReadUART();
 8004362:	f7ff f8b1 	bl	80034c8 <processReadUART>
	  processWriteUART(huart3);
 8004366:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800436a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800436c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800436e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004372:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800437a:	f7ff f945 	bl	8003608 <processWriteUART>
 800437e:	e7ee      	b.n	800435e <main+0x31a>
 8004380:	200002f8 	.word	0x200002f8
 8004384:	200000e0 	.word	0x200000e0
 8004388:	40004800 	.word	0x40004800
 800438c:	200001a8 	.word	0x200001a8
 8004390:	2000003c 	.word	0x2000003c
 8004394:	200001b4 	.word	0x200001b4
 8004398:	2000016c 	.word	0x2000016c
 800439c:	200003ad 	.word	0x200003ad
 80043a0:	200000f0 	.word	0x200000f0

080043a4 <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80043a4:	b510      	push	{r4, lr}
 /* here we consume the current value of rxChar */
 UART0_emulate_isr(1,receiveBuffer[0],huart3);
 80043a6:	4c05      	ldr	r4, [pc, #20]	; (80043bc <HAL_UART_RxCpltCallback+0x18>)
 80043a8:	7820      	ldrb	r0, [r4, #0]
 80043aa:	f7ff f877 	bl	800349c <UART0_emulate_isr.part.0>
 /* set up to receive another char */
 HAL_UART_Receive_DMA(&huart3, &receiveBuffer, 1);
 80043ae:	4621      	mov	r1, r4
}
 80043b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 HAL_UART_Receive_DMA(&huart3, &receiveBuffer, 1);
 80043b4:	2201      	movs	r2, #1
 80043b6:	4802      	ldr	r0, [pc, #8]	; (80043c0 <HAL_UART_RxCpltCallback+0x1c>)
 80043b8:	f7fe bf22 	b.w	8003200 <HAL_UART_Receive_DMA>
 80043bc:	200003ad 	.word	0x200003ad
 80043c0:	200000e0 	.word	0x200000e0

080043c4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80043c4:	e7fe      	b.n	80043c4 <Error_Handler>
	...

080043c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_MspInit+0x84>)
{
 80043ca:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80043cc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ce:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	619a      	str	r2, [r3, #24]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e0:	f7fd f970 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80043e4:	2200      	movs	r2, #0
 80043e6:	f06f 000b 	mvn.w	r0, #11
 80043ea:	4611      	mov	r1, r2
 80043ec:	f7fd f97c 	bl	80016e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	f06f 000a 	mvn.w	r0, #10
 80043f6:	4611      	mov	r1, r2
 80043f8:	f7fd f976 	bl	80016e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80043fc:	2200      	movs	r2, #0
 80043fe:	f06f 0009 	mvn.w	r0, #9
 8004402:	4611      	mov	r1, r2
 8004404:	f7fd f970 	bl	80016e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004408:	2200      	movs	r2, #0
 800440a:	f06f 0004 	mvn.w	r0, #4
 800440e:	4611      	mov	r1, r2
 8004410:	f7fd f96a 	bl	80016e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004414:	2200      	movs	r2, #0
 8004416:	f06f 0003 	mvn.w	r0, #3
 800441a:	4611      	mov	r1, r2
 800441c:	f7fd f964 	bl	80016e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	f06f 0001 	mvn.w	r0, #1
 8004426:	4611      	mov	r1, r2
 8004428:	f7fd f95e 	bl	80016e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800442c:	2200      	movs	r2, #0
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	4611      	mov	r1, r2
 8004434:	f7fd f958 	bl	80016e8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_MspInit+0x88>)
 800443a:	6853      	ldr	r3, [r2, #4]
 800443c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004446:	b003      	add	sp, #12
 8004448:	f85d fb04 	ldr.w	pc, [sp], #4
 800444c:	40021000 	.word	0x40021000
 8004450:	40010000 	.word	0x40010000

08004454 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004454:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004456:	6802      	ldr	r2, [r0, #0]
 8004458:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <HAL_ADC_MspInit+0x78>)
{
 800445a:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 800445c:	429a      	cmp	r2, r3
{
 800445e:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8004460:	d132      	bne.n	80044c8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004462:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004466:	699a      	ldr	r2, [r3, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004468:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800446a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446e:	619a      	str	r2, [r3, #24]
 8004470:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004472:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
 800447c:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447e:	4814      	ldr	r0, [pc, #80]	; (80044d0 <HAL_ADC_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
 8004480:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004482:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004484:	f7fd fc12 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
 8004488:	2370      	movs	r3, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	4812      	ldr	r0, [pc, #72]	; (80044d4 <HAL_ADC_MspInit+0x80>)
 800448c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
 800448e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004490:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f7fd fc0b 	bl	8001cac <HAL_GPIO_Init>
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004496:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8004498:	4c0f      	ldr	r4, [pc, #60]	; (80044d8 <HAL_ADC_MspInit+0x84>)
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800449c:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800449e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a2:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 80044a8:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044aa:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ac:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044ae:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044b0:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044b2:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b4:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044b6:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044b8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044ba:	f7fd f97c 	bl	80017b6 <HAL_DMA_Init>
 80044be:	b108      	cbz	r0, 80044c4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80044c0:	f7ff ff80 	bl	80043c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044c4:	622c      	str	r4, [r5, #32]
 80044c6:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044c8:	b007      	add	sp, #28
 80044ca:	bd30      	pop	{r4, r5, pc}
 80044cc:	40012400 	.word	0x40012400
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40010800 	.word	0x40010800
 80044d8:	2000026c 	.word	0x2000026c
 80044dc:	40020008 	.word	0x40020008

080044e0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80044e0:	6803      	ldr	r3, [r0, #0]
{
 80044e2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d115      	bne.n	8004516 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80044ee:	69da      	ldr	r2, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044f0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044fa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044fc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004506:	f7fd f8ef 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800450a:	201c      	movs	r0, #28
 800450c:	f7fd f920 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004510:	b003      	add	sp, #12
 8004512:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_TIM_Base_MspInit+0x54>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d1f9      	bne.n	8004510 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_TIM_Base_MspInit+0x58>)
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	f042 0202 	orr.w	r2, r2, #2
 8004524:	61da      	str	r2, [r3, #28]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	9b01      	ldr	r3, [sp, #4]
}
 8004530:	e7ee      	b.n	8004510 <HAL_TIM_Base_MspInit+0x30>
 8004532:	bf00      	nop
 8004534:	40000400 	.word	0x40000400
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800453c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 800453e:	6802      	ldr	r2, [r0, #0]
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_TIM_MspPostInit+0x30>)
 8004542:	429a      	cmp	r2, r3
 8004544:	d110      	bne.n	8004568 <HAL_TIM_MspPostInit+0x2c>
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = StarterPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004546:	2402      	movs	r4, #2
 8004548:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);
 800454a:	4669      	mov	r1, sp
 800454c:	4808      	ldr	r0, [pc, #32]	; (8004570 <HAL_TIM_MspPostInit+0x34>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004552:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);
 8004554:	f7fd fbaa 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = InjectorPWM_Pin|CoolerPWM_Pin;
 8004558:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800455a:	4669      	mov	r1, sp
 800455c:	4805      	ldr	r0, [pc, #20]	; (8004574 <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004564:	f7fd fba2 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004568:	b004      	add	sp, #16
 800456a:	bd10      	pop	{r4, pc}
 800456c:	40000400 	.word	0x40000400
 8004570:	40010800 	.word	0x40010800
 8004574:	40010c00 	.word	0x40010c00

08004578 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004578:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800457a:	6802      	ldr	r2, [r0, #0]
 800457c:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_UART_MspInit+0xc0>)
{
 800457e:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 8004580:	429a      	cmp	r2, r3
{
 8004582:	4606      	mov	r6, r0
  if(huart->Instance==USART3)
 8004584:	d155      	bne.n	8004632 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004586:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800458a:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800458e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004592:	61da      	str	r2, [r3, #28]
 8004594:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004596:	4829      	ldr	r0, [pc, #164]	; (800463c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a6:	2302      	movs	r3, #2
 80045a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045aa:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ac:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b0:	f7fd fb7c 	bl	8001cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b8:	4820      	ldr	r0, [pc, #128]	; (800463c <HAL_UART_MspInit+0xc4>)
 80045ba:	a902      	add	r1, sp, #8

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80045bc:	4c20      	ldr	r4, [pc, #128]	; (8004640 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045c0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c4:	f7fd fb72 	bl	8001cac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_UART_MspInit+0xcc>)
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80045ca:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045cc:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	60e3      	str	r3, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80045d4:	2320      	movs	r3, #32
 80045d6:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80045d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045dc:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045de:	6125      	str	r5, [r4, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045e0:	6165      	str	r5, [r4, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80045e2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80045e4:	f7fd f8e7 	bl	80017b6 <HAL_DMA_Init>
 80045e8:	b108      	cbz	r0, 80045ee <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80045ea:	f7ff feeb 	bl	80043c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Channel2;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045ee:	f04f 0c10 	mov.w	ip, #16
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <HAL_UART_MspInit+0xd0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80045f4:	6374      	str	r4, [r6, #52]	; 0x34
 80045f6:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80045f8:	4c14      	ldr	r4, [pc, #80]	; (800464c <HAL_UART_MspInit+0xd4>)
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045fa:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045fc:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	60a3      	str	r3, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004604:	6123      	str	r3, [r4, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004606:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004608:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800460a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800460e:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004610:	60e2      	str	r2, [r4, #12]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004612:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004614:	f7fd f8cf 	bl	80017b6 <HAL_DMA_Init>
 8004618:	b108      	cbz	r0, 800461e <HAL_UART_MspInit+0xa6>
    {
      Error_Handler();
 800461a:	f7ff fed3 	bl	80043c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800461e:	2200      	movs	r2, #0
 8004620:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004622:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004624:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004626:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004628:	f7fd f85e 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800462c:	2027      	movs	r0, #39	; 0x27
 800462e:	f7fd f88f 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004632:	b006      	add	sp, #24
 8004634:	bd70      	pop	{r4, r5, r6, pc}
 8004636:	bf00      	nop
 8004638:	40004800 	.word	0x40004800
 800463c:	40010c00 	.word	0x40010c00
 8004640:	200000a8 	.word	0x200000a8
 8004644:	40020030 	.word	0x40020030
 8004648:	4002001c 	.word	0x4002001c
 800464c:	2000012c 	.word	0x2000012c

08004650 <NMI_Handler>:
 8004650:	4770      	bx	lr

08004652 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004652:	e7fe      	b.n	8004652 <HardFault_Handler>

08004654 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004654:	e7fe      	b.n	8004654 <MemManage_Handler>

08004656 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004656:	e7fe      	b.n	8004656 <BusFault_Handler>

08004658 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004658:	e7fe      	b.n	8004658 <UsageFault_Handler>

0800465a <SVC_Handler>:
 800465a:	4770      	bx	lr

0800465c <DebugMon_Handler>:
 800465c:	4770      	bx	lr

0800465e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800465e:	4770      	bx	lr

08004660 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004662:	f7fc fd9b 	bl	800119c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800466a:	f7fd b8a0 	b.w	80017ae <HAL_SYSTICK_IRQHandler>
	...

08004670 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <DMA1_Channel1_IRQHandler+0x8>)
 8004672:	f7fd b8f3 	b.w	800185c <HAL_DMA_IRQHandler>
 8004676:	bf00      	nop
 8004678:	2000026c 	.word	0x2000026c

0800467c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <DMA1_Channel2_IRQHandler+0x8>)
 800467e:	f7fd b8ed 	b.w	800185c <HAL_DMA_IRQHandler>
 8004682:	bf00      	nop
 8004684:	2000012c 	.word	0x2000012c

08004688 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <DMA1_Channel3_IRQHandler+0x8>)
 800468a:	f7fd b8e7 	b.w	800185c <HAL_DMA_IRQHandler>
 800468e:	bf00      	nop
 8004690:	200000a8 	.word	0x200000a8

08004694 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <TIM2_IRQHandler+0x8>)
 8004696:	f7fe ba79 	b.w	8002b8c <HAL_TIM_IRQHandler>
 800469a:	bf00      	nop
 800469c:	200002f8 	.word	0x200002f8

080046a0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <USART3_IRQHandler+0x8>)
 80046a2:	f7fe be37 	b.w	8003314 <HAL_UART_IRQHandler>
 80046a6:	bf00      	nop
 80046a8:	200000e0 	.word	0x200000e0

080046ac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80046ac:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <SystemInit+0x4c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	4a10      	ldr	r2, [pc, #64]	; (80046fc <SystemInit+0x50>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80046c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80046d8:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 80046e0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80046e2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80046e6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80046e8:	2200      	movs	r2, #0
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80046ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <SystemInit+0x54>)
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	f0ff0000 	.word	0xf0ff0000
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004704:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004706:	e003      	b.n	8004710 <LoopCopyDataInit>

08004708 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800470a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800470c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800470e:	3104      	adds	r1, #4

08004710 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004710:	4809      	ldr	r0, [pc, #36]	; (8004738 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8004714:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004716:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004718:	d3f6      	bcc.n	8004708 <CopyDataInit>
  ldr r2, =_sbss
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 800471c:	e002      	b.n	8004724 <LoopFillZerobss>

0800471e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800471e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004720:	f842 3b04 	str.w	r3, [r2], #4

08004724 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8004726:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004728:	d3f9      	bcc.n	800471e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800472a:	f7ff ffbf 	bl	80046ac <SystemInit>
/* Call the application's entry point.*/
  bl main
 800472e:	f7ff fc89 	bl	8004044 <main>
  bx lr
 8004732:	4770      	bx	lr
  ldr r3, =_sidata
 8004734:	080047a0 	.word	0x080047a0
  ldr r0, =_sdata
 8004738:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800473c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8004740:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8004744:	200003c0 	.word	0x200003c0

08004748 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004748:	e7fe      	b.n	8004748 <ADC1_2_IRQHandler>
	...

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
