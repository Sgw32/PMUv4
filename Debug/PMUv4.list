
C:\workspace\PMUv4\Debug\PMUv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003808  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080039f0  080039f0  000139f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c4  20000004  08003a28  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001c8  08003a28  000201c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00004c90  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000bf2f  00000000  00000000  00024cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ddb  00000000  00000000  00030bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f0  00000000  00000000  000329c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb8  00000000  00000000  000331b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000064f6  00000000  00000000  00033d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002cea  00000000  00000000  0003a266  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003cf50  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016ec  00000000  00000000  0003cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000004 	.word	0x20000004
 8000204:	00000000 	.word	0x00000000
 8000208:	080039d8 	.word	0x080039d8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000008 	.word	0x20000008
 8000224:	080039d8 	.word	0x080039d8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	; 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	d1ed      	bne.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__gesf2>:
 8000d88:	f04f 3cff 	mov.w	ip, #4294967295
 8000d8c:	e006      	b.n	8000d9c <__cmpsf2+0x4>
 8000d8e:	bf00      	nop

08000d90 <__lesf2>:
 8000d90:	f04f 0c01 	mov.w	ip, #1
 8000d94:	e002      	b.n	8000d9c <__cmpsf2+0x4>
 8000d96:	bf00      	nop

08000d98 <__cmpsf2>:
 8000d98:	f04f 0c01 	mov.w	ip, #1
 8000d9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000da0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dac:	bf18      	it	ne
 8000dae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db2:	d011      	beq.n	8000dd8 <__cmpsf2+0x40>
 8000db4:	b001      	add	sp, #4
 8000db6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dba:	bf18      	it	ne
 8000dbc:	ea90 0f01 	teqne	r0, r1
 8000dc0:	bf58      	it	pl
 8000dc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc6:	bf88      	it	hi
 8000dc8:	17c8      	asrhi	r0, r1, #31
 8000dca:	bf38      	it	cc
 8000dcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dd0:	bf18      	it	ne
 8000dd2:	f040 0001 	orrne.w	r0, r0, #1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ddc:	d102      	bne.n	8000de4 <__cmpsf2+0x4c>
 8000dde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000de2:	d105      	bne.n	8000df0 <__cmpsf2+0x58>
 8000de4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de8:	d1e4      	bne.n	8000db4 <__cmpsf2+0x1c>
 8000dea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dee:	d0e1      	beq.n	8000db4 <__cmpsf2+0x1c>
 8000df0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <__aeabi_cfrcmple>:
 8000df8:	4684      	mov	ip, r0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	4661      	mov	r1, ip
 8000dfe:	e7ff      	b.n	8000e00 <__aeabi_cfcmpeq>

08000e00 <__aeabi_cfcmpeq>:
 8000e00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e02:	f7ff ffc9 	bl	8000d98 <__cmpsf2>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	bf48      	it	mi
 8000e0a:	f110 0f00 	cmnmi.w	r0, #0
 8000e0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e10 <__aeabi_fcmpeq>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff fff4 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e18:	bf0c      	ite	eq
 8000e1a:	2001      	moveq	r0, #1
 8000e1c:	2000      	movne	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmplt>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffea 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e2c:	bf34      	ite	cc
 8000e2e:	2001      	movcc	r0, #1
 8000e30:	2000      	movcs	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmple>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffe0 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e40:	bf94      	ite	ls
 8000e42:	2001      	movls	r0, #1
 8000e44:	2000      	movhi	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_fcmpge>:
 8000e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e50:	f7ff ffd2 	bl	8000df8 <__aeabi_cfrcmple>
 8000e54:	bf94      	ite	ls
 8000e56:	2001      	movls	r0, #1
 8000e58:	2000      	movhi	r0, #0
 8000e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5e:	bf00      	nop

08000e60 <__aeabi_fcmpgt>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff ffc8 	bl	8000df8 <__aeabi_cfrcmple>
 8000e68:	bf34      	ite	cc
 8000e6a:	2001      	movcc	r0, #1
 8000e6c:	2000      	movcs	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_f2uiz>:
 8000e74:	0042      	lsls	r2, r0, #1
 8000e76:	d20e      	bcs.n	8000e96 <__aeabi_f2uiz+0x22>
 8000e78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e7c:	d30b      	bcc.n	8000e96 <__aeabi_f2uiz+0x22>
 8000e7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e86:	d409      	bmi.n	8000e9c <__aeabi_f2uiz+0x28>
 8000e88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e90:	fa23 f002 	lsr.w	r0, r3, r2
 8000e94:	4770      	bx	lr
 8000e96:	f04f 0000 	mov.w	r0, #0
 8000e9a:	4770      	bx	lr
 8000e9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_f2uiz+0x32>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d102      	bne.n	8000eac <__aeabi_f2uiz+0x38>
 8000ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eaa:	4770      	bx	lr
 8000eac:	f04f 0000 	mov.w	r0, #0
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eb6:	e003      	b.n	8000ec0 <LoopCopyDataInit>

08000eb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000eba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ebc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ebe:	3104      	adds	r1, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000ec4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ec6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ec8:	d3f6      	bcc.n	8000eb8 <CopyDataInit>
  ldr r2, =_sbss
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000ecc:	e002      	b.n	8000ed4 <LoopFillZerobss>

08000ece <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ed0:	f842 3b04 	str.w	r3, [r2], #4

08000ed4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ed8:	d3f9      	bcc.n	8000ece <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eda:	f000 f80f 	bl	8000efc <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000ede:	f002 fb15 	bl	800350c <main>
  bx lr
 8000ee2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000ee4:	08003a24 	.word	0x08003a24
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000eec:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000ef0:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000ef4:	200001c8 	.word	0x200001c8

08000ef8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <SystemInit+0x4c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000f06:	6859      	ldr	r1, [r3, #4]
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <SystemInit+0x50>)
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f18:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f20:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f28:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8000f30:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8000f32:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000f36:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x54>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	f0ff0000 	.word	0xf0ff0000
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b510      	push	{r4, lr}
 8000f56:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f58:	f001 faa0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f64:	f000 fb02 	bl	800156c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 fabc 	bl	80014ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f74:	2000      	movs	r0, #0
 8000f76:	bd10      	pop	{r4, pc}

08000f78 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7a:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7e:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	f000 fa9f 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ffe2 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f002 fc2e 	bl	80037f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000f94:	2000      	movs	r0, #0
 8000f96:	bd08      	pop	{r3, pc}
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f9c:	4a02      	ldr	r2, [pc, #8]	; (8000fa8 <HAL_IncTick+0xc>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000020 	.word	0x20000020

08000fac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <HAL_GetTick+0x8>)
 8000fae:	6818      	ldr	r0, [r3, #0]
}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000020 	.word	0x20000020

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fb8:	b513      	push	{r0, r1, r4, lr}
 8000fba:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000fbc:	f7ff fff6 	bl	8000fac <HAL_GetTick>
 8000fc0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000fc2:	f7ff fff3 	bl	8000fac <HAL_GetTick>
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	1b00      	subs	r0, r0, r4
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d3f9      	bcc.n	8000fc2 <HAL_Delay+0xa>
  {
  }
}
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd10      	pop	{r4, pc}

08000fd2 <HAL_ADC_ConvCpltCallback>:
 8000fd2:	4770      	bx	lr

08000fd4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000fd6:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fda:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000fde:	d11b      	bne.n	8001018 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	6892      	ldr	r2, [r2, #8]
 8000fec:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000ff0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000ff4:	d10c      	bne.n	8001010 <ADC_DMAConvCplt+0x3c>
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	b952      	cbnz	r2, 8001010 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001004:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001006:	bf5e      	ittt	pl
 8001008:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800100a:	f042 0201 	orrpl.w	r2, r2, #1
 800100e:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffde 	bl	8000fd2 <HAL_ADC_ConvCpltCallback>
 8001016:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001018:	6a1b      	ldr	r3, [r3, #32]
  }
}
 800101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc); 
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4718      	bx	r3

08001022 <HAL_ADC_ConvHalfCpltCallback>:
 8001022:	4770      	bx	lr

08001024 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001024:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001026:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001028:	f7ff fffb 	bl	8001022 <HAL_ADC_ConvHalfCpltCallback>
 800102c:	bd08      	pop	{r3, pc}

0800102e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800102e:	4770      	bx	lr

08001030 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001030:	6a40      	ldr	r0, [r0, #36]	; 0x24
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001032:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001034:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800103c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001044:	f7ff fff3 	bl	800102e <HAL_ADC_ErrorCallback>
 8001048:	bd08      	pop	{r3, pc}
	...

0800104c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800104c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001052:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001056:	2b01      	cmp	r3, #1
 8001058:	f000 80ae 	beq.w	80011b8 <HAL_ADC_ConfigChannel+0x16c>
 800105c:	2301      	movs	r3, #1
 800105e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001062:	684b      	ldr	r3, [r1, #4]
 8001064:	6804      	ldr	r4, [r0, #0]
 8001066:	2b06      	cmp	r3, #6
 8001068:	680d      	ldr	r5, [r1, #0]
 800106a:	d818      	bhi.n	800109e <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800106c:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8001072:	fa92 f6a2 	rbit	r6, r2
 8001076:	fab6 f686 	clz	r6, r6
 800107a:	3b01      	subs	r3, #1
 800107c:	fa92 f2a2 	rbit	r2, r2
 8001080:	fab2 f282 	clz	r2, r2
 8001084:	435e      	muls	r6, r3
 8001086:	4353      	muls	r3, r2
 8001088:	f04f 0e1f 	mov.w	lr, #31
 800108c:	fa0e f606 	lsl.w	r6, lr, r6
 8001090:	ea27 0606 	bic.w	r6, r7, r6
 8001094:	fa05 f303 	lsl.w	r3, r5, r3
 8001098:	4333      	orrs	r3, r6
 800109a:	6363      	str	r3, [r4, #52]	; 0x34
 800109c:	e030      	b.n	8001100 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800109e:	2b0c      	cmp	r3, #12
 80010a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80010a4:	d816      	bhi.n	80010d4 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010a6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80010a8:	fa92 f6a2 	rbit	r6, r2
 80010ac:	fab6 f686 	clz	r6, r6
 80010b0:	3b07      	subs	r3, #7
 80010b2:	fa92 f2a2 	rbit	r2, r2
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	435e      	muls	r6, r3
 80010bc:	435a      	muls	r2, r3
 80010be:	f04f 0e1f 	mov.w	lr, #31
 80010c2:	fa0e f606 	lsl.w	r6, lr, r6
 80010c6:	ea27 0606 	bic.w	r6, r7, r6
 80010ca:	fa05 f202 	lsl.w	r2, r5, r2
 80010ce:	4332      	orrs	r2, r6
 80010d0:	6322      	str	r2, [r4, #48]	; 0x30
 80010d2:	e015      	b.n	8001100 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80010d6:	fa92 f6a2 	rbit	r6, r2
 80010da:	fab6 f686 	clz	r6, r6
 80010de:	3b0d      	subs	r3, #13
 80010e0:	fa92 f2a2 	rbit	r2, r2
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	435e      	muls	r6, r3
 80010ea:	4353      	muls	r3, r2
 80010ec:	f04f 0e1f 	mov.w	lr, #31
 80010f0:	fa0e f606 	lsl.w	r6, lr, r6
 80010f4:	ea27 0606 	bic.w	r6, r7, r6
 80010f8:	fa05 f303 	lsl.w	r3, r5, r3
 80010fc:	4333      	orrs	r3, r6
 80010fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001100:	2d09      	cmp	r5, #9
 8001102:	f04f 0338 	mov.w	r3, #56	; 0x38
 8001106:	688e      	ldr	r6, [r1, #8]
 8001108:	d918      	bls.n	800113c <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800110a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800110e:	fa93 f7a3 	rbit	r7, r3
 8001112:	fab7 f787 	clz	r7, r7
 8001116:	f1a5 010a 	sub.w	r1, r5, #10
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	fab3 f283 	clz	r2, r3
 8001122:	fb01 f307 	mul.w	r3, r1, r7
 8001126:	4351      	muls	r1, r2
 8001128:	2707      	movs	r7, #7
 800112a:	fa07 f303 	lsl.w	r3, r7, r3
 800112e:	ea2e 0303 	bic.w	r3, lr, r3
 8001132:	fa06 f201 	lsl.w	r2, r6, r1
 8001136:	431a      	orrs	r2, r3
 8001138:	60e2      	str	r2, [r4, #12]
 800113a:	e013      	b.n	8001164 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800113c:	6927      	ldr	r7, [r4, #16]
 800113e:	fa93 f1a3 	rbit	r1, r3
 8001142:	fab1 f181 	clz	r1, r1
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	4369      	muls	r1, r5
 8001150:	436b      	muls	r3, r5
 8001152:	2207      	movs	r2, #7
 8001154:	fa02 f101 	lsl.w	r1, r2, r1
 8001158:	ea27 0101 	bic.w	r1, r7, r1
 800115c:	fa06 f203 	lsl.w	r2, r6, r3
 8001160:	430a      	orrs	r2, r1
 8001162:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001164:	f1a5 0310 	sub.w	r3, r5, #16
 8001168:	2b01      	cmp	r3, #1
 800116a:	d901      	bls.n	8001170 <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	e01e      	b.n	80011ae <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_ConfigChannel+0x174>)
 8001172:	429c      	cmp	r4, r3
 8001174:	d116      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001176:	68a3      	ldr	r3, [r4, #8]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	d4f7      	bmi.n	800116c <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117c:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800117e:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001184:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001186:	d1f1      	bne.n	800116c <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_ADC_ConfigChannel+0x178>)
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_ADC_ConfigChannel+0x17c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001192:	230a      	movs	r3, #10
 8001194:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8001196:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001198:	9b01      	ldr	r3, [sp, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0e6      	beq.n	800116c <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 800119e:	9b01      	ldr	r3, [sp, #4]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	e7f8      	b.n	8001196 <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	4618      	mov	r0, r3
 80011b6:	e000      	b.n	80011ba <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b8:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80011ba:	b003      	add	sp, #12
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012400 	.word	0x40012400
 80011c4:	20000000 	.word	0x20000000
 80011c8:	000f4240 	.word	0x000f4240

080011cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d2:	6803      	ldr	r3, [r0, #0]
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011d4:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	07d2      	lsls	r2, r2, #31
 80011da:	d501      	bpl.n	80011e0 <ADC_Enable+0x14>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011dc:	2000      	movs	r0, #0
 80011de:	e026      	b.n	800122e <ADC_Enable+0x62>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <ADC_Enable+0x68>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <ADC_Enable+0x6c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	fbb3 f3f2 	udiv	r3, r3, r2
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 80011f2:	9301      	str	r3, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 80011f4:	9b01      	ldr	r3, [sp, #4]
 80011f6:	b113      	cbz	r3, 80011fe <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80011f8:	9b01      	ldr	r3, [sp, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	e7f9      	b.n	80011f2 <ADC_Enable+0x26>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011fe:	f7ff fed5 	bl	8000fac <HAL_GetTick>
 8001202:	4606      	mov	r6, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f013 0501 	ands.w	r5, r3, #1
 800120c:	d1e6      	bne.n	80011dc <ADC_Enable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800120e:	f7ff fecd 	bl	8000fac <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	2802      	cmp	r0, #2
 8001216:	d9f5      	bls.n	8001204 <ADC_Enable+0x38>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800121a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    while(ADC_IS_ENABLE(hadc) == RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001226:	2001      	movs	r0, #1
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
}
 800122e:	b002      	add	sp, #8
 8001230:	bd70      	pop	{r4, r5, r6, pc}
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	000f4240 	.word	0x000f4240

0800123c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800123c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8001240:	4690      	mov	r8, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_ADC_Start_DMA+0x10c>)
 8001244:	6802      	ldr	r2, [r0, #0]
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001246:	4604      	mov	r4, r0
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001248:	429a      	cmp	r2, r3
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800124a:	460f      	mov	r7, r1
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800124c:	d002      	beq.n	8001254 <HAL_ADC_Start_DMA+0x18>
 800124e:	493f      	ldr	r1, [pc, #252]	; (800134c <HAL_ADC_Start_DMA+0x110>)
 8001250:	428a      	cmp	r2, r1
 8001252:	d103      	bne.n	800125c <HAL_ADC_Start_DMA+0x20>
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800125a:	d16f      	bne.n	800133c <HAL_ADC_Start_DMA+0x100>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800125c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001260:	2b01      	cmp	r3, #1
 8001262:	d06e      	beq.n	8001342 <HAL_ADC_Start_DMA+0x106>
 8001264:	2301      	movs	r3, #1
 8001266:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff ffae 	bl	80011cc <ADC_Enable>
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001270:	2800      	cmp	r0, #0
 8001272:	d15e      	bne.n	8001332 <HAL_ADC_Start_DMA+0xf6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001274:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001276:	6821      	ldr	r1, [r4, #0]
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <HAL_ADC_Start_DMA+0x110>)
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800127e:	f020 0001 	bic.w	r0, r0, #1
 8001282:	f440 7080 	orr.w	r0, r0, #256	; 0x100
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001286:	4299      	cmp	r1, r3
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001288:	62a0      	str	r0, [r4, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800128a:	d104      	bne.n	8001296 <HAL_ADC_Start_DMA+0x5a>
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <HAL_ADC_Start_DMA+0x10c>)
 800128e:	6853      	ldr	r3, [r2, #4]
 8001290:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001294:	d10d      	bne.n	80012b2 <HAL_ADC_Start_DMA+0x76>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001298:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800129c:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800129e:	684b      	ldr	r3, [r1, #4]
 80012a0:	055a      	lsls	r2, r3, #21
 80012a2:	d513      	bpl.n	80012cc <HAL_ADC_Start_DMA+0x90>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80012b0:	e00c      	b.n	80012cc <HAL_ADC_Start_DMA+0x90>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012b8:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ba:	6853      	ldr	r3, [r2, #4]
 80012bc:	055b      	lsls	r3, r3, #21
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012be:	bf41      	itttt	mi
 80012c0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80012c2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80012c6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80012ca:	62a0      	strmi	r0, [r4, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ce:	6a20      	ldr	r0, [r4, #32]
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012d4:	bf18      	it	ne
 80012d6:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012d8:	f04f 0500 	mov.w	r5, #0
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012dc:	bf18      	it	ne
 80012de:	f023 0306 	bicne.w	r3, r3, #6
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	62e3      	str	r3, [r4, #44]	; 0x2c
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_ADC_Start_DMA+0x114>)
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012e6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ea:	6283      	str	r3, [r0, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_ADC_Start_DMA+0x118>)
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012ee:	463a      	mov	r2, r7
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012f0:	62c3      	str	r3, [r0, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_ADC_Start_DMA+0x11c>)
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012f4:	314c      	adds	r1, #76	; 0x4c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f6:	6303      	str	r3, [r0, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012f8:	f06f 0302 	mvn.w	r3, #2
 80012fc:	f841 3c4c 	str.w	r3, [r1, #-76]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001300:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	f841 3c44 	str.w	r3, [r1, #-68]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800130c:	4643      	mov	r3, r8
 800130e:	f000 f979 	bl	8001604 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001312:	6823      	ldr	r3, [r4, #0]
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001314:	4628      	mov	r0, r5
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800131c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	bf0c      	ite	eq
 8001324:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001328:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001332:	2300      	movs	r3, #0
 8001334:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001338:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800133c:	2001      	movs	r0, #1
 800133e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001342:	2002      	movs	r0, #2
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001344:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8001348:	40012400 	.word	0x40012400
 800134c:	40012800 	.word	0x40012800
 8001350:	08000fd5 	.word	0x08000fd5
 8001354:	08001025 	.word	0x08001025
 8001358:	08001031 	.word	0x08001031

0800135c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800135c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800135e:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001360:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	07d2      	lsls	r2, r2, #31
 8001366:	d401      	bmi.n	800136c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001368:	2000      	movs	r0, #0
 800136a:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001374:	f7ff fe1a 	bl	8000fac <HAL_GetTick>
 8001378:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	07db      	lsls	r3, r3, #31
 8001380:	d5f2      	bpl.n	8001368 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001382:	f7ff fe13 	bl	8000fac <HAL_GetTick>
 8001386:	1b40      	subs	r0, r0, r5
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f6      	bls.n	800137a <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800139e:	bd38      	pop	{r3, r4, r5, pc}

080013a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a2:	4604      	mov	r4, r0
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f000 8088 	beq.w	80014ba <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013ac:	b923      	cbnz	r3, 80013b8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b4:	f002 fa62 	bl	800387c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff ffcf 	bl	800135c <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013c0:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013c6:	d175      	bne.n	80014b4 <HAL_ADC_Init+0x114>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d173      	bne.n	80014b4 <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d0:	f023 0302 	bic.w	r3, r3, #2
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80013da:	68e0      	ldr	r0, [r4, #12]
 80013dc:	2302      	movs	r3, #2
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80013e6:	6861      	ldr	r1, [r4, #4]
 80013e8:	69e2      	ldr	r2, [r4, #28]
 80013ea:	fa00 f303 	lsl.w	r3, r0, r3
 80013ee:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013f0:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80013f2:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80013f8:	d005      	beq.n	8001406 <HAL_ADC_Init+0x66>
 80013fa:	2901      	cmp	r1, #1
 80013fc:	bf14      	ite	ne
 80013fe:	2200      	movne	r2, #0
 8001400:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8001404:	e000      	b.n	8001408 <HAL_ADC_Init+0x68>
 8001406:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001408:	6965      	ldr	r5, [r4, #20]
 800140a:	2d01      	cmp	r5, #1
 800140c:	d115      	bne.n	800143a <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800140e:	b960      	cbnz	r0, 800142a <HAL_ADC_Init+0x8a>
 8001410:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8001414:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001418:	fab0 f580 	clz	r5, r0
 800141c:	69a0      	ldr	r0, [r4, #24]
 800141e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001422:	3801      	subs	r0, #1
 8001424:	40a8      	lsls	r0, r5
 8001426:	4302      	orrs	r2, r0
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800142c:	f040 0020 	orr.w	r0, r0, #32
 8001430:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001434:	f040 0001 	orr.w	r0, r0, #1
 8001438:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800143a:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800143c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001440:	6845      	ldr	r5, [r0, #4]
 8001442:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001446:	ea42 0205 	orr.w	r2, r2, r5
 800144a:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800144c:	6885      	ldr	r5, [r0, #8]
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_ADC_Init+0x120>)
 8001450:	ea02 0205 	and.w	r2, r2, r5
 8001454:	ea42 0203 	orr.w	r2, r2, r3
 8001458:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800145a:	d001      	beq.n	8001460 <HAL_ADC_Init+0xc0>
 800145c:	2901      	cmp	r1, #1
 800145e:	d10a      	bne.n	8001476 <HAL_ADC_Init+0xd6>
 8001460:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8001464:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001468:	fab2 f282 	clz	r2, r2
 800146c:	6921      	ldr	r1, [r4, #16]
 800146e:	3901      	subs	r1, #1
 8001470:	fa01 f202 	lsl.w	r2, r1, r2
 8001474:	e000      	b.n	8001478 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 8001476:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001478:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800147a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800147e:	430a      	orrs	r2, r1
 8001480:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001482:	6881      	ldr	r1, [r0, #8]
 8001484:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_ADC_Init+0x124>)
 8001486:	400a      	ands	r2, r1
 8001488:	4293      	cmp	r3, r2
 800148a:	d108      	bne.n	800149e <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148c:	2000      	movs	r0, #0
 800148e:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	62a3      	str	r3, [r4, #40]	; 0x28
 800149c:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800149e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a0:	f023 0312 	bic.w	r3, r3, #18
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014b2:	e002      	b.n	80014ba <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80014ba:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80014bc:	bd38      	pop	{r3, r4, r5, pc}
 80014be:	bf00      	nop
 80014c0:	ffe1f7fd 	.word	0xffe1f7fd
 80014c4:	ff1f0efe 	.word	0xff1f0efe

080014c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80014ca:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80014ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80014d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	0c1b      	lsrs	r3, r3, #16
 80014da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80014e4:	60d3      	str	r3, [r2, #12]
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ee:	b530      	push	{r4, r5, lr}
 80014f0:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	2c04      	cmp	r4, #4
 80014fe:	bf28      	it	cs
 8001500:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	2d06      	cmp	r5, #6

  return (
 8001504:	f04f 0501 	mov.w	r5, #1
 8001508:	fa05 f404 	lsl.w	r4, r5, r4
 800150c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001510:	bf8c      	ite	hi
 8001512:	3b03      	subhi	r3, #3
 8001514:	2300      	movls	r3, #0

  return (
 8001516:	400c      	ands	r4, r1
 8001518:	409c      	lsls	r4, r3
 800151a:	fa05 f303 	lsl.w	r3, r5, r3
 800151e:	3b01      	subs	r3, #1
 8001520:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001522:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001524:	ea42 0204 	orr.w	r2, r2, r4
 8001528:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	bfaf      	iteee	ge
 800152e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	4b07      	ldrlt	r3, [pc, #28]	; (8001550 <HAL_NVIC_SetPriority+0x64>)
 8001534:	f000 000f 	andlt.w	r0, r0, #15
 8001538:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	bfa5      	ittet	ge
 800153c:	b2d2      	uxtbge	r2, r2
 800153e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001548:	bd30      	pop	{r4, r5, pc}
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	e000ed14 	.word	0xe000ed14

08001554 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001554:	0942      	lsrs	r2, r0, #5
 8001556:	2301      	movs	r3, #1
 8001558:	f000 001f 	and.w	r0, r0, #31
 800155c:	fa03 f000 	lsl.w	r0, r3, r0
 8001560:	4b01      	ldr	r3, [pc, #4]	; (8001568 <HAL_NVIC_EnableIRQ+0x14>)
 8001562:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	3801      	subs	r0, #1
 800156e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001572:	d20a      	bcs.n	800158a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_SYSTICK_Config+0x28>)
 8001578:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800159a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	bf0c      	ite	eq
 80015a0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015a4:	f022 0204 	bicne.w	r2, r2, #4
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	4770      	bx	lr
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015b0:	4770      	bx	lr

080015b2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80015b2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015b4:	f7ff fffc 	bl	80015b0 <HAL_SYSTICK_Callback>
 80015b8:	bd08      	pop	{r3, pc}

080015ba <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80015ba:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015bc:	b300      	cbz	r0, 8001600 <HAL_DMA_Init+0x46>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80015be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80015c2:	b90b      	cbnz	r3, 80015c8 <HAL_DMA_Init+0xe>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80015c4:	f880 3020 	strb.w	r3, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015c8:	6882      	ldr	r2, [r0, #8]
 80015ca:	6841      	ldr	r1, [r0, #4]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015cc:	6804      	ldr	r4, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015ce:	4311      	orrs	r1, r2
 80015d0:	68c2      	ldr	r2, [r0, #12]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d2:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015d4:	4311      	orrs	r1, r2
 80015d6:	6902      	ldr	r2, [r0, #16]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015dc:	4311      	orrs	r1, r2
 80015de:	6942      	ldr	r2, [r0, #20]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e4:	4311      	orrs	r1, r2
 80015e6:	6982      	ldr	r2, [r0, #24]
 80015e8:	4311      	orrs	r1, r2
 80015ea:	69c2      	ldr	r2, [r0, #28]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80015f0:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015f2:	2201      	movs	r2, #1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015f8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  return HAL_OK;
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001600:	2001      	movs	r0, #1

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  
  return HAL_OK;
}
 8001602:	bd10      	pop	{r4, pc}

08001604 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001604:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8001606:	f890 4020 	ldrb.w	r4, [r0, #32]
 800160a:	2c01      	cmp	r4, #1
 800160c:	f04f 0402 	mov.w	r4, #2
 8001610:	d023      	beq.n	800165a <HAL_DMA_Start_IT+0x56>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001612:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001616:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 8001618:	2501      	movs	r5, #1
 800161a:	f880 5020 	strb.w	r5, [r0, #32]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800161e:	6825      	ldr	r5, [r4, #0]
 8001620:	f025 0501 	bic.w	r5, r5, #1
 8001624:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001626:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001628:	6843      	ldr	r3, [r0, #4]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
  
  return HAL_OK;
 800162a:	2000      	movs	r0, #0
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800162c:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800162e:	bf0b      	itete	eq
 8001630:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001632:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001634:	60e1      	streq	r1, [r4, #12]
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001636:	60e2      	strne	r2, [r4, #12]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	6023      	str	r3, [r4, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6023      	str	r3, [r4, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6023      	str	r3, [r4, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6023      	str	r3, [r4, #0]
  
  return HAL_OK;
 8001658:	bd30      	pop	{r4, r5, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 800165a:	4620      	mov	r0, r4
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
  
  return HAL_OK;
} 
 800165c:	bd30      	pop	{r4, r5, pc}
	...

08001660 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001660:	b570      	push	{r4, r5, r6, lr}
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001662:	6803      	ldr	r3, [r0, #0]
 8001664:	4dab      	ldr	r5, [pc, #684]	; (8001914 <HAL_DMA_IRQHandler+0x2b4>)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001666:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001668:	42ab      	cmp	r3, r5
 800166a:	d91c      	bls.n	80016a6 <HAL_DMA_IRQHandler+0x46>
 800166c:	4aaa      	ldr	r2, [pc, #680]	; (8001918 <HAL_DMA_IRQHandler+0x2b8>)
 800166e:	6811      	ldr	r1, [r2, #0]
 8001670:	3208      	adds	r2, #8
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_DMA_IRQHandler+0x32>
 8001676:	3214      	adds	r2, #20
 8001678:	4293      	cmp	r3, r2
 800167a:	d00c      	beq.n	8001696 <HAL_DMA_IRQHandler+0x36>
 800167c:	3214      	adds	r2, #20
 800167e:	4293      	cmp	r3, r2
 8001680:	d00b      	beq.n	800169a <HAL_DMA_IRQHandler+0x3a>
 8001682:	3214      	adds	r2, #20
 8001684:	4293      	cmp	r3, r2
 8001686:	bf14      	ite	ne
 8001688:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 800168c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 8001690:	e005      	b.n	800169e <HAL_DMA_IRQHandler+0x3e>
 8001692:	2208      	movs	r2, #8
 8001694:	e003      	b.n	800169e <HAL_DMA_IRQHandler+0x3e>
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	e001      	b.n	800169e <HAL_DMA_IRQHandler+0x3e>
 800169a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169e:	420a      	tst	r2, r1
 80016a0:	f000 808b 	beq.w	80017ba <HAL_DMA_IRQHandler+0x15a>
 80016a4:	e02b      	b.n	80016fe <HAL_DMA_IRQHandler+0x9e>
 80016a6:	4a9d      	ldr	r2, [pc, #628]	; (800191c <HAL_DMA_IRQHandler+0x2bc>)
 80016a8:	6811      	ldr	r1, [r2, #0]
 80016aa:	3208      	adds	r2, #8
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d015      	beq.n	80016dc <HAL_DMA_IRQHandler+0x7c>
 80016b0:	3214      	adds	r2, #20
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d014      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x80>
 80016b6:	3214      	adds	r2, #20
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d013      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x84>
 80016bc:	3214      	adds	r2, #20
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_DMA_IRQHandler+0x8a>
 80016c2:	3214      	adds	r2, #20
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d013      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x90>
 80016c8:	3214      	adds	r2, #20
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x96>
 80016ce:	42ab      	cmp	r3, r5
 80016d0:	bf14      	ite	ne
 80016d2:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 80016d6:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
 80016da:	e00e      	b.n	80016fa <HAL_DMA_IRQHandler+0x9a>
 80016dc:	2208      	movs	r2, #8
 80016de:	e00c      	b.n	80016fa <HAL_DMA_IRQHandler+0x9a>
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	e00a      	b.n	80016fa <HAL_DMA_IRQHandler+0x9a>
 80016e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e8:	e007      	b.n	80016fa <HAL_DMA_IRQHandler+0x9a>
 80016ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ee:	e004      	b.n	80016fa <HAL_DMA_IRQHandler+0x9a>
 80016f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016f4:	e001      	b.n	80016fa <HAL_DMA_IRQHandler+0x9a>
 80016f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016fa:	420a      	tst	r2, r1
 80016fc:	d07a      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x194>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	0712      	lsls	r2, r2, #28
 8001702:	d557      	bpl.n	80017b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8001704:	681a      	ldr	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001706:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8001708:	f022 0208 	bic.w	r2, r2, #8
 800170c:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800170e:	d918      	bls.n	8001742 <HAL_DMA_IRQHandler+0xe2>
 8001710:	4a83      	ldr	r2, [pc, #524]	; (8001920 <HAL_DMA_IRQHandler+0x2c0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_DMA_IRQHandler+0xd2>
 8001716:	3214      	adds	r2, #20
 8001718:	4293      	cmp	r3, r2
 800171a:	d00c      	beq.n	8001736 <HAL_DMA_IRQHandler+0xd6>
 800171c:	3214      	adds	r2, #20
 800171e:	4293      	cmp	r3, r2
 8001720:	d00b      	beq.n	800173a <HAL_DMA_IRQHandler+0xda>
 8001722:	3214      	adds	r2, #20
 8001724:	4293      	cmp	r3, r2
 8001726:	bf0c      	ite	eq
 8001728:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 800172c:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 8001730:	e005      	b.n	800173e <HAL_DMA_IRQHandler+0xde>
 8001732:	2308      	movs	r3, #8
 8001734:	e003      	b.n	800173e <HAL_DMA_IRQHandler+0xde>
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	e001      	b.n	800173e <HAL_DMA_IRQHandler+0xde>
 800173a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800173e:	4a76      	ldr	r2, [pc, #472]	; (8001918 <HAL_DMA_IRQHandler+0x2b8>)
 8001740:	e029      	b.n	8001796 <HAL_DMA_IRQHandler+0x136>
 8001742:	4a78      	ldr	r2, [pc, #480]	; (8001924 <HAL_DMA_IRQHandler+0x2c4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d016      	beq.n	8001776 <HAL_DMA_IRQHandler+0x116>
 8001748:	3214      	adds	r2, #20
 800174a:	4293      	cmp	r3, r2
 800174c:	d015      	beq.n	800177a <HAL_DMA_IRQHandler+0x11a>
 800174e:	3214      	adds	r2, #20
 8001750:	4293      	cmp	r3, r2
 8001752:	d014      	beq.n	800177e <HAL_DMA_IRQHandler+0x11e>
 8001754:	3214      	adds	r2, #20
 8001756:	4293      	cmp	r3, r2
 8001758:	d014      	beq.n	8001784 <HAL_DMA_IRQHandler+0x124>
 800175a:	3214      	adds	r2, #20
 800175c:	4293      	cmp	r3, r2
 800175e:	d014      	beq.n	800178a <HAL_DMA_IRQHandler+0x12a>
 8001760:	3214      	adds	r2, #20
 8001762:	4293      	cmp	r3, r2
 8001764:	d014      	beq.n	8001790 <HAL_DMA_IRQHandler+0x130>
 8001766:	3214      	adds	r2, #20
 8001768:	4293      	cmp	r3, r2
 800176a:	bf0c      	ite	eq
 800176c:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8001770:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 8001774:	e00e      	b.n	8001794 <HAL_DMA_IRQHandler+0x134>
 8001776:	2308      	movs	r3, #8
 8001778:	e00c      	b.n	8001794 <HAL_DMA_IRQHandler+0x134>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	e00a      	b.n	8001794 <HAL_DMA_IRQHandler+0x134>
 800177e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001782:	e007      	b.n	8001794 <HAL_DMA_IRQHandler+0x134>
 8001784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001788:	e004      	b.n	8001794 <HAL_DMA_IRQHandler+0x134>
 800178a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800178e:	e001      	b.n	8001794 <HAL_DMA_IRQHandler+0x134>
 8001790:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001794:	4a61      	ldr	r2, [pc, #388]	; (800191c <HAL_DMA_IRQHandler+0x2bc>)
 8001796:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6363      	str	r3, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80017a0:	2304      	movs	r3, #4
 80017a2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80017a6:	2300      	movs	r3, #0
 80017a8:	f884 3020 	strb.w	r3, [r4, #32]
      
      if (hdma->XferErrorCallback != NULL)
 80017ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017ae:	b10b      	cbz	r3, 80017b4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80017b0:	4620      	mov	r0, r4
 80017b2:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	42ab      	cmp	r3, r5
 80017b8:	d91c      	bls.n	80017f4 <HAL_DMA_IRQHandler+0x194>
 80017ba:	4a57      	ldr	r2, [pc, #348]	; (8001918 <HAL_DMA_IRQHandler+0x2b8>)
 80017bc:	6811      	ldr	r1, [r2, #0]
 80017be:	3208      	adds	r2, #8
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00d      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x180>
 80017c4:	3214      	adds	r2, #20
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00c      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x184>
 80017ca:	3214      	adds	r2, #20
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00b      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x188>
 80017d0:	3214      	adds	r2, #20
 80017d2:	4293      	cmp	r3, r2
 80017d4:	bf14      	ite	ne
 80017d6:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 80017da:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
 80017de:	e005      	b.n	80017ec <HAL_DMA_IRQHandler+0x18c>
 80017e0:	2204      	movs	r2, #4
 80017e2:	e003      	b.n	80017ec <HAL_DMA_IRQHandler+0x18c>
 80017e4:	2240      	movs	r2, #64	; 0x40
 80017e6:	e001      	b.n	80017ec <HAL_DMA_IRQHandler+0x18c>
 80017e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ec:	420a      	tst	r2, r1
 80017ee:	f000 8136 	beq.w	8001a5e <HAL_DMA_IRQHandler+0x3fe>
 80017f2:	e02b      	b.n	800184c <HAL_DMA_IRQHandler+0x1ec>
 80017f4:	4a49      	ldr	r2, [pc, #292]	; (800191c <HAL_DMA_IRQHandler+0x2bc>)
 80017f6:	6811      	ldr	r1, [r2, #0]
 80017f8:	3208      	adds	r2, #8
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d015      	beq.n	800182a <HAL_DMA_IRQHandler+0x1ca>
 80017fe:	3214      	adds	r2, #20
 8001800:	4293      	cmp	r3, r2
 8001802:	d014      	beq.n	800182e <HAL_DMA_IRQHandler+0x1ce>
 8001804:	3214      	adds	r2, #20
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_DMA_IRQHandler+0x1d2>
 800180a:	3214      	adds	r2, #20
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_DMA_IRQHandler+0x1d8>
 8001810:	3214      	adds	r2, #20
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_IRQHandler+0x1de>
 8001816:	3214      	adds	r2, #20
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_DMA_IRQHandler+0x1e4>
 800181c:	42ab      	cmp	r3, r5
 800181e:	bf14      	ite	ne
 8001820:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 8001824:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
 8001828:	e00e      	b.n	8001848 <HAL_DMA_IRQHandler+0x1e8>
 800182a:	2204      	movs	r2, #4
 800182c:	e00c      	b.n	8001848 <HAL_DMA_IRQHandler+0x1e8>
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	e00a      	b.n	8001848 <HAL_DMA_IRQHandler+0x1e8>
 8001832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001836:	e007      	b.n	8001848 <HAL_DMA_IRQHandler+0x1e8>
 8001838:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183c:	e004      	b.n	8001848 <HAL_DMA_IRQHandler+0x1e8>
 800183e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001842:	e001      	b.n	8001848 <HAL_DMA_IRQHandler+0x1e8>
 8001844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001848:	420a      	tst	r2, r1
 800184a:	d03a      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x262>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	0756      	lsls	r6, r2, #29
 8001850:	d521      	bpl.n	8001896 <HAL_DMA_IRQHandler+0x236>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	0690      	lsls	r0, r2, #26
 8001856:	d403      	bmi.n	8001860 <HAL_DMA_IRQHandler+0x200>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001860:	42ab      	cmp	r3, r5
 8001862:	d97d      	bls.n	8001960 <HAL_DMA_IRQHandler+0x300>
 8001864:	4a2e      	ldr	r2, [pc, #184]	; (8001920 <HAL_DMA_IRQHandler+0x2c0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d073      	beq.n	8001952 <HAL_DMA_IRQHandler+0x2f2>
 800186a:	3214      	adds	r2, #20
 800186c:	4293      	cmp	r3, r2
 800186e:	d072      	beq.n	8001956 <HAL_DMA_IRQHandler+0x2f6>
 8001870:	3214      	adds	r2, #20
 8001872:	4293      	cmp	r3, r2
 8001874:	d071      	beq.n	800195a <HAL_DMA_IRQHandler+0x2fa>
 8001876:	3214      	adds	r2, #20
 8001878:	4293      	cmp	r3, r2
 800187a:	bf14      	ite	ne
 800187c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001880:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001884:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_DMA_IRQHandler+0x2b8>)
 8001886:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001888:	2311      	movs	r3, #17
 800188a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 800188e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001890:	b10b      	cbz	r3, 8001896 <HAL_DMA_IRQHandler+0x236>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001892:	4620      	mov	r0, r4
 8001894:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	42ab      	cmp	r3, r5
 800189a:	d913      	bls.n	80018c4 <HAL_DMA_IRQHandler+0x264>
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_DMA_IRQHandler+0x2b8>)
 800189e:	6811      	ldr	r1, [r2, #0]
 80018a0:	3208      	adds	r2, #8
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d029      	beq.n	80018fa <HAL_DMA_IRQHandler+0x29a>
 80018a6:	3214      	adds	r2, #20
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d028      	beq.n	80018fe <HAL_DMA_IRQHandler+0x29e>
 80018ac:	3214      	adds	r2, #20
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d027      	beq.n	8001902 <HAL_DMA_IRQHandler+0x2a2>
 80018b2:	3214      	adds	r2, #20
 80018b4:	4293      	cmp	r3, r2
 80018b6:	bf14      	ite	ne
 80018b8:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80018bc:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80018c0:	e034      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <HAL_DMA_IRQHandler+0x2bc>)
 80018c6:	6811      	ldr	r1, [r2, #0]
 80018c8:	3208      	adds	r2, #8
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d015      	beq.n	80018fa <HAL_DMA_IRQHandler+0x29a>
 80018ce:	3214      	adds	r2, #20
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d014      	beq.n	80018fe <HAL_DMA_IRQHandler+0x29e>
 80018d4:	3214      	adds	r2, #20
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_DMA_IRQHandler+0x2a2>
 80018da:	3214      	adds	r2, #20
 80018dc:	4293      	cmp	r3, r2
 80018de:	d013      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a8>
 80018e0:	3214      	adds	r2, #20
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_DMA_IRQHandler+0x2ae>
 80018e6:	3214      	adds	r2, #20
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d01d      	beq.n	8001928 <HAL_DMA_IRQHandler+0x2c8>
 80018ec:	42ab      	cmp	r3, r5
 80018ee:	bf14      	ite	ne
 80018f0:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80018f4:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 80018f8:	e018      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 80018fa:	2202      	movs	r2, #2
 80018fc:	e016      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 80018fe:	2220      	movs	r2, #32
 8001900:	e014      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	e011      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 8001908:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190c:	e00e      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 800190e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001912:	e00b      	b.n	800192c <HAL_DMA_IRQHandler+0x2cc>
 8001914:	40020080 	.word	0x40020080
 8001918:	40020400 	.word	0x40020400
 800191c:	40020000 	.word	0x40020000
 8001920:	40020408 	.word	0x40020408
 8001924:	40020008 	.word	0x40020008
 8001928:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800192c:	420a      	tst	r2, r1
 800192e:	bf14      	ite	ne
 8001930:	2201      	movne	r2, #1
 8001932:	2200      	moveq	r2, #0
 8001934:	2a00      	cmp	r2, #0
 8001936:	f000 8094 	beq.w	8001a62 <HAL_DMA_IRQHandler+0x402>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	0791      	lsls	r1, r2, #30
 800193e:	f140 8090 	bpl.w	8001a62 <HAL_DMA_IRQHandler+0x402>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	0692      	lsls	r2, r2, #26
 8001946:	d436      	bmi.n	80019b6 <HAL_DMA_IRQHandler+0x356>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f022 0202 	bic.w	r2, r2, #2
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e031      	b.n	80019b6 <HAL_DMA_IRQHandler+0x356>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001952:	2304      	movs	r3, #4
 8001954:	e796      	b.n	8001884 <HAL_DMA_IRQHandler+0x224>
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	e794      	b.n	8001884 <HAL_DMA_IRQHandler+0x224>
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	e791      	b.n	8001884 <HAL_DMA_IRQHandler+0x224>
 8001960:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <HAL_DMA_IRQHandler+0x404>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d016      	beq.n	8001994 <HAL_DMA_IRQHandler+0x334>
 8001966:	3214      	adds	r2, #20
 8001968:	4293      	cmp	r3, r2
 800196a:	d015      	beq.n	8001998 <HAL_DMA_IRQHandler+0x338>
 800196c:	3214      	adds	r2, #20
 800196e:	4293      	cmp	r3, r2
 8001970:	d014      	beq.n	800199c <HAL_DMA_IRQHandler+0x33c>
 8001972:	3214      	adds	r2, #20
 8001974:	4293      	cmp	r3, r2
 8001976:	d014      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x342>
 8001978:	3214      	adds	r2, #20
 800197a:	4293      	cmp	r3, r2
 800197c:	d014      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x348>
 800197e:	3214      	adds	r2, #20
 8001980:	4293      	cmp	r3, r2
 8001982:	d014      	beq.n	80019ae <HAL_DMA_IRQHandler+0x34e>
 8001984:	3214      	adds	r2, #20
 8001986:	4293      	cmp	r3, r2
 8001988:	bf14      	ite	ne
 800198a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800198e:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8001992:	e00e      	b.n	80019b2 <HAL_DMA_IRQHandler+0x352>
 8001994:	2304      	movs	r3, #4
 8001996:	e00c      	b.n	80019b2 <HAL_DMA_IRQHandler+0x352>
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	e00a      	b.n	80019b2 <HAL_DMA_IRQHandler+0x352>
 800199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a0:	e007      	b.n	80019b2 <HAL_DMA_IRQHandler+0x352>
 80019a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a6:	e004      	b.n	80019b2 <HAL_DMA_IRQHandler+0x352>
 80019a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019ac:	e001      	b.n	80019b2 <HAL_DMA_IRQHandler+0x352>
 80019ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_DMA_IRQHandler+0x408>)
 80019b4:	e767      	b.n	8001886 <HAL_DMA_IRQHandler+0x226>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019b6:	42ab      	cmp	r3, r5
 80019b8:	d918      	bls.n	80019ec <HAL_DMA_IRQHandler+0x38c>
 80019ba:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <HAL_DMA_IRQHandler+0x40c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00d      	beq.n	80019dc <HAL_DMA_IRQHandler+0x37c>
 80019c0:	3214      	adds	r2, #20
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00c      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x380>
 80019c6:	3214      	adds	r2, #20
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00b      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x384>
 80019cc:	3214      	adds	r2, #20
 80019ce:	4293      	cmp	r3, r2
 80019d0:	bf14      	ite	ne
 80019d2:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80019d6:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80019da:	e005      	b.n	80019e8 <HAL_DMA_IRQHandler+0x388>
 80019dc:	2302      	movs	r3, #2
 80019de:	e003      	b.n	80019e8 <HAL_DMA_IRQHandler+0x388>
 80019e0:	2320      	movs	r3, #32
 80019e2:	e001      	b.n	80019e8 <HAL_DMA_IRQHandler+0x388>
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <HAL_DMA_IRQHandler+0x410>)
 80019ea:	e029      	b.n	8001a40 <HAL_DMA_IRQHandler+0x3e0>
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_DMA_IRQHandler+0x404>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d016      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x3c0>
 80019f2:	3214      	adds	r2, #20
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d015      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x3c4>
 80019f8:	3214      	adds	r2, #20
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d014      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x3c8>
 80019fe:	3214      	adds	r2, #20
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d014      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x3ce>
 8001a04:	3214      	adds	r2, #20
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d014      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x3d4>
 8001a0a:	3214      	adds	r2, #20
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d014      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x3da>
 8001a10:	3214      	adds	r2, #20
 8001a12:	4293      	cmp	r3, r2
 8001a14:	bf14      	ite	ne
 8001a16:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001a1a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001a1e:	e00e      	b.n	8001a3e <HAL_DMA_IRQHandler+0x3de>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e00c      	b.n	8001a3e <HAL_DMA_IRQHandler+0x3de>
 8001a24:	2320      	movs	r3, #32
 8001a26:	e00a      	b.n	8001a3e <HAL_DMA_IRQHandler+0x3de>
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	e007      	b.n	8001a3e <HAL_DMA_IRQHandler+0x3de>
 8001a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a32:	e004      	b.n	8001a3e <HAL_DMA_IRQHandler+0x3de>
 8001a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a38:	e001      	b.n	8001a3e <HAL_DMA_IRQHandler+0x3de>
 8001a3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_DMA_IRQHandler+0x408>)
 8001a40:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8001a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a44:	6363      	str	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f884 3020 	strb.w	r3, [r4, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8001a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a54:	b12b      	cbz	r3, 8001a62 <HAL_DMA_IRQHandler+0x402>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a56:	4620      	mov	r0, r4
      }
    }
  }
}
 8001a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_UNLOCK(hdma);
    
      if(hdma->XferCpltCallback != NULL)
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a5c:	4718      	bx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	e71c      	b.n	800189c <HAL_DMA_IRQHandler+0x23c>
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	40020008 	.word	0x40020008
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020408 	.word	0x40020408
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8001a78:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a7a:	4626      	mov	r6, r4
 8001a7c:	4b62      	ldr	r3, [pc, #392]	; (8001c08 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7e:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001c14 <HAL_GPIO_Init+0x1a0>
 8001a82:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001c18 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a86:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8001a88:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a8a:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8001a8c:	ea32 0505 	bics.w	r5, r2, r5
 8001a90:	f040 80b3 	bne.w	8001bfa <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a94:	684d      	ldr	r5, [r1, #4]
 8001a96:	2d12      	cmp	r5, #18
 8001a98:	d028      	beq.n	8001aec <HAL_GPIO_Init+0x78>
 8001a9a:	d80e      	bhi.n	8001aba <HAL_GPIO_Init+0x46>
 8001a9c:	2d02      	cmp	r5, #2
 8001a9e:	d022      	beq.n	8001ae6 <HAL_GPIO_Init+0x72>
 8001aa0:	d804      	bhi.n	8001aac <HAL_GPIO_Init+0x38>
 8001aa2:	b335      	cbz	r5, 8001af2 <HAL_GPIO_Init+0x7e>
 8001aa4:	2d01      	cmp	r5, #1
 8001aa6:	d12d      	bne.n	8001b04 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa8:	68cc      	ldr	r4, [r1, #12]
          break;
 8001aaa:	e02b      	b.n	8001b04 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aac:	2d03      	cmp	r5, #3
 8001aae:	d018      	beq.n	8001ae2 <HAL_GPIO_Init+0x6e>
 8001ab0:	2d11      	cmp	r5, #17
 8001ab2:	d127      	bne.n	8001b04 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab4:	68cc      	ldr	r4, [r1, #12]
 8001ab6:	3404      	adds	r4, #4
          break;
 8001ab8:	e024      	b.n	8001b04 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aba:	4f54      	ldr	r7, [pc, #336]	; (8001c0c <HAL_GPIO_Init+0x198>)
 8001abc:	42bd      	cmp	r5, r7
 8001abe:	d018      	beq.n	8001af2 <HAL_GPIO_Init+0x7e>
 8001ac0:	d806      	bhi.n	8001ad0 <HAL_GPIO_Init+0x5c>
 8001ac2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001c1c <HAL_GPIO_Init+0x1a8>
 8001ac6:	4545      	cmp	r5, r8
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x7e>
 8001aca:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001ace:	e005      	b.n	8001adc <HAL_GPIO_Init+0x68>
 8001ad0:	4575      	cmp	r5, lr
 8001ad2:	d00e      	beq.n	8001af2 <HAL_GPIO_Init+0x7e>
 8001ad4:	4565      	cmp	r5, ip
 8001ad6:	d00c      	beq.n	8001af2 <HAL_GPIO_Init+0x7e>
 8001ad8:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001c20 <HAL_GPIO_Init+0x1ac>
 8001adc:	4545      	cmp	r5, r8
 8001ade:	d111      	bne.n	8001b04 <HAL_GPIO_Init+0x90>
 8001ae0:	e007      	b.n	8001af2 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	e00e      	b.n	8001b04 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ae6:	68cc      	ldr	r4, [r1, #12]
 8001ae8:	3408      	adds	r4, #8
          break;
 8001aea:	e00b      	b.n	8001b04 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aec:	68cc      	ldr	r4, [r1, #12]
 8001aee:	340c      	adds	r4, #12
          break;
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001af2:	688c      	ldr	r4, [r1, #8]
 8001af4:	b12c      	cbz	r4, 8001b02 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8001af6:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8001af8:	bf0c      	ite	eq
 8001afa:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001afc:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001afe:	2408      	movs	r4, #8
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b02:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b04:	2aff      	cmp	r2, #255	; 0xff
 8001b06:	bf97      	itett	ls
 8001b08:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001b0a:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b0e:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001b12:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b14:	bf84      	itt	hi
 8001b16:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001b1a:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001b1c:	f04f 080f 	mov.w	r8, #15
 8001b20:	fa08 fa05 	lsl.w	sl, r8, r5
 8001b24:	ea29 090a 	bic.w	r9, r9, sl
 8001b28:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b2c:	bf88      	it	hi
 8001b2e:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001b32:	ea49 0505 	orr.w	r5, r9, r5
 8001b36:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001b3a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001b3e:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001b42:	d05a      	beq.n	8001bfa <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b44:	4d32      	ldr	r5, [pc, #200]	; (8001c10 <HAL_GPIO_Init+0x19c>)
 8001b46:	4f32      	ldr	r7, [pc, #200]	; (8001c10 <HAL_GPIO_Init+0x19c>)
 8001b48:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b4a:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4e:	f045 0501 	orr.w	r5, r5, #1
 8001b52:	61bd      	str	r5, [r7, #24]
 8001b54:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b56:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5a:	f005 0501 	and.w	r5, r5, #1
 8001b5e:	9501      	str	r5, [sp, #4]
 8001b60:	9d01      	ldr	r5, [sp, #4]
 8001b62:	f026 0503 	bic.w	r5, r6, #3
 8001b66:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001b6a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8001b6e:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b72:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b76:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b7a:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b7c:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b80:	d010      	beq.n	8001ba4 <HAL_GPIO_Init+0x130>
 8001b82:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001b86:	42b8      	cmp	r0, r7
 8001b88:	d00f      	beq.n	8001baa <HAL_GPIO_Init+0x136>
 8001b8a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001b8e:	42b8      	cmp	r0, r7
 8001b90:	d00e      	beq.n	8001bb0 <HAL_GPIO_Init+0x13c>
 8001b92:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001b96:	42b8      	cmp	r0, r7
 8001b98:	bf0c      	ite	eq
 8001b9a:	f04f 0b03 	moveq.w	fp, #3
 8001b9e:	f04f 0b04 	movne.w	fp, #4
 8001ba2:	e007      	b.n	8001bb4 <HAL_GPIO_Init+0x140>
 8001ba4:	f04f 0b00 	mov.w	fp, #0
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x140>
 8001baa:	f04f 0b01 	mov.w	fp, #1
 8001bae:	e001      	b.n	8001bb4 <HAL_GPIO_Init+0x140>
 8001bb0:	f04f 0b02 	mov.w	fp, #2
 8001bb4:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001bb8:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8001bbc:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001bc0:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc2:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001bc6:	bf14      	ite	ne
 8001bc8:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001bca:	4395      	biceq	r5, r2
 8001bcc:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001bce:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001bd4:	bf14      	ite	ne
 8001bd6:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001bd8:	4395      	biceq	r5, r2
 8001bda:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001bdc:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bde:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001be2:	bf14      	ite	ne
 8001be4:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001be6:	4395      	biceq	r5, r2
 8001be8:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001bea:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bec:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001bf0:	bf14      	ite	ne
 8001bf2:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001bf4:	ea25 0202 	biceq.w	r2, r5, r2
 8001bf8:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bfa:	3601      	adds	r6, #1
 8001bfc:	2e10      	cmp	r6, #16
 8001bfe:	f47f af42 	bne.w	8001a86 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8001c02:	b003      	add	sp, #12
 8001c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	10210000 	.word	0x10210000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	10310000 	.word	0x10310000
 8001c18:	10320000 	.word	0x10320000
 8001c1c:	10110000 	.word	0x10110000
 8001c20:	10220000 	.word	0x10220000

08001c24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	b902      	cbnz	r2, 8001c28 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c26:	0409      	lsls	r1, r1, #16
 8001c28:	6101      	str	r1, [r0, #16]
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c2c:	68c3      	ldr	r3, [r0, #12]
 8001c2e:	4059      	eors	r1, r3
 8001c30:	60c1      	str	r1, [r0, #12]
 8001c32:	4770      	bx	lr

08001c34 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c34:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	d403      	bmi.n	8001c48 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	0798      	lsls	r0, r3, #30
 8001c44:	d473      	bmi.n	8001d2e <HAL_RCC_OscConfig+0xfa>
 8001c46:	e0f2      	b.n	8001e2e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c48:	4cb9      	ldr	r4, [pc, #740]	; (8001f30 <HAL_RCC_OscConfig+0x2fc>)
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d007      	beq.n	8001c64 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c54:	6863      	ldr	r3, [r4, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x58>
 8001c5e:	6863      	ldr	r3, [r4, #4]
 8001c60:	03d9      	lsls	r1, r3, #15
 8001c62:	d513      	bpl.n	8001c8c <HAL_RCC_OscConfig+0x58>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	6822      	ldr	r2, [r4, #0]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	07da      	lsls	r2, r3, #31
 8001c80:	d5de      	bpl.n	8001c40 <HAL_RCC_OscConfig+0xc>
 8001c82:	68ab      	ldr	r3, [r5, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1db      	bne.n	8001c40 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
 8001c8a:	e2d0      	b.n	800222e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	68ab      	ldr	r3, [r5, #8]
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d015      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x8c>
 8001c94:	b96b      	cbnz	r3, 8001cb2 <HAL_RCC_OscConfig+0x7e>
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f97f 	bl	8000fac <HAL_GetTick>
 8001cae:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb0:	e02f      	b.n	8001d12 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x94>
 8001cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_OscConfig+0xa0>
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f969 	bl	8000fac <HAL_GetTick>
 8001cda:	4607      	mov	r7, r0
 8001cdc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001ce0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce4:	6822      	ldr	r2, [r4, #0]
 8001ce6:	fa96 f3a6 	rbit	r3, r6
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	07db      	lsls	r3, r3, #31
 8001cf8:	d4a2      	bmi.n	8001c40 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfa:	f7ff f957 	bl	8000fac <HAL_GetTick>
 8001cfe:	1bc0      	subs	r0, r0, r7
 8001d00:	2864      	cmp	r0, #100	; 0x64
 8001d02:	d9ed      	bls.n	8001ce0 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	e292      	b.n	800222e <HAL_RCC_OscConfig+0x5fa>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff f950 	bl	8000fac <HAL_GetTick>
 8001d0c:	1bc0      	subs	r0, r0, r7
 8001d0e:	2864      	cmp	r0, #100	; 0x64
 8001d10:	d8f8      	bhi.n	8001d04 <HAL_RCC_OscConfig+0xd0>
 8001d12:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	fa96 f3a6 	rbit	r3, r6
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	07d8      	lsls	r0, r3, #31
 8001d2a:	d4ed      	bmi.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	e788      	b.n	8001c40 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d2e:	4c80      	ldr	r4, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x2fc>)
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	f013 0f0c 	tst.w	r3, #12
 8001d36:	d007      	beq.n	8001d48 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d121      	bne.n	8001d86 <HAL_RCC_OscConfig+0x152>
 8001d42:	6863      	ldr	r3, [r4, #4]
 8001d44:	03d9      	lsls	r1, r3, #15
 8001d46:	d41e      	bmi.n	8001d86 <HAL_RCC_OscConfig+0x152>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	07da      	lsls	r2, r3, #31
 8001d62:	d502      	bpl.n	8001d6a <HAL_RCC_OscConfig+0x136>
 8001d64:	696b      	ldr	r3, [r5, #20]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d18e      	bne.n	8001c88 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	22f8      	movs	r2, #248	; 0xf8
 8001d6e:	fa92 f2a2 	rbit	r2, r2
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	69a9      	ldr	r1, [r5, #24]
 8001d78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4313      	orrs	r3, r2
 8001d82:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d84:	e053      	b.n	8001e2e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d86:	696a      	ldr	r2, [r5, #20]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	b37a      	cbz	r2, 8001dec <HAL_RCC_OscConfig+0x1b8>
 8001d8c:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001d9a:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001d9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff f904 	bl	8000fac <HAL_GetTick>
 8001da4:	4607      	mov	r7, r0
 8001da6:	2602      	movs	r6, #2
 8001da8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4860      	ldr	r0, [pc, #384]	; (8001f30 <HAL_RCC_OscConfig+0x2fc>)
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	fa96 f3a6 	rbit	r3, r6
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	07db      	lsls	r3, r3, #31
 8001dc2:	d405      	bmi.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f8f2 	bl	8000fac <HAL_GetTick>
 8001dc8:	1bc0      	subs	r0, r0, r7
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9ec      	bls.n	8001da8 <HAL_RCC_OscConfig+0x174>
 8001dce:	e799      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	6803      	ldr	r3, [r0, #0]
 8001dd2:	22f8      	movs	r2, #248	; 0xf8
 8001dd4:	fa92 f2a2 	rbit	r2, r2
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	69a9      	ldr	r1, [r5, #24]
 8001dde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4313      	orrs	r3, r2
 8001de8:	6003      	str	r3, [r0, #0]
 8001dea:	e020      	b.n	8001e2e <HAL_RCC_OscConfig+0x1fa>
 8001dec:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001dfa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001dfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8d4 	bl	8000fac <HAL_GetTick>
 8001e04:	4607      	mov	r7, r0
 8001e06:	2602      	movs	r6, #2
 8001e08:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	fa96 f3a6 	rbit	r3, r6
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	07d8      	lsls	r0, r3, #31
 8001e20:	d505      	bpl.n	8001e2e <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e22:	f7ff f8c3 	bl	8000fac <HAL_GetTick>
 8001e26:	1bc0      	subs	r0, r0, r7
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	d9ed      	bls.n	8001e08 <HAL_RCC_OscConfig+0x1d4>
 8001e2c:	e76a      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	0719      	lsls	r1, r3, #28
 8001e32:	d546      	bpl.n	8001ec2 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e34:	69ea      	ldr	r2, [r5, #28]
 8001e36:	4c3e      	ldr	r4, [pc, #248]	; (8001f30 <HAL_RCC_OscConfig+0x2fc>)
 8001e38:	2301      	movs	r3, #1
 8001e3a:	493e      	ldr	r1, [pc, #248]	; (8001f34 <HAL_RCC_OscConfig+0x300>)
 8001e3c:	b312      	cbz	r2, 8001e84 <HAL_RCC_OscConfig+0x250>
 8001e3e:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f8af 	bl	8000fac <HAL_GetTick>
 8001e4e:	4607      	mov	r7, r0
 8001e50:	2602      	movs	r6, #2
 8001e52:	fa96 f3a6 	rbit	r3, r6
 8001e56:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e5c:	fa96 f3a6 	rbit	r3, r6
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	07da      	lsls	r2, r3, #31
 8001e6e:	d405      	bmi.n	8001e7c <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff f89c 	bl	8000fac <HAL_GetTick>
 8001e74:	1bc0      	subs	r0, r0, r7
 8001e76:	2802      	cmp	r0, #2
 8001e78:	d9eb      	bls.n	8001e52 <HAL_RCC_OscConfig+0x21e>
 8001e7a:	e743      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff f89b 	bl	8000fb8 <HAL_Delay>
 8001e82:	e01e      	b.n	8001ec2 <HAL_RCC_OscConfig+0x28e>
 8001e84:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff f88c 	bl	8000fac <HAL_GetTick>
 8001e94:	4607      	mov	r7, r0
 8001e96:	2602      	movs	r6, #2
 8001e98:	fa96 f3a6 	rbit	r3, r6
 8001e9c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ea2:	fa96 f3a6 	rbit	r3, r6
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	07db      	lsls	r3, r3, #31
 8001eb4:	d505      	bpl.n	8001ec2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f879 	bl	8000fac <HAL_GetTick>
 8001eba:	1bc0      	subs	r0, r0, r7
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9eb      	bls.n	8001e98 <HAL_RCC_OscConfig+0x264>
 8001ec0:	e720      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	682b      	ldr	r3, [r5, #0]
 8001ec4:	0758      	lsls	r0, r3, #29
 8001ec6:	d404      	bmi.n	8001ed2 <HAL_RCC_OscConfig+0x29e>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001ec8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	f040 8081 	bne.w	8001fd2 <HAL_RCC_OscConfig+0x39e>
 8001ed0:	e0d3      	b.n	800207a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4c17      	ldr	r4, [pc, #92]	; (8001f30 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed4:	4e18      	ldr	r6, [pc, #96]	; (8001f38 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	69e3      	ldr	r3, [r4, #28]
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61e3      	str	r3, [r4, #28]
 8001ede:	69e3      	ldr	r3, [r4, #28]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee8:	6833      	ldr	r3, [r6, #0]
 8001eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eee:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f85c 	bl	8000fac <HAL_GetTick>
 8001ef4:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ef6:	6833      	ldr	r3, [r6, #0]
 8001ef8:	05d9      	lsls	r1, r3, #23
 8001efa:	d405      	bmi.n	8001f08 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7ff f856 	bl	8000fac <HAL_GetTick>
 8001f00:	1bc0      	subs	r0, r0, r7
 8001f02:	2864      	cmp	r0, #100	; 0x64
 8001f04:	d9f7      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x2c2>
 8001f06:	e6fd      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f08:	692b      	ldr	r3, [r5, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d01c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x314>
 8001f0e:	b9ab      	cbnz	r3, 8001f3c <HAL_RCC_OscConfig+0x308>
 8001f10:	6a23      	ldr	r3, [r4, #32]
 8001f12:	2602      	movs	r6, #2
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6223      	str	r3, [r4, #32]
 8001f1a:	6a23      	ldr	r3, [r4, #32]
 8001f1c:	4637      	mov	r7, r6
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7ff f842 	bl	8000fac <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e048      	b.n	8001fc2 <HAL_RCC_OscConfig+0x38e>
 8001f30:	40021000 	.word	0x40021000
 8001f34:	42420480 	.word	0x42420480
 8001f38:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	6a23      	ldr	r3, [r4, #32]
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x31c>
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6223      	str	r3, [r4, #32]
 8001f48:	6a23      	ldr	r3, [r4, #32]
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_OscConfig+0x328>
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6223      	str	r3, [r4, #32]
 8001f56:	6a23      	ldr	r3, [r4, #32]
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f825 	bl	8000fac <HAL_GetTick>
 8001f62:	2602      	movs	r6, #2
 8001f64:	4681      	mov	r9, r0
 8001f66:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f241 3788 	movw	r7, #5000	; 0x1388
 8001f6c:	fa96 f3a6 	rbit	r3, r6
 8001f70:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	b10b      	cbz	r3, 8001f7a <HAL_RCC_OscConfig+0x346>
 8001f76:	6a22      	ldr	r2, [r4, #32]
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x348>
 8001f7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f7c:	fa98 f3a8 	rbit	r3, r8
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	07da      	lsls	r2, r3, #31
 8001f8e:	d49b      	bmi.n	8001ec8 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7ff f80c 	bl	8000fac <HAL_GetTick>
 8001f94:	ebc9 0000 	rsb	r0, r9, r0
 8001f98:	42b8      	cmp	r0, r7
 8001f9a:	d9e7      	bls.n	8001f6c <HAL_RCC_OscConfig+0x338>
 8001f9c:	e6b2      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fa0:	fa97 f3a7 	rbit	r3, r7
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	07db      	lsls	r3, r3, #31
 8001fb2:	d589      	bpl.n	8001ec8 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe fffa 	bl	8000fac <HAL_GetTick>
 8001fb8:	ebc8 0000 	rsb	r0, r8, r0
 8001fbc:	4548      	cmp	r0, r9
 8001fbe:	f63f aea1 	bhi.w	8001d04 <HAL_RCC_OscConfig+0xd0>
 8001fc2:	fa96 f3a6 	rbit	r3, r6
 8001fc6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0e7      	beq.n	8001f9e <HAL_RCC_OscConfig+0x36a>
 8001fce:	6a22      	ldr	r2, [r4, #32]
 8001fd0:	e7e6      	b.n	8001fa0 <HAL_RCC_OscConfig+0x36c>
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001fd2:	4c98      	ldr	r4, [pc, #608]	; (8002234 <HAL_RCC_OscConfig+0x600>)
 8001fd4:	6863      	ldr	r3, [r4, #4]
 8001fd6:	03df      	lsls	r7, r3, #15
 8001fd8:	d453      	bmi.n	8002082 <HAL_RCC_OscConfig+0x44e>
    {
      return HAL_ERROR;
    }
    else
    {
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001fda:	2a02      	cmp	r2, #2
 8001fdc:	d170      	bne.n	80020c0 <HAL_RCC_OscConfig+0x48c>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	00d8      	lsls	r0, r3, #3
 8001fe2:	d458      	bmi.n	8002096 <HAL_RCC_OscConfig+0x462>
 8001fe4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fe8:	fa93 f3a3 	rbit	r3, r3
        {
          return HAL_ERROR;
        }
        
        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ff6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe ffd5 	bl	8000fac <HAL_GetTick>
 8002002:	4607      	mov	r7, r0
 8002004:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8002008:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800200c:	4a89      	ldr	r2, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x600>)
 800200e:	6821      	ldr	r1, [r4, #0]
 8002010:	fa96 f3a6 	rbit	r3, r6
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	fa21 f303 	lsr.w	r3, r1, r3
 8002020:	07d9      	lsls	r1, r3, #31
 8002022:	d441      	bmi.n	80020a8 <HAL_RCC_OscConfig+0x474>
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002024:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002026:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 800202a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800202c:	430b      	orrs	r3, r1
 800202e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002030:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002032:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002038:	430b      	orrs	r3, r1
 800203a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800203c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002040:	fa93 f3a3 	rbit	r3, r3
        
        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800204e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe ffa9 	bl	8000fac <HAL_GetTick>
 800205a:	4607      	mov	r7, r0
 800205c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8002060:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002064:	6822      	ldr	r2, [r4, #0]
 8002066:	fa96 f3a6 	rbit	r3, r6
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	07db      	lsls	r3, r3, #31
 8002078:	d51c      	bpl.n	80020b4 <HAL_RCC_OscConfig+0x480>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	6a2a      	ldr	r2, [r5, #32]
 800207c:	2a00      	cmp	r2, #0
 800207e:	d148      	bne.n	8002112 <HAL_RCC_OscConfig+0x4de>
 8002080:	e0a4      	b.n	80021cc <HAL_RCC_OscConfig+0x598>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002082:	6863      	ldr	r3, [r4, #4]
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d1a6      	bne.n	8001fda <HAL_RCC_OscConfig+0x3a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800208c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800208e:	03de      	lsls	r6, r3, #15
 8002090:	f53f adfa 	bmi.w	8001c88 <HAL_RCC_OscConfig+0x54>
 8002094:	e7a1      	b.n	8001fda <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x600>)
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8002098:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 800209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f47f adf1 	bne.w	8001c88 <HAL_RCC_OscConfig+0x54>
 80020a6:	e79d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3b0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80020a8:	f7fe ff80 	bl	8000fac <HAL_GetTick>
 80020ac:	1bc0      	subs	r0, r0, r7
 80020ae:	2864      	cmp	r0, #100	; 0x64
 80020b0:	d9aa      	bls.n	8002008 <HAL_RCC_OscConfig+0x3d4>
 80020b2:	e627      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80020b4:	f7fe ff7a 	bl	8000fac <HAL_GetTick>
 80020b8:	1bc0      	subs	r0, r0, r7
 80020ba:	2864      	cmp	r0, #100	; 0x64
 80020bc:	d9d0      	bls.n	8002060 <HAL_RCC_OscConfig+0x42c>
 80020be:	e621      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
        }
      }
      else
      {
       /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80020c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020cc:	fa93 f3a3 	rbit	r3, r3

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80020da:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe ff63 	bl	8000fac <HAL_GetTick>
 80020e6:	4607      	mov	r7, r0
 80020e8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80020ec:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	fa96 f3a6 	rbit	r3, r6
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	07d8      	lsls	r0, r3, #31
 8002104:	d5b9      	bpl.n	800207a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002106:	f7fe ff51 	bl	8000fac <HAL_GetTick>
 800210a:	1bc0      	subs	r0, r0, r7
 800210c:	2864      	cmp	r0, #100	; 0x64
 800210e:	d9ed      	bls.n	80020ec <HAL_RCC_OscConfig+0x4b8>
 8002110:	e5f8      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002112:	4c48      	ldr	r4, [pc, #288]	; (8002234 <HAL_RCC_OscConfig+0x600>)
 8002114:	6863      	ldr	r3, [r4, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	f43f adb4 	beq.w	8001c88 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002120:	2a02      	cmp	r2, #2
 8002122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002126:	d15f      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5b4>
 8002128:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002136:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe ff35 	bl	8000fac <HAL_GetTick>
 8002142:	4607      	mov	r7, r0
 8002144:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8002148:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	4a39      	ldr	r2, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x600>)
 800214e:	6821      	ldr	r1, [r4, #0]
 8002150:	fa96 f3a6 	rbit	r3, r6
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa21 f303 	lsr.w	r3, r1, r3
 8002160:	07d9      	lsls	r1, r3, #31
 8002162:	d435      	bmi.n	80021d0 <HAL_RCC_OscConfig+0x59c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002164:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002166:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800216a:	d109      	bne.n	8002180 <HAL_RCC_OscConfig+0x54c>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
          
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800216c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800216e:	6869      	ldr	r1, [r5, #4]
 8002170:	4319      	orrs	r1, r3
 8002172:	62d1      	str	r1, [r2, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002174:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002176:	f021 000f 	bic.w	r0, r1, #15
 800217a:	68e9      	ldr	r1, [r5, #12]
 800217c:	4301      	orrs	r1, r0
 800217e:	62d1      	str	r1, [r2, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	6863      	ldr	r3, [r4, #4]
 8002182:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002184:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002188:	4332      	orrs	r2, r6
 800218a:	4313      	orrs	r3, r2
 800218c:	6063      	str	r3, [r4, #4]
 800218e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002192:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80021a0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff00 	bl	8000fac <HAL_GetTick>
 80021ac:	4606      	mov	r6, r0
 80021ae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80021b2:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	fa95 f3a5 	rbit	r3, r5
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	07da      	lsls	r2, r3, #31
 80021ca:	d507      	bpl.n	80021dc <HAL_RCC_OscConfig+0x5a8>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80021cc:	2000      	movs	r0, #0
 80021ce:	e02e      	b.n	800222e <HAL_RCC_OscConfig+0x5fa>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe feec 	bl	8000fac <HAL_GetTick>
 80021d4:	1bc0      	subs	r0, r0, r7
 80021d6:	2802      	cmp	r0, #2
 80021d8:	d9b6      	bls.n	8002148 <HAL_RCC_OscConfig+0x514>
 80021da:	e593      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe fee6 	bl	8000fac <HAL_GetTick>
 80021e0:	1b80      	subs	r0, r0, r6
 80021e2:	2802      	cmp	r0, #2
 80021e4:	d9e5      	bls.n	80021b2 <HAL_RCC_OscConfig+0x57e>
 80021e6:	e58d      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
 80021e8:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80021f6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fed5 	bl	8000fac <HAL_GetTick>
 8002202:	4606      	mov	r6, r0
 8002204:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002208:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	fa95 f3a5 	rbit	r3, r5
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	07db      	lsls	r3, r3, #31
 8002220:	d5d4      	bpl.n	80021cc <HAL_RCC_OscConfig+0x598>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fec3 	bl	8000fac <HAL_GetTick>
 8002226:	1b80      	subs	r0, r0, r6
 8002228:	2802      	cmp	r0, #2
 800222a:	d9ed      	bls.n	8002208 <HAL_RCC_OscConfig+0x5d4>
 800222c:	e56a      	b.n	8001d04 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800222e:	b003      	add	sp, #12
 8002230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b5f0      	push	{r4, r5, r6, r7, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_RCC_GetSysClockFreq+0xec>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b089      	sub	sp, #36	; 0x24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	aa01      	add	r2, sp, #4
 8002244:	c203      	stmia	r2!, {r0, r1}
 8002246:	6898      	ldr	r0, [r3, #8]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8002248:	ad04      	add	r5, sp, #16
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 800224a:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 800224c:	f103 020c 	add.w	r2, r3, #12
 8002250:	331c      	adds	r3, #28
 8002252:	462c      	mov	r4, r5
 8002254:	6810      	ldr	r0, [r2, #0]
 8002256:	6851      	ldr	r1, [r2, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	c403      	stmia	r4!, {r0, r1}
 800225c:	429a      	cmp	r2, r3
 800225e:	4625      	mov	r5, r4
 8002260:	d1f7      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x1a>
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002262:	4f31      	ldr	r7, [pc, #196]	; (8002328 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002264:	6879      	ldr	r1, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002266:	f001 030c 	and.w	r3, r1, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d057      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0xe6>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d001      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x3e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002272:	482e      	ldr	r0, [pc, #184]	; (800232c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002274:	e054      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xe8>
 8002276:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800227a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	aa08      	add	r2, sp, #32
 800228c:	4413      	add	r3, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800228e:	03ca      	lsls	r2, r1, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002290:	f813 4c1c 	ldrb.w	r4, [r3, #-28]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002294:	d540      	bpl.n	8002318 <HAL_RCC_GetSysClockFreq+0xe0>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	230f      	movs	r3, #15
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	fab3 f183 	clz	r1, r3
 80022a2:	f002 030f 	and.w	r3, r2, #15
 80022a6:	40cb      	lsrs	r3, r1
 80022a8:	aa08      	add	r2, sp, #32
 80022aa:	4413      	add	r3, r2
 80022ac:	f813 0c10 	ldrb.w	r0, [r3, #-16]
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	03db      	lsls	r3, r3, #15
 80022b4:	d51a      	bpl.n	80022ec <HAL_RCC_GetSysClockFreq+0xb4>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 80022b6:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80022b8:	21f0      	movs	r1, #240	; 0xf0
 80022ba:	fa91 f1a1 	rbit	r1, r1
 80022be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022c2:	fab1 f681 	clz	r6, r1
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 80022c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c8:	fa93 f3a3 	rbit	r3, r3
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 80022cc:	f005 01f0 	and.w	r1, r5, #240	; 0xf0
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 80022d0:	fab3 f383 	clz	r3, r3
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 80022d4:	40f1      	lsrs	r1, r6
 80022d6:	4d16      	ldr	r5, [pc, #88]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d8:	3101      	adds	r1, #1
 80022da:	fbb5 f1f1 	udiv	r1, r5, r1
 80022de:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	3302      	adds	r3, #2
 80022e8:	434b      	muls	r3, r1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xb6>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ee:	fbb3 f0f0 	udiv	r0, r3, r0
 80022f2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80022f6:	4360      	muls	r0, r4
 80022f8:	fa93 f3a3 	rbit	r3, r3
        }
        
        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	f44f 1250 	mov.w	r2, #3407872	; 0x340000
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	aa08      	add	r2, sp, #32
 800230a:	4413      	add	r3, r2
 800230c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002310:	429c      	cmp	r4, r3
 8002312:	d105      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0xe8>
        {
            pllclk = pllclk / 2;
 8002314:	0840      	lsrs	r0, r0, #1
 8002316:	e003      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xe8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	4806      	ldr	r0, [pc, #24]	; (8002334 <HAL_RCC_GetSysClockFreq+0xfc>)
 800231a:	4360      	muls	r0, r4
 800231c:	e000      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xe8>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4804      	ldr	r0, [pc, #16]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002320:	b009      	add	sp, #36	; 0x24
 8002322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002324:	080039f0 	.word	0x080039f0
 8002328:	40021000 	.word	0x40021000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	00f42400 	.word	0x00f42400
 8002334:	003d0900 	.word	0x003d0900

08002338 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800233e:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800234a:	d30a      	bcc.n	8002362 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	6831      	ldr	r1, [r6, #0]
 800234e:	078c      	lsls	r4, r1, #30
 8002350:	d514      	bpl.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002352:	484f      	ldr	r0, [pc, #316]	; (8002490 <HAL_RCC_ClockConfig+0x158>)
 8002354:	6843      	ldr	r3, [r0, #4]
 8002356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235a:	68b3      	ldr	r3, [r6, #8]
 800235c:	4313      	orrs	r3, r2
 800235e:	6043      	str	r3, [r0, #4]
 8002360:	e00c      	b.n	800237c <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	f023 0307 	bic.w	r3, r3, #7
 8002368:	430b      	orrs	r3, r1
 800236a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800236c:	6813      	ldr	r3, [r2, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	4299      	cmp	r1, r3
 8002374:	d0ea      	beq.n	800234c <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8002376:	2001      	movs	r0, #1
 8002378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237c:	07c8      	lsls	r0, r1, #31
 800237e:	d406      	bmi.n	800238e <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002380:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_RCC_ClockConfig+0x154>)
 8002382:	6813      	ldr	r3, [r2, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	429d      	cmp	r5, r3
 800238a:	d34a      	bcc.n	8002422 <HAL_RCC_ClockConfig+0xea>
 800238c:	e053      	b.n	8002436 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	6872      	ldr	r2, [r6, #4]
 8002390:	4c3f      	ldr	r4, [pc, #252]	; (8002490 <HAL_RCC_ClockConfig+0x158>)
 8002392:	2a01      	cmp	r2, #1
 8002394:	d102      	bne.n	800239c <HAL_RCC_ClockConfig+0x64>
 8002396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239a:	e004      	b.n	80023a6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239c:	2a02      	cmp	r2, #2
 800239e:	bf0c      	ite	eq
 80023a0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80023a4:	2302      	movne	r3, #2
 80023a6:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	6821      	ldr	r1, [r4, #0]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa21 f303 	lsr.w	r3, r1, r3
 80023bc:	07d9      	lsls	r1, r3, #31
 80023be:	d5da      	bpl.n	8002376 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c0:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c2:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ce:	f7fe fded 	bl	8000fac <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d4:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023da:	6863      	ldr	r3, [r4, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d0cd      	beq.n	8002380 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fde2 	bl	8000fac <HAL_GetTick>
 80023e8:	1bc0      	subs	r0, r0, r7
 80023ea:	4540      	cmp	r0, r8
 80023ec:	d9f5      	bls.n	80023da <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 80023ee:	2003      	movs	r0, #3
 80023f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d10f      	bne.n	8002418 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	6863      	ldr	r3, [r4, #4]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d0be      	beq.n	8002380 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7fe fdd3 	bl	8000fac <HAL_GetTick>
 8002406:	1bc0      	subs	r0, r0, r7
 8002408:	4540      	cmp	r0, r8
 800240a:	d9f5      	bls.n	80023f8 <HAL_RCC_ClockConfig+0xc0>
 800240c:	e7ef      	b.n	80023ee <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240e:	f7fe fdcd 	bl	8000fac <HAL_GetTick>
 8002412:	1bc0      	subs	r0, r0, r7
 8002414:	4540      	cmp	r0, r8
 8002416:	d8ea      	bhi.n	80023ee <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002418:	6863      	ldr	r3, [r4, #4]
 800241a:	f013 0f0c 	tst.w	r3, #12
 800241e:	d1f6      	bne.n	800240e <HAL_RCC_ClockConfig+0xd6>
 8002420:	e7ae      	b.n	8002380 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f023 0307 	bic.w	r3, r3, #7
 8002428:	432b      	orrs	r3, r5
 800242a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800242c:	6813      	ldr	r3, [r2, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	429d      	cmp	r5, r3
 8002434:	d19f      	bne.n	8002376 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002436:	6831      	ldr	r1, [r6, #0]
 8002438:	4c15      	ldr	r4, [pc, #84]	; (8002490 <HAL_RCC_ClockConfig+0x158>)
 800243a:	f011 0f04 	tst.w	r1, #4
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	6863      	ldr	r3, [r4, #4]
 8002442:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002446:	68f3      	ldr	r3, [r6, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	070b      	lsls	r3, r1, #28
 800244e:	d506      	bpl.n	800245e <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002450:	6863      	ldr	r3, [r4, #4]
 8002452:	6932      	ldr	r2, [r6, #16]
 8002454:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002458:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800245c:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800245e:	f7ff feeb 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002462:	6863      	ldr	r3, [r4, #4]
 8002464:	22f0      	movs	r2, #240	; 0xf0
 8002466:	fa92 f2a2 	rbit	r2, r2
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002472:	40d3      	lsrs	r3, r2
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_RCC_ClockConfig+0x15c>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	40d8      	lsrs	r0, r3
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_RCC_ClockConfig+0x160>)
 800247c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe fd68 	bl	8000f54 <HAL_InitTick>
  
  return HAL_OK;
 8002484:	2000      	movs	r0, #0
}
 8002486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	08003a0c 	.word	0x08003a0c
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800249c:	4b01      	ldr	r3, [pc, #4]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000

080024a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024a8:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024ae:	f013 0f01 	tst.w	r3, #1
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b2:	4605      	mov	r5, r0
 80024b4:	4c6c      	ldr	r4, [pc, #432]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024b6:	d063      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	69e3      	ldr	r3, [r4, #28]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4e6c      	ldr	r6, [pc, #432]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61e3      	str	r3, [r4, #28]
 80024c2:	69e3      	ldr	r3, [r4, #28]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80024cc:	6833      	ldr	r3, [r6, #0]
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fd6a 	bl	8000fac <HAL_GetTick>
 80024d8:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024da:	6833      	ldr	r3, [r6, #0]
 80024dc:	05db      	lsls	r3, r3, #23
 80024de:	d406      	bmi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fd64 	bl	8000fac <HAL_GetTick>
 80024e4:	1bc0      	subs	r0, r0, r7
 80024e6:	2864      	cmp	r0, #100	; 0x64
 80024e8:	d9f7      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x32>
      {
        return HAL_TIMEOUT;
 80024ea:	2003      	movs	r0, #3
 80024ec:	e0b9      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ee:	6a23      	ldr	r3, [r4, #32]
 80024f0:	485d      	ldr	r0, [pc, #372]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80024f6:	d106      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024f8:	6a23      	ldr	r3, [r4, #32]
 80024fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fe:	686b      	ldr	r3, [r5, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	6223      	str	r3, [r4, #32]
 8002504:	e03c      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002506:	686a      	ldr	r2, [r5, #4]
 8002508:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800250c:	4293      	cmp	r3, r2
 800250e:	d0f3      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002510:	6a01      	ldr	r1, [r0, #32]
 8002512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002516:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 800251a:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	4e53      	ldr	r6, [pc, #332]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002524:	f04f 0e01 	mov.w	lr, #1
 8002528:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 800252c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	2200      	movs	r2, #0
 8002536:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800253a:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800253c:	07c8      	lsls	r0, r1, #31
 800253e:	d5db      	bpl.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002540:	f7fe fd34 	bl	8000fac <HAL_GetTick>
 8002544:	2602      	movs	r6, #2
 8002546:	4680      	mov	r8, r0
 8002548:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f241 3988 	movw	r9, #5000	; 0x1388
 800254e:	fa96 f3a6 	rbit	r3, r6
 8002552:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	b10b      	cbz	r3, 800255c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002558:	6a22      	ldr	r2, [r4, #32]
 800255a:	e000      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800255c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800255e:	fa97 f3a7 	rbit	r3, r7
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	07d9      	lsls	r1, r3, #31
 8002570:	d4c2      	bmi.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fd1b 	bl	8000fac <HAL_GetTick>
 8002576:	ebc8 0000 	rsb	r0, r8, r0
 800257a:	4548      	cmp	r0, r9
 800257c:	d9e7      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800257e:	e7b4      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	079a      	lsls	r2, r3, #30
 8002584:	d505      	bpl.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 800258c:	68aa      	ldr	r2, [r5, #8]
 800258e:	430a      	orrs	r2, r1
 8002590:	6062      	str	r2, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002592:	075f      	lsls	r7, r3, #29
 8002594:	d505      	bpl.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002598:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800259c:	68ea      	ldr	r2, [r5, #12]
 800259e:	430a      	orrs	r2, r1
 80025a0:	62e2      	str	r2, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80025a2:	071e      	lsls	r6, r3, #28
 80025a4:	d505      	bpl.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80025a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80025ac:	692b      	ldr	r3, [r5, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80025b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025b4:	0398      	lsls	r0, r3, #14
 80025b6:	d40f      	bmi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	0359      	lsls	r1, r3, #13
 80025be:	d40b      	bmi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025c0:	6828      	ldr	r0, [r5, #0]
 80025c2:	f010 0010 	ands.w	r0, r0, #16
 80025c6:	d04c      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c8:	6863      	ldr	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025ca:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025d0:	69eb      	ldr	r3, [r5, #28]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	6063      	str	r3, [r4, #4]
 80025d6:	e044      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1ba>

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	4a23      	ldr	r2, [pc, #140]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	d439      	bmi.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 80025e0:	6813      	ldr	r3, [r2, #0]
 80025e2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80025e6:	69ab      	ldr	r3, [r5, #24]
 80025e8:	d004      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80025ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 80025ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d135      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      {
        return HAL_ERROR;
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80025f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025fa:	4313      	orrs	r3, r2
 80025fc:	62e3      	str	r3, [r4, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80025fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002600:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8002604:	696b      	ldr	r3, [r5, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800260a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800260e:	fa93 f3a3 	rbit	r3, r3
      
      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800261c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe fcc2 	bl	8000fac <HAL_GetTick>
 8002628:	4607      	mov	r7, r0
 800262a:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
 800262e:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till PLLI2S is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002632:	6822      	ldr	r2, [r4, #0]
 8002634:	fa96 f3a6 	rbit	r3, r6
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	07da      	lsls	r2, r3, #31
 8002646:	d4bb      	bmi.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002648:	f7fe fcb0 	bl	8000fac <HAL_GetTick>
 800264c:	1bc0      	subs	r0, r0, r7
 800264e:	2864      	cmp	r0, #100	; 0x64
 8002650:	d9ed      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002652:	e74a      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x42>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002654:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002656:	696a      	ldr	r2, [r5, #20]
 8002658:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800265c:	4293      	cmp	r3, r2
 800265e:	d0af      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
      {
        return HAL_ERROR;
 8002660:	2001      	movs	r0, #1
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8002662:	b003      	add	sp, #12
 8002664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420400 	.word	0x42420400

08002674 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002674:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002676:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002680:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002682:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002684:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002686:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800268a:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800268c:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002690:	688b      	ldr	r3, [r1, #8]
 8002692:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002694:	4c0a      	ldr	r4, [pc, #40]	; (80026c0 <TIM_OC1_SetConfig+0x4c>)
 8002696:	42a0      	cmp	r0, r4
 8002698:	d10b      	bne.n	80026b2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800269a:	68cc      	ldr	r4, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800269c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026a0:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a2:	694e      	ldr	r6, [r1, #20]
 80026a4:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026aa:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b0:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026b4:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b6:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ba:	6203      	str	r3, [r0, #32]
 80026bc:	bd70      	pop	{r4, r5, r6, pc}
 80026be:	bf00      	nop
 80026c0:	40012c00 	.word	0x40012c00

080026c4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c4:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c6:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026d2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d4:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026d6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026da:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80026dc:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80026e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026e6:	4d0c      	ldr	r5, [pc, #48]	; (8002718 <TIM_OC3_SetConfig+0x54>)
 80026e8:	42a8      	cmp	r0, r5
 80026ea:	d10e      	bne.n	800270a <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80026ec:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80026f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80026f6:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80026fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002700:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002706:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800270a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800270c:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800270e:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002710:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002712:	6203      	str	r3, [r0, #32]
 8002714:	bd30      	pop	{r4, r5, pc}
 8002716:	bf00      	nop
 8002718:	40012c00 	.word	0x40012c00

0800271c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800271c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800271e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002724:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002728:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800272c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800272e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002732:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002736:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800273c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002740:	4d06      	ldr	r5, [pc, #24]	; (800275c <TIM_OC4_SetConfig+0x40>)
 8002742:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002744:	bf02      	ittt	eq
 8002746:	694d      	ldreq	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002748:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800274c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002750:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002752:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002754:	684a      	ldr	r2, [r1, #4]
 8002756:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002758:	6203      	str	r3, [r0, #32]
 800275a:	bd30      	pop	{r4, r5, pc}
 800275c:	40012c00 	.word	0x40012c00

08002760 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002762:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_OC_MspInit>:
 8002776:	4770      	bx	lr

08002778 <HAL_TIM_PWM_MspInit>:
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800277a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800277e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002780:	2b01      	cmp	r3, #1
 8002782:	f04f 0302 	mov.w	r3, #2
 8002786:	f000 80b0 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 800278a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278e:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002790:	2201      	movs	r2, #1
 8002792:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002796:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800279c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80027a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a2:	680a      	ldr	r2, [r1, #0]
 80027a4:	2a40      	cmp	r2, #64	; 0x40
 80027a6:	d077      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0x11e>
 80027a8:	d818      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x62>
 80027aa:	2a10      	cmp	r2, #16
 80027ac:	f000 808b 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x14c>
 80027b0:	d808      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x4a>
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	f040 8093 	bne.w	80028de <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80027b8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80027ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027be:	f042 0207 	orr.w	r2, r2, #7
 80027c2:	e08b      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	f000 8084 	beq.w	80028d2 <HAL_TIM_ConfigClockSource+0x158>
 80027ca:	2a30      	cmp	r2, #48	; 0x30
 80027cc:	f040 8087 	bne.w	80028de <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80027d0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80027d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027d6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80027da:	e07f      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80027dc:	2a70      	cmp	r2, #112	; 0x70
 80027de:	d035      	beq.n	800284c <HAL_TIM_ConfigClockSource+0xd2>
 80027e0:	d81b      	bhi.n	800281a <HAL_TIM_ConfigClockSource+0xa0>
 80027e2:	2a50      	cmp	r2, #80	; 0x50
 80027e4:	d041      	beq.n	800286a <HAL_TIM_ConfigClockSource+0xf0>
 80027e6:	2a60      	cmp	r2, #96	; 0x60
 80027e8:	d179      	bne.n	80028de <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ea:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ec:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ee:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f2:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80027f8:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002802:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002806:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800280a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800280c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800280e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002810:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002814:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002818:	e060      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800281a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800281e:	d011      	beq.n	8002844 <HAL_TIM_ConfigClockSource+0xca>
 8002820:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002824:	d15b      	bne.n	80028de <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002826:	689c      	ldr	r4, [r3, #8]
 8002828:	688d      	ldr	r5, [r1, #8]
 800282a:	684a      	ldr	r2, [r1, #4]
 800282c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002830:	68c9      	ldr	r1, [r1, #12]
 8002832:	432a      	orrs	r2, r5
 8002834:	4322      	orrs	r2, r4
 8002836:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283a:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002842:	e04b      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	f022 0207 	bic.w	r2, r2, #7
 800284a:	e047      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800284c:	689c      	ldr	r4, [r3, #8]
 800284e:	688d      	ldr	r5, [r1, #8]
 8002850:	684a      	ldr	r2, [r1, #4]
 8002852:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002856:	68c9      	ldr	r1, [r1, #12]
 8002858:	432a      	orrs	r2, r5
 800285a:	4322      	orrs	r2, r4
 800285c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002860:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8002862:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002864:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002868:	e038      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800286a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286c:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002870:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002874:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002878:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800287a:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002882:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002884:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002888:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800288a:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800288c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800288e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002892:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002896:	e021      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002898:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289c:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289e:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a6:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a8:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ac:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 80028b0:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 80028b2:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80028ba:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80028bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028c0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80028c4:	e00a      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80028c6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80028c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028cc:	f042 0217 	orr.w	r2, r2, #23
 80028d0:	e004      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80028d2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80028d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028d8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80028dc:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80028de:	2301      	movs	r3, #1
 80028e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80028e4:	2300      	movs	r3, #0
 80028e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ea:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80028ec:	bd70      	pop	{r4, r5, r6, pc}

080028ee <HAL_TIM_OC_DelayElapsedCallback>:
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_IC_CaptureCallback>:
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_TriggerCallback>:
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028f6:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f8:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fa:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fc:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fe:	0791      	lsls	r1, r2, #30
 8002900:	d514      	bpl.n	800292c <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	0792      	lsls	r2, r2, #30
 8002906:	d511      	bpl.n	800292c <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002908:	f06f 0202 	mvn.w	r2, #2
 800290c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800290e:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002910:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002912:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002914:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002916:	d002      	beq.n	800291e <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002918:	f7ff ffea 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 800291c:	e004      	b.n	8002928 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	f7ff ffe6 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff ffe5 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002928:	2300      	movs	r3, #0
 800292a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	0750      	lsls	r0, r2, #29
 8002932:	d516      	bpl.n	8002962 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	0751      	lsls	r1, r2, #29
 8002938:	d513      	bpl.n	8002962 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800293a:	f06f 0204 	mvn.w	r2, #4
 800293e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002940:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002944:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002948:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800294c:	d002      	beq.n	8002954 <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	f7ff ffcf 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 8002952:	e004      	b.n	800295e <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002954:	f7ff ffcb 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff ffca 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	2300      	movs	r3, #0
 8002960:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	0712      	lsls	r2, r2, #28
 8002968:	d515      	bpl.n	8002996 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	0710      	lsls	r0, r2, #28
 800296e:	d512      	bpl.n	8002996 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002970:	f06f 0208 	mvn.w	r2, #8
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002976:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002978:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800297a:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800297e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002980:	d002      	beq.n	8002988 <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	f7ff ffb5 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 8002986:	e004      	b.n	8002992 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002988:	f7ff ffb1 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff ffb0 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	2300      	movs	r3, #0
 8002994:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	06d2      	lsls	r2, r2, #27
 800299c:	d516      	bpl.n	80029cc <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	06d0      	lsls	r0, r2, #27
 80029a2:	d513      	bpl.n	80029cc <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029a4:	f06f 0210 	mvn.w	r2, #16
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80029aa:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ac:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80029ae:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80029b4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80029b6:	d002      	beq.n	80029be <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80029b8:	f7ff ff9a 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e004      	b.n	80029c8 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	f7ff ff96 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff ff95 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c8:	2300      	movs	r3, #0
 80029ca:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	07d1      	lsls	r1, r2, #31
 80029d2:	d508      	bpl.n	80029e6 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	07d2      	lsls	r2, r2, #31
 80029d8:	d505      	bpl.n	80029e6 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029da:	f06f 0201 	mvn.w	r2, #1
 80029de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80029e0:	4620      	mov	r0, r4
 80029e2:	f000 f9b9 	bl	8002d58 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	0610      	lsls	r0, r2, #24
 80029ec:	d508      	bpl.n	8002a00 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	0611      	lsls	r1, r2, #24
 80029f2:	d505      	bpl.n	8002a00 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80029fa:	4620      	mov	r0, r4
 80029fc:	f000 f9ab 	bl	8002d56 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	0652      	lsls	r2, r2, #25
 8002a06:	d508      	bpl.n	8002a1a <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	0650      	lsls	r0, r2, #25
 8002a0c:	d505      	bpl.n	8002a1a <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a12:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff ff6d 	bl	80028f4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	0691      	lsls	r1, r2, #26
 8002a20:	d50a      	bpl.n	8002a38 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	0692      	lsls	r2, r2, #26
 8002a26:	d507      	bpl.n	8002a38 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a28:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002a2c:	4620      	mov	r0, r4
    }
  }
}
 8002a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002a34:	f000 b98e 	b.w	8002d54 <HAL_TIMEx_CommutationCallback>
 8002a38:	bd10      	pop	{r4, pc}
	...

08002a3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <TIM_Base_SetConfig+0x74>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8002a3e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a40:	4290      	cmp	r0, r2
 8002a42:	d00e      	beq.n	8002a62 <TIM_Base_SetConfig+0x26>
 8002a44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a48:	d00b      	beq.n	8002a62 <TIM_Base_SetConfig+0x26>
 8002a4a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x26>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a56:	4290      	cmp	r0, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x26>
 8002a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a5e:	4290      	cmp	r0, r2
 8002a60:	d119      	bne.n	8002a96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002a62:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a68:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <TIM_Base_SetConfig+0x74>)
 8002a6c:	4290      	cmp	r0, r2
 8002a6e:	d00e      	beq.n	8002a8e <TIM_Base_SetConfig+0x52>
 8002a70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0x52>
 8002a76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a7a:	4290      	cmp	r0, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0x52>
 8002a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a82:	4290      	cmp	r0, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x52>
 8002a86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a8a:	4290      	cmp	r0, r2
 8002a8c:	d103      	bne.n	8002a96 <TIM_Base_SetConfig+0x5a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a8e:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a94:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002a96:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	688b      	ldr	r3, [r1, #8]
 8002a9a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a9c:	680b      	ldr	r3, [r1, #0]
 8002a9e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <TIM_Base_SetConfig+0x74>)
 8002aa2:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa4:	bf04      	itt	eq
 8002aa6:	690b      	ldreq	r3, [r1, #16]
 8002aa8:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	6143      	str	r3, [r0, #20]
 8002aae:	4770      	bx	lr
 8002ab0:	40012c00 	.word	0x40012c00

08002ab4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	b1a0      	cbz	r0, 8002ae4 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002aba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002abe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ac2:	b91b      	cbnz	r3, 8002acc <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac8:	f000 ff1e 	bl	8003908 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad2:	6820      	ldr	r0, [r4, #0]
 8002ad4:	1d21      	adds	r1, r4, #4
 8002ad6:	f7ff ffb1 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002ae4:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002ae8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002aea:	4604      	mov	r4, r0
 8002aec:	b1a0      	cbz	r0, 8002b18 <HAL_TIM_OC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002aee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002af6:	b91b      	cbnz	r3, 8002b00 <HAL_TIM_OC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002afc:	f7ff fe3b 	bl	8002776 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	1d21      	adds	r1, r4, #4
 8002b0a:	f7ff ff97 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002b14:	2000      	movs	r0, #0
 8002b16:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b1e:	4604      	mov	r4, r0
 8002b20:	b1a0      	cbz	r0, 8002b4c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b2a:	b91b      	cbnz	r3, 8002b34 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b30:	f7ff fe22 	bl	8002778 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b34:	2302      	movs	r3, #2
 8002b36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	1d21      	adds	r1, r4, #4
 8002b3e:	f7ff ff7d 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002b48:	2000      	movs	r0, #0
 8002b4a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002b4c:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b50:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b52:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b54:	f023 0310 	bic.w	r3, r3, #16
 8002b58:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5e:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002b60:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b62:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002b66:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002b6a:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b6c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002b70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b74:	4d0b      	ldr	r5, [pc, #44]	; (8002ba4 <TIM_OC2_SetConfig+0x54>)
 8002b76:	42a8      	cmp	r0, r5
 8002b78:	d10e      	bne.n	8002b98 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002b7a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002b80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002b84:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002b8a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002b8e:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002b94:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b98:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b9a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b9e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba0:	6203      	str	r3, [r0, #32]
 8002ba2:	bd30      	pop	{r4, r5, pc}
 8002ba4:	40012c00 	.word	0x40012c00

08002ba8 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002baa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002bae:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f04f 0002 	mov.w	r0, #2
 8002bb6:	d024      	beq.n	8002c02 <HAL_TIM_OC_ConfigChannel+0x5a>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbe:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8002bc2:	461d      	mov	r5, r3

  switch (Channel)
 8002bc4:	2a0c      	cmp	r2, #12
 8002bc6:	d817      	bhi.n	8002bf8 <HAL_TIM_OC_ConfigChannel+0x50>
 8002bc8:	e8df f002 	tbb	[pc, r2]
 8002bcc:	16161607 	.word	0x16161607
 8002bd0:	1616160b 	.word	0x1616160b
 8002bd4:	1616160f 	.word	0x1616160f
 8002bd8:	13          	.byte	0x13
 8002bd9:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	f7ff fd4a 	bl	8002674 <TIM_OC1_SetConfig>
    }
    break;
 8002be0:	e00a      	b.n	8002bf8 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	f7ff ffb4 	bl	8002b50 <TIM_OC2_SetConfig>
    }
    break;
 8002be8:	e006      	b.n	8002bf8 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bea:	6820      	ldr	r0, [r4, #0]
 8002bec:	f7ff fd6a 	bl	80026c4 <TIM_OC3_SetConfig>
    }
    break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f7ff fd92 	bl	800271c <TIM_OC4_SetConfig>
    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002bf8:	2000      	movs	r0, #0
    break;

    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bfa:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002bfe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002c02:	bd38      	pop	{r3, r4, r5, pc}

08002c04 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002c04:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002c06:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002c0a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002c0c:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002c0e:	460d      	mov	r5, r1
 8002c10:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002c14:	d058      	beq.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8002c16:	2301      	movs	r3, #1
 8002c18:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8002c20:	2a0c      	cmp	r2, #12
 8002c22:	d84b      	bhi.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0xb8>
 8002c24:	e8df f002 	tbb	[pc, r2]
 8002c28:	4a4a4a07 	.word	0x4a4a4a07
 8002c2c:	4a4a4a17 	.word	0x4a4a4a17
 8002c30:	4a4a4a29 	.word	0x4a4a4a29
 8002c34:	39          	.byte	0x39
 8002c35:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c36:	6820      	ldr	r0, [r4, #0]
 8002c38:	f7ff fd1c 	bl	8002674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	f042 0208 	orr.w	r2, r2, #8
 8002c44:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	f022 0204 	bic.w	r2, r2, #4
 8002c4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c4e:	6999      	ldr	r1, [r3, #24]
 8002c50:	692a      	ldr	r2, [r5, #16]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	e00f      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x72>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c56:	6820      	ldr	r0, [r4, #0]
 8002c58:	f7ff ff7a 	bl	8002b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c5c:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002c5e:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c76:	619a      	str	r2, [r3, #24]
    }
    break;
 8002c78:	e020      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0xb8>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	f7ff fd22 	bl	80026c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	f042 0208 	orr.w	r2, r2, #8
 8002c88:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	f022 0204 	bic.w	r2, r2, #4
 8002c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c92:	69d9      	ldr	r1, [r3, #28]
 8002c94:	692a      	ldr	r2, [r5, #16]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	e00f      	b.n	8002cba <HAL_TIM_PWM_ConfigChannel+0xb6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	f7ff fd3e 	bl	800271c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ca0:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002ca2:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002caa:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cba:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002cbe:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002cc4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}

08002cca <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cca:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6a04      	ldr	r4, [r0, #32]
 8002cd0:	408b      	lsls	r3, r1
 8002cd2:	ea24 0303 	bic.w	r3, r4, r3
 8002cd6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cd8:	6a03      	ldr	r3, [r0, #32]
 8002cda:	408a      	lsls	r2, r1
 8002cdc:	ea42 0103 	orr.w	r1, r2, r3
 8002ce0:	6201      	str	r1, [r0, #32]
 8002ce2:	bd10      	pop	{r4, pc}

08002ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	f7ff ffed 	bl	8002cca <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <HAL_TIM_PWM_Start+0x28>)
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002cf4:	2000      	movs	r0, #0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cf6:	4293      	cmp	r3, r2
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cf8:	bf02      	ittt	eq
 8002cfa:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002cfc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002d00:	645a      	streq	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002d0a:	bd10      	pop	{r4, pc}
 8002d0c:	40012c00 	.word	0x40012c00

08002d10 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002d10:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002d14:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f04f 0302 	mov.w	r3, #2
 8002d1c:	d018      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002d22:	6803      	ldr	r3, [r0, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d2a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	685c      	ldr	r4, [r3, #4]
 8002d2e:	680a      	ldr	r2, [r1, #0]
 8002d30:	4322      	orrs	r2, r4
 8002d32:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002d3c:	689c      	ldr	r4, [r3, #8]
 8002d3e:	684a      	ldr	r2, [r1, #4]
 8002d40:	4322      	orrs	r2, r4
 8002d42:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002d50:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002d52:	bd10      	pop	{r4, pc}

08002d54 <HAL_TIMEx_CommutationCallback>:
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance==TIM2) //check if the interrupt comes from TIM3
 8002d58:	6803      	ldr	r3, [r0, #0]

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (htim->Instance==TIM2) //check if the interrupt comes from TIM3
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	f040 8365 	bne.w	8003430 <HAL_TIM_PeriodElapsedCallback+0x6d8>
	{
		in.a1 = ADC.a1*3.3/4095;
 8002d66:	4cca      	ldr	r4, [pc, #808]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002d68:	4dca      	ldr	r5, [pc, #808]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002d6a:	6820      	ldr	r0, [r4, #0]
 8002d6c:	f7fd fb9e 	bl	80004ac <__aeabi_ui2d>
 8002d70:	a3b7      	add	r3, pc, #732	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fc0f 	bl	8000598 <__aeabi_dmul>
 8002d7a:	a3b7      	add	r3, pc, #732	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fd34 	bl	80007ec <__aeabi_ddiv>
 8002d84:	f7fd fea2 	bl	8000acc <__aeabi_d2f>
 8002d88:	4682      	mov	sl, r0
 8002d8a:	6028      	str	r0, [r5, #0]
		in.a2 = ADC.a2*3.3/4095;
 8002d8c:	6860      	ldr	r0, [r4, #4]
 8002d8e:	f7fd fb8d 	bl	80004ac <__aeabi_ui2d>
 8002d92:	a3af      	add	r3, pc, #700	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_dmul>
 8002d9c:	a3ae      	add	r3, pc, #696	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fd23 	bl	80007ec <__aeabi_ddiv>
 8002da6:	f7fd fe91 	bl	8000acc <__aeabi_d2f>
 8002daa:	4683      	mov	fp, r0
 8002dac:	6068      	str	r0, [r5, #4]
		in.a3 = ADC.a3*3.3/4095;
 8002dae:	68a0      	ldr	r0, [r4, #8]
 8002db0:	f7fd fb7c 	bl	80004ac <__aeabi_ui2d>
 8002db4:	a3a6      	add	r3, pc, #664	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fbed 	bl	8000598 <__aeabi_dmul>
 8002dbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f7fd fd12 	bl	80007ec <__aeabi_ddiv>
 8002dc8:	f7fd fe80 	bl	8000acc <__aeabi_d2f>
 8002dcc:	4681      	mov	r9, r0
 8002dce:	60a8      	str	r0, [r5, #8]
		in.a4 = ADC.a4*3.3/4095;
 8002dd0:	68e0      	ldr	r0, [r4, #12]
 8002dd2:	f7fd fb6b 	bl	80004ac <__aeabi_ui2d>
 8002dd6:	a39e      	add	r3, pc, #632	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fbdc 	bl	8000598 <__aeabi_dmul>
 8002de0:	a39d      	add	r3, pc, #628	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd fd01 	bl	80007ec <__aeabi_ddiv>
 8002dea:	f7fd fe6f 	bl	8000acc <__aeabi_d2f>
 8002dee:	4607      	mov	r7, r0
 8002df0:	60e8      	str	r0, [r5, #12]

		in.u_bat = ADC.u_bat*3.3/4095;
 8002df2:	6920      	ldr	r0, [r4, #16]
 8002df4:	f7fd fb5a 	bl	80004ac <__aeabi_ui2d>
 8002df8:	a395      	add	r3, pc, #596	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fbcb 	bl	8000598 <__aeabi_dmul>
 8002e02:	a395      	add	r3, pc, #596	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f7fd fcf0 	bl	80007ec <__aeabi_ddiv>
 8002e0c:	f7fd fe5e 	bl	8000acc <__aeabi_d2f>
 8002e10:	4606      	mov	r6, r0
 8002e12:	6168      	str	r0, [r5, #20]
		in.current_sense = ADC.current_sense*3.3/4095;
 8002e14:	6960      	ldr	r0, [r4, #20]
 8002e16:	f7fd fb49 	bl	80004ac <__aeabi_ui2d>
 8002e1a:	a38d      	add	r3, pc, #564	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fbba 	bl	8000598 <__aeabi_dmul>
 8002e24:	a38c      	add	r3, pc, #560	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fcdf 	bl	80007ec <__aeabi_ddiv>
 8002e2e:	f7fd fe4d 	bl	8000acc <__aeabi_d2f>
 8002e32:	61a8      	str	r0, [r5, #24]
 8002e34:	4680      	mov	r8, r0
		in.temp = ADC.temp*3.3/4095.0;
 8002e36:	69a0      	ldr	r0, [r4, #24]
 8002e38:	f7fd fb38 	bl	80004ac <__aeabi_ui2d>
 8002e3c:	a384      	add	r3, pc, #528	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f7fd fba9 	bl	8000598 <__aeabi_dmul>
 8002e46:	a384      	add	r3, pc, #528	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f7fd fcce 	bl	80007ec <__aeabi_ddiv>
 8002e50:	f7fd fe3c 	bl	8000acc <__aeabi_d2f>
 8002e54:	6228      	str	r0, [r5, #32]
		in.pot = ADC.pot*3.3/4095.0;
 8002e56:	69e0      	ldr	r0, [r4, #28]
 8002e58:	f7fd fb28 	bl	80004ac <__aeabi_ui2d>
 8002e5c:	a37c      	add	r3, pc, #496	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fb99 	bl	8000598 <__aeabi_dmul>
 8002e66:	a37c      	add	r3, pc, #496	; (adr r3, 8003058 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fcbe 	bl	80007ec <__aeabi_ddiv>
 8002e70:	f7fd fe2c 	bl	8000acc <__aeabi_d2f>

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
 8002e74:	4659      	mov	r1, fp
		in.a4 = ADC.a4*3.3/4095;

		in.u_bat = ADC.u_bat*3.3/4095;
		in.current_sense = ADC.current_sense*3.3/4095;
		in.temp = ADC.temp*3.3/4095.0;
		in.pot = ADC.pot*3.3/4095.0;
 8002e76:	6268      	str	r0, [r5, #36]	; 0x24

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
 8002e78:	4650      	mov	r0, sl
 8002e7a:	f7fd fe7d 	bl	8000b78 <__addsf3>
 8002e7e:	4649      	mov	r1, r9
 8002e80:	f7fd fe7a 	bl	8000b78 <__addsf3>
 8002e84:	4639      	mov	r1, r7
 8002e86:	f7fd fe77 	bl	8000b78 <__addsf3>
 8002e8a:	f7fd fb31 	bl	80004f0 <__aeabi_f2d>
 8002e8e:	a374      	add	r3, pc, #464	; (adr r3, 8003060 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fb80 	bl	8000598 <__aeabi_dmul>
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e9c:	f7fd fca6 	bl	80007ec <__aeabi_ddiv>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4b7e      	ldr	r3, [pc, #504]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002ea4:	f7fd fca2 	bl	80007ec <__aeabi_ddiv>
 8002ea8:	f7fd fe10 	bl	8000acc <__aeabi_d2f>
 8002eac:	4c7c      	ldr	r4, [pc, #496]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002eae:	6120      	str	r0, [r4, #16]
		val.u_bat = 25.0/25.8*in.u_bat*(3+22)/3.0;
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f7fd fb1d 	bl	80004f0 <__aeabi_f2d>
 8002eb6:	a36c      	add	r3, pc, #432	; (adr r3, 8003068 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fb6c 	bl	8000598 <__aeabi_dmul>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4b78      	ldr	r3, [pc, #480]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002ec4:	f7fd fb68 	bl	8000598 <__aeabi_dmul>
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4b77      	ldr	r3, [pc, #476]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002ecc:	f7fd fc8e 	bl	80007ec <__aeabi_ddiv>
 8002ed0:	f7fd fdfc 	bl	8000acc <__aeabi_d2f>
		if(state.init)
 8002ed4:	4b75      	ldr	r3, [pc, #468]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x354>)
		in.current_sense = ADC.current_sense*3.3/4095;
		in.temp = ADC.temp*3.3/4095.0;
		in.pot = ADC.pot*3.3/4095.0;

		val.current = (in.a1+in.a2+in.a3+in.a4)*30000.0/820.0/1000.0;
		val.u_bat = 25.0/25.8*in.u_bat*(3+22)/3.0;
 8002ed6:	6160      	str	r0, [r4, #20]
		if(state.init)
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	b1ca      	cbz	r2, 8002f12 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			val.current_sense0 = (val.current_sense0*199.0 +in.current_sense)/200.0;
 8002ede:	69e0      	ldr	r0, [r4, #28]
 8002ee0:	f7fd fb06 	bl	80004f0 <__aeabi_f2d>
 8002ee4:	a362      	add	r3, pc, #392	; (adr r3, 8003070 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fb55 	bl	8000598 <__aeabi_dmul>
 8002eee:	4606      	mov	r6, r0
 8002ef0:	4640      	mov	r0, r8
 8002ef2:	460f      	mov	r7, r1
 8002ef4:	f7fd fafc 	bl	80004f0 <__aeabi_f2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4630      	mov	r0, r6
 8002efe:	4639      	mov	r1, r7
 8002f00:	f7fd f998 	bl	8000234 <__adddf3>
 8002f04:	2200      	movs	r2, #0
 8002f06:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002f08:	f7fd fc70 	bl	80007ec <__aeabi_ddiv>
 8002f0c:	f7fd fdde 	bl	8000acc <__aeabi_d2f>
 8002f10:	61e0      	str	r0, [r4, #28]
		if(HAL_GetTick()>2000)
 8002f12:	f7fe f84b 	bl	8000fac <HAL_GetTick>
 8002f16:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			state.init = false;
 8002f1a:	bf82      	ittt	hi
 8002f1c:	9a00      	ldrhi	r2, [sp, #0]
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	7013      	strbhi	r3, [r2, #0]
		val.current_sense = fabs( (in.current_sense-val.current_sense0)*100.0/20.0*31.0);
 8002f22:	69e1      	ldr	r1, [r4, #28]
 8002f24:	69a8      	ldr	r0, [r5, #24]
 8002f26:	f7fd fe25 	bl	8000b74 <__aeabi_fsub>
 8002f2a:	f7fd fae1 	bl	80004f0 <__aeabi_f2d>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002f32:	f7fd fb31 	bl	8000598 <__aeabi_dmul>
 8002f36:	2200      	movs	r2, #0
 8002f38:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002f3a:	f7fd fc57 	bl	80007ec <__aeabi_ddiv>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002f42:	f7fd fb29 	bl	8000598 <__aeabi_dmul>
 8002f46:	f7fd fdc1 	bl	8000acc <__aeabi_d2f>
 8002f4a:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 8002f4e:	f8c4 a018 	str.w	sl, [r4, #24]
		val.temp =  19.48*in.temp*in.temp-20.09*in.temp+2.87;
 8002f52:	6a28      	ldr	r0, [r5, #32]
 8002f54:	f7fd facc 	bl	80004f0 <__aeabi_f2d>
 8002f58:	a347      	add	r3, pc, #284	; (adr r3, 8003078 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	4606      	mov	r6, r0
 8002f60:	460f      	mov	r7, r1
 8002f62:	f7fd fb19 	bl	8000598 <__aeabi_dmul>
 8002f66:	4632      	mov	r2, r6
 8002f68:	463b      	mov	r3, r7
 8002f6a:	f7fd fb15 	bl	8000598 <__aeabi_dmul>
 8002f6e:	a344      	add	r3, pc, #272	; (adr r3, 8003080 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	4680      	mov	r8, r0
 8002f76:	4689      	mov	r9, r1
 8002f78:	4630      	mov	r0, r6
 8002f7a:	4639      	mov	r1, r7
 8002f7c:	f7fd fb0c 	bl	8000598 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4640      	mov	r0, r8
 8002f86:	4649      	mov	r1, r9
 8002f88:	f7fd f952 	bl	8000230 <__aeabi_dsub>
 8002f8c:	a33e      	add	r3, pc, #248	; (adr r3, 8003088 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd f94f 	bl	8000234 <__adddf3>
 8002f96:	f7fd fd99 	bl	8000acc <__aeabi_d2f>
 8002f9a:	4681      	mov	r9, r0
 8002f9c:	6220      	str	r0, [r4, #32]
		val.pot = in.pot*100.0/3.3;
 8002f9e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fa0:	f7fd faa6 	bl	80004f0 <__aeabi_f2d>
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002fa8:	f7fd faf6 	bl	8000598 <__aeabi_dmul>
 8002fac:	a328      	add	r3, pc, #160	; (adr r3, 8003050 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fc1b 	bl	80007ec <__aeabi_ddiv>
 8002fb6:	f7fd fd89 	bl	8000acc <__aeabi_d2f>

		avg.current = (avg.current*199.0 + val.current)/200.0;
 8002fba:	4d41      	ldr	r5, [pc, #260]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x368>)
			val.current_sense0 = (val.current_sense0*199.0 +in.current_sense)/200.0;
		if(HAL_GetTick()>2000)
			state.init = false;
		val.current_sense = fabs( (in.current_sense-val.current_sense0)*100.0/20.0*31.0);
		val.temp =  19.48*in.temp*in.temp-20.09*in.temp+2.87;
		val.pot = in.pot*100.0/3.3;
 8002fbc:	4680      	mov	r8, r0
 8002fbe:	6260      	str	r0, [r4, #36]	; 0x24

		avg.current = (avg.current*199.0 + val.current)/200.0;
 8002fc0:	6928      	ldr	r0, [r5, #16]
 8002fc2:	f7fd fa95 	bl	80004f0 <__aeabi_f2d>
 8002fc6:	a32a      	add	r3, pc, #168	; (adr r3, 8003070 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd fae4 	bl	8000598 <__aeabi_dmul>
 8002fd0:	4606      	mov	r6, r0
 8002fd2:	6920      	ldr	r0, [r4, #16]
 8002fd4:	460f      	mov	r7, r1
 8002fd6:	f7fd fa8b 	bl	80004f0 <__aeabi_f2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4630      	mov	r0, r6
 8002fe0:	4639      	mov	r1, r7
 8002fe2:	f7fd f927 	bl	8000234 <__adddf3>
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002fea:	f7fd fbff 	bl	80007ec <__aeabi_ddiv>
 8002fee:	f7fd fd6d 	bl	8000acc <__aeabi_d2f>
 8002ff2:	6128      	str	r0, [r5, #16]
		avg.u_bat = (avg.u_bat*39.0 + val.u_bat)/40.0;
 8002ff4:	6968      	ldr	r0, [r5, #20]
 8002ff6:	f7fd fa7b 	bl	80004f0 <__aeabi_f2d>
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002ffe:	f7fd facb 	bl	8000598 <__aeabi_dmul>
 8003002:	4606      	mov	r6, r0
 8003004:	6960      	ldr	r0, [r4, #20]
 8003006:	460f      	mov	r7, r1
 8003008:	f7fd fa72 	bl	80004f0 <__aeabi_f2d>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4630      	mov	r0, r6
 8003012:	4639      	mov	r1, r7
 8003014:	f7fd f90e 	bl	8000234 <__adddf3>
 8003018:	2200      	movs	r2, #0
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800301c:	f7fd fbe6 	bl	80007ec <__aeabi_ddiv>
 8003020:	f7fd fd54 	bl	8000acc <__aeabi_d2f>
 8003024:	4604      	mov	r4, r0
 8003026:	6168      	str	r0, [r5, #20]
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
 8003028:	69a8      	ldr	r0, [r5, #24]
 800302a:	f7fd fa61 	bl	80004f0 <__aeabi_f2d>
 800302e:	2200      	movs	r2, #0
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003032:	f7fd fab1 	bl	8000598 <__aeabi_dmul>
 8003036:	4606      	mov	r6, r0
 8003038:	4650      	mov	r0, sl
 800303a:	460f      	mov	r7, r1
 800303c:	f7fd fa58 	bl	80004f0 <__aeabi_f2d>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4630      	mov	r0, r6
 8003046:	4639      	mov	r1, r7
 8003048:	f7fd f8f4 	bl	8000234 <__adddf3>
 800304c:	2200      	movs	r2, #0
 800304e:	e03d      	b.n	80030cc <HAL_TIM_PeriodElapsedCallback+0x374>
 8003050:	66666666 	.word	0x66666666
 8003054:	400a6666 	.word	0x400a6666
 8003058:	00000000 	.word	0x00000000
 800305c:	40affe00 	.word	0x40affe00
 8003060:	00000000 	.word	0x00000000
 8003064:	40dd4c00 	.word	0x40dd4c00
 8003068:	07f01fc0 	.word	0x07f01fc0
 800306c:	3fef01fc 	.word	0x3fef01fc
 8003070:	00000000 	.word	0x00000000
 8003074:	4068e000 	.word	0x4068e000
 8003078:	47ae147b 	.word	0x47ae147b
 800307c:	40337ae1 	.word	0x40337ae1
 8003080:	3d70a3d7 	.word	0x3d70a3d7
 8003084:	4034170a 	.word	0x4034170a
 8003088:	8f5c28f6 	.word	0x8f5c28f6
 800308c:	4006f5c2 	.word	0x4006f5c2
 8003090:	20000028 	.word	0x20000028
 8003094:	20000048 	.word	0x20000048
 8003098:	4089a000 	.word	0x4089a000
 800309c:	408f4000 	.word	0x408f4000
 80030a0:	200000e4 	.word	0x200000e4
 80030a4:	40390000 	.word	0x40390000
 80030a8:	40080000 	.word	0x40080000
 80030ac:	200000ac 	.word	0x200000ac
 80030b0:	40690000 	.word	0x40690000
 80030b4:	40590000 	.word	0x40590000
 80030b8:	40340000 	.word	0x40340000
 80030bc:	403f0000 	.word	0x403f0000
 80030c0:	20000190 	.word	0x20000190
 80030c4:	40438000 	.word	0x40438000
 80030c8:	40440000 	.word	0x40440000
 80030cc:	4b94      	ldr	r3, [pc, #592]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80030ce:	f7fd fb8d 	bl	80007ec <__aeabi_ddiv>
 80030d2:	f7fd fcfb 	bl	8000acc <__aeabi_d2f>
 80030d6:	61a8      	str	r0, [r5, #24]
 80030d8:	4682      	mov	sl, r0
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
 80030da:	6a28      	ldr	r0, [r5, #32]
 80030dc:	f7fd fa08 	bl	80004f0 <__aeabi_f2d>
 80030e0:	a381      	add	r3, pc, #516	; (adr r3, 80032e8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fa57 	bl	8000598 <__aeabi_dmul>
 80030ea:	4606      	mov	r6, r0
 80030ec:	4648      	mov	r0, r9
 80030ee:	460f      	mov	r7, r1
 80030f0:	f7fd f9fe 	bl	80004f0 <__aeabi_f2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4630      	mov	r0, r6
 80030fa:	4639      	mov	r1, r7
 80030fc:	f7fd f89a 	bl	8000234 <__adddf3>
 8003100:	2200      	movs	r2, #0
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003104:	f7fd fb72 	bl	80007ec <__aeabi_ddiv>
 8003108:	f7fd fce0 	bl	8000acc <__aeabi_d2f>
 800310c:	6228      	str	r0, [r5, #32]
 800310e:	4681      	mov	r9, r0
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
 8003110:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003112:	f7fd f9ed 	bl	80004f0 <__aeabi_f2d>
 8003116:	a374      	add	r3, pc, #464	; (adr r3, 80032e8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd fa3c 	bl	8000598 <__aeabi_dmul>
 8003120:	4606      	mov	r6, r0
 8003122:	4640      	mov	r0, r8
 8003124:	460f      	mov	r7, r1
 8003126:	f7fd f9e3 	bl	80004f0 <__aeabi_f2d>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4630      	mov	r0, r6
 8003130:	4639      	mov	r1, r7
 8003132:	f7fd f87f 	bl	8000234 <__adddf3>
 8003136:	2200      	movs	r2, #0
 8003138:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800313a:	f7fd fb57 	bl	80007ec <__aeabi_ddiv>
 800313e:	f7fd fcc5 	bl	8000acc <__aeabi_d2f>
 8003142:	6268      	str	r0, [r5, #36]	; 0x24
 8003144:	4680      	mov	r8, r0
		//
		state.charged = avg.u_bat>4.1*6;
 8003146:	4620      	mov	r0, r4
 8003148:	f7fd f9d2 	bl	80004f0 <__aeabi_f2d>
 800314c:	a368      	add	r3, pc, #416	; (adr r3, 80032f0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	f7fd fcb1 	bl	8000ab8 <__aeabi_dcmpgt>
 8003156:	f04f 0401 	mov.w	r4, #1
 800315a:	9501      	str	r5, [sp, #4]
 800315c:	b900      	cbnz	r0, 8003160 <HAL_TIM_PeriodElapsedCallback+0x408>
 800315e:	4604      	mov	r4, r0
 8003160:	4b71      	ldr	r3, [pc, #452]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
		state.startDVS = avg.pot>50;
 8003162:	4972      	ldr	r1, [pc, #456]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
		avg.u_bat = (avg.u_bat*39.0 + val.u_bat)/40.0;
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
 8003164:	709c      	strb	r4, [r3, #2]
		state.startDVS = avg.pot>50;
 8003166:	4640      	mov	r0, r8
 8003168:	f04f 0401 	mov.w	r4, #1
 800316c:	f7fd fe78 	bl	8000e60 <__aeabi_fcmpgt>
 8003170:	b900      	cbnz	r0, 8003174 <HAL_TIM_PeriodElapsedCallback+0x41c>
 8003172:	4604      	mov	r4, r0
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
		state.coolerEnabled = avg.temp>40.0;
 8003176:	496e      	ldr	r1, [pc, #440]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
		avg.current_sense = (avg.current_sense*39.0 + val.current_sense)/40.0;
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
 8003178:	705c      	strb	r4, [r3, #1]
		state.coolerEnabled = avg.temp>40.0;
 800317a:	4648      	mov	r0, r9
 800317c:	f04f 0401 	mov.w	r4, #1
 8003180:	f7fd fe6e 	bl	8000e60 <__aeabi_fcmpgt>
 8003184:	b900      	cbnz	r0, 8003188 <HAL_TIM_PeriodElapsedCallback+0x430>
 8003186:	4604      	mov	r4, r0
 8003188:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
		state.coolerRegulated = avg.temp>60.0;
 800318a:	496a      	ldr	r1, [pc, #424]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
		avg.temp = (avg.temp*199.0 + val.temp)/200.0;
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
		state.coolerEnabled = avg.temp>40.0;
 800318c:	70dc      	strb	r4, [r3, #3]
		state.coolerRegulated = avg.temp>60.0;
 800318e:	4648      	mov	r0, r9
 8003190:	f04f 0401 	mov.w	r4, #1
 8003194:	f7fd fe64 	bl	8000e60 <__aeabi_fcmpgt>
 8003198:	b900      	cbnz	r0, 800319c <HAL_TIM_PeriodElapsedCallback+0x444>
 800319a:	4604      	mov	r4, r0
 800319c:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
		state.generateing = avg.current_sense>5;
 800319e:	4966      	ldr	r1, [pc, #408]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
		avg.pot = (avg.pot*199.0 + val.pot)/200.0;
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
		state.coolerEnabled = avg.temp>40.0;
		state.coolerRegulated = avg.temp>60.0;
 80031a0:	711c      	strb	r4, [r3, #4]
		state.generateing = avg.current_sense>5;
 80031a2:	4650      	mov	r0, sl
 80031a4:	f04f 0401 	mov.w	r4, #1
 80031a8:	f7fd fe5a 	bl	8000e60 <__aeabi_fcmpgt>
 80031ac:	b900      	cbnz	r0, 80031b0 <HAL_TIM_PeriodElapsedCallback+0x458>
 80031ae:	4604      	mov	r4, r0
 80031b0:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
 80031b2:	495e      	ldr	r1, [pc, #376]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
		//
		state.charged = avg.u_bat>4.1*6;
		state.startDVS = avg.pot>50;
		state.coolerEnabled = avg.temp>40.0;
		state.coolerRegulated = avg.temp>60.0;
		state.generateing = avg.current_sense>5;
 80031b4:	715c      	strb	r4, [r3, #5]
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
 80031b6:	4640      	mov	r0, r8
 80031b8:	f7fd fe52 	bl	8000e60 <__aeabi_fcmpgt>
 80031bc:	4c5f      	ldr	r4, [pc, #380]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80031be:	b1c0      	cbz	r0, 80031f2 <HAL_TIM_PeriodElapsedCallback+0x49a>
			pwm.starter = (pwm.starter*299.0 +1400.0)/300.0;
 80031c0:	6860      	ldr	r0, [r4, #4]
 80031c2:	f7fd f995 	bl	80004f0 <__aeabi_f2d>
 80031c6:	a34c      	add	r3, pc, #304	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f7fd f9e4 	bl	8000598 <__aeabi_dmul>
 80031d0:	2200      	movs	r2, #0
 80031d2:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80031d4:	f7fd f82e 	bl	8000234 <__adddf3>
 80031d8:	a349      	add	r3, pc, #292	; (adr r3, 8003300 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd fb05 	bl	80007ec <__aeabi_ddiv>
 80031e2:	f7fd fc73 	bl	8000acc <__aeabi_d2f>
			if(state.generateing)
 80031e6:	4954      	ldr	r1, [pc, #336]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
		state.coolerRegulated = avg.temp>60.0;
		state.generateing = avg.current_sense>5;
		//PWM regulation
		//starter
		if(state.startDVS ){//&& tmp<1000)
			pwm.starter = (pwm.starter*299.0 +1400.0)/300.0;
 80031e8:	6060      	str	r0, [r4, #4]
			if(state.generateing)
 80031ea:	4650      	mov	r0, sl
 80031ec:	f7fd fe38 	bl	8000e60 <__aeabi_fcmpgt>
 80031f0:	b108      	cbz	r0, 80031f6 <HAL_TIM_PeriodElapsedCallback+0x49e>
				pwm.starter = 1000;
 80031f2:	4b54      	ldr	r3, [pc, #336]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80031f4:	6063      	str	r3, [r4, #4]
		}else
			pwm.starter = 1000;
		//throttle
		ice.delta = ice.target - avg.current_sense;
 80031f6:	4d54      	ldr	r5, [pc, #336]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80031f8:	4651      	mov	r1, sl
 80031fa:	6828      	ldr	r0, [r5, #0]
 80031fc:	f7fd fcba 	bl	8000b74 <__aeabi_fsub>
 8003200:	4683      	mov	fp, r0
 8003202:	6068      	str	r0, [r5, #4]
		ice.smooth_delta = (ice.smooth_delta*99.0 +ice.delta)/100.0;
 8003204:	68e8      	ldr	r0, [r5, #12]
 8003206:	f7fd f973 	bl	80004f0 <__aeabi_f2d>
 800320a:	a33f      	add	r3, pc, #252	; (adr r3, 8003308 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd f9c2 	bl	8000598 <__aeabi_dmul>
 8003214:	4606      	mov	r6, r0
 8003216:	4658      	mov	r0, fp
 8003218:	460f      	mov	r7, r1
 800321a:	f7fd f969 	bl	80004f0 <__aeabi_f2d>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4630      	mov	r0, r6
 8003224:	4639      	mov	r1, r7
 8003226:	f7fd f805 	bl	8000234 <__adddf3>
 800322a:	2200      	movs	r2, #0
 800322c:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800322e:	f7fd fadd 	bl	80007ec <__aeabi_ddiv>
 8003232:	f7fd fc4b 	bl	8000acc <__aeabi_d2f>
 8003236:	4683      	mov	fp, r0
 8003238:	60e8      	str	r0, [r5, #12]
		ice.int_delta += ice.smooth_delta*0.002;
 800323a:	68a8      	ldr	r0, [r5, #8]
 800323c:	f7fd f958 	bl	80004f0 <__aeabi_f2d>
 8003240:	4606      	mov	r6, r0
 8003242:	4658      	mov	r0, fp
 8003244:	460f      	mov	r7, r1
 8003246:	f7fd f953 	bl	80004f0 <__aeabi_f2d>
 800324a:	a331      	add	r3, pc, #196	; (adr r3, 8003310 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd f9a2 	bl	8000598 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4630      	mov	r0, r6
 800325a:	4639      	mov	r1, r7
 800325c:	f7fc ffea 	bl	8000234 <__adddf3>
 8003260:	f7fd fc34 	bl	8000acc <__aeabi_d2f>


		if(state.startDVS){
 8003264:	4931      	ldr	r1, [pc, #196]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
		}else
			pwm.starter = 1000;
		//throttle
		ice.delta = ice.target - avg.current_sense;
		ice.smooth_delta = (ice.smooth_delta*99.0 +ice.delta)/100.0;
		ice.int_delta += ice.smooth_delta*0.002;
 8003266:	4606      	mov	r6, r0
 8003268:	60a8      	str	r0, [r5, #8]


		if(state.startDVS){
 800326a:	4640      	mov	r0, r8
 800326c:	f7fd fdf8 	bl	8000e60 <__aeabi_fcmpgt>
 8003270:	b198      	cbz	r0, 800329a <HAL_TIM_PeriodElapsedCallback+0x542>
			pwm.throttle = HOLOSTOI;
 8003272:	4f37      	ldr	r7, [pc, #220]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
			if(state.generateing){//zavelsa
 8003274:	4930      	ldr	r1, [pc, #192]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
		ice.smooth_delta = (ice.smooth_delta*99.0 +ice.delta)/100.0;
		ice.int_delta += ice.smooth_delta*0.002;


		if(state.startDVS){
			pwm.throttle = HOLOSTOI;
 8003276:	60a7      	str	r7, [r4, #8]
			if(state.generateing){//zavelsa
 8003278:	4650      	mov	r0, sl
 800327a:	f7fd fdf1 	bl	8000e60 <__aeabi_fcmpgt>
 800327e:	b140      	cbz	r0, 8003292 <HAL_TIM_PeriodElapsedCallback+0x53a>
				ice.target = 40.0;
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
				pwm.throttle = (HOLOSTOI+ice.int_delta);//1750*PCA0_MKS;
 8003282:	4639      	mov	r1, r7


		if(state.startDVS){
			pwm.throttle = HOLOSTOI;
			if(state.generateing){//zavelsa
				ice.target = 40.0;
 8003284:	602b      	str	r3, [r5, #0]
				pwm.throttle = (HOLOSTOI+ice.int_delta);//1750*PCA0_MKS;
 8003286:	4630      	mov	r0, r6
 8003288:	f7fd fc76 	bl	8000b78 <__addsf3>
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800328e:	6098      	str	r0, [r3, #8]
 8003290:	e005      	b.n	800329e <HAL_TIM_PeriodElapsedCallback+0x546>
			}else{
				ice.int_delta = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	60ab      	str	r3, [r5, #8]
				ice.target=0;
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	e001      	b.n	800329e <HAL_TIM_PeriodElapsedCallback+0x546>
			}
		}else{
			pwm.throttle = MIN_Z;//1200*PCA0_MKS;//;1200*PCA0_MKS;//0//1320
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800329c:	60a3      	str	r3, [r4, #8]
		}
		//cooler routine
				if(state.coolerEnabled && HAL_GetTick()>=COOLER_DELAY*1000){
 800329e:	4924      	ldr	r1, [pc, #144]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80032a0:	4648      	mov	r0, r9
 80032a2:	f7fd fddd 	bl	8000e60 <__aeabi_fcmpgt>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d056      	beq.n	8003358 <HAL_TIM_PeriodElapsedCallback+0x600>
 80032aa:	f7fd fe7f 	bl	8000fac <HAL_GetTick>
 80032ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80032b2:	4298      	cmp	r0, r3
 80032b4:	d950      	bls.n	8003358 <HAL_TIM_PeriodElapsedCallback+0x600>
					pwm.cooler = (pwm.cooler*299.0 +COOLER_PWM_DUTY)/300.0;
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	f7fd f91a 	bl	80004f0 <__aeabi_f2d>
 80032bc:	a30e      	add	r3, pc, #56	; (adr r3, 80032f8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	f7fd f969 	bl	8000598 <__aeabi_dmul>
 80032c6:	a314      	add	r3, pc, #80	; (adr r3, 8003318 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fc ffb2 	bl	8000234 <__adddf3>
 80032d0:	a30b      	add	r3, pc, #44	; (adr r3, 8003300 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd fa89 	bl	80007ec <__aeabi_ddiv>
 80032da:	f7fd fbf7 	bl	8000acc <__aeabi_d2f>
 80032de:	6020      	str	r0, [r4, #0]
 80032e0:	e03c      	b.n	800335c <HAL_TIM_PeriodElapsedCallback+0x604>
 80032e2:	bf00      	nop
 80032e4:	f3af 8000 	nop.w
 80032e8:	00000000 	.word	0x00000000
 80032ec:	4068e000 	.word	0x4068e000
 80032f0:	99999999 	.word	0x99999999
 80032f4:	40389999 	.word	0x40389999
 80032f8:	00000000 	.word	0x00000000
 80032fc:	4072b000 	.word	0x4072b000
 8003300:	00000000 	.word	0x00000000
 8003304:	4072c000 	.word	0x4072c000
 8003308:	00000000 	.word	0x00000000
 800330c:	4058c000 	.word	0x4058c000
 8003310:	d2f1a9fc 	.word	0xd2f1a9fc
 8003314:	3f60624d 	.word	0x3f60624d
 8003318:	00000000 	.word	0x00000000
 800331c:	40913000 	.word	0x40913000
 8003320:	40440000 	.word	0x40440000
 8003324:	40690000 	.word	0x40690000
 8003328:	200000ac 	.word	0x200000ac
 800332c:	42480000 	.word	0x42480000
 8003330:	42200000 	.word	0x42200000
 8003334:	42700000 	.word	0x42700000
 8003338:	40a00000 	.word	0x40a00000
 800333c:	20000144 	.word	0x20000144
 8003340:	4095e000 	.word	0x4095e000
 8003344:	447a0000 	.word	0x447a0000
 8003348:	200001b8 	.word	0x200001b8
 800334c:	40590000 	.word	0x40590000
 8003350:	44898000 	.word	0x44898000
 8003354:	44660000 	.word	0x44660000
				}else{
					pwm.cooler = COOLER_PWM_OFF;//cooler
 8003358:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 800335a:	6023      	str	r3, [r4, #0]
				}
				if(state.coolerRegulated && HAL_GetTick()>=COOLER_DELAY*1000){
 800335c:	9b00      	ldr	r3, [sp, #0]
 800335e:	791b      	ldrb	r3, [r3, #4]
 8003360:	b373      	cbz	r3, 80033c0 <HAL_TIM_PeriodElapsedCallback+0x668>
 8003362:	f7fd fe23 	bl	8000fac <HAL_GetTick>
 8003366:	f242 730f 	movw	r3, #9999	; 0x270f
 800336a:	4298      	cmp	r0, r3
 800336c:	d928      	bls.n	80033c0 <HAL_TIM_PeriodElapsedCallback+0x668>
					pwm.cooler = (pwm.cooler*299.0 +(COOLER_PWM_DUTY+(avg.temp-60.0)*COOLER_PWM_K))/300.0;
 800336e:	9b01      	ldr	r3, [sp, #4]
 8003370:	6a18      	ldr	r0, [r3, #32]
 8003372:	f7fd f8bd 	bl	80004f0 <__aeabi_f2d>
 8003376:	2200      	movs	r2, #0
 8003378:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 800337a:	f7fc ff59 	bl	8000230 <__aeabi_dsub>
 800337e:	2200      	movs	r2, #0
 8003380:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003382:	f7fd f909 	bl	8000598 <__aeabi_dmul>
 8003386:	a32c      	add	r3, pc, #176	; (adr r3, 8003438 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f7fc ff52 	bl	8000234 <__adddf3>
 8003390:	4606      	mov	r6, r0
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	460f      	mov	r7, r1
 8003396:	f7fd f8ab 	bl	80004f0 <__aeabi_f2d>
 800339a:	a329      	add	r3, pc, #164	; (adr r3, 8003440 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fd f8fa 	bl	8000598 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4630      	mov	r0, r6
 80033aa:	4639      	mov	r1, r7
 80033ac:	f7fc ff42 	bl	8000234 <__adddf3>
 80033b0:	a325      	add	r3, pc, #148	; (adr r3, 8003448 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fd fa19 	bl	80007ec <__aeabi_ddiv>
 80033ba:	f7fd fb87 	bl	8000acc <__aeabi_d2f>
 80033be:	6020      	str	r0, [r4, #0]
				}
				if(pwm.cooler>COOLER_PWM_MAX)
 80033c0:	4d26      	ldr	r5, [pc, #152]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x704>)
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	4629      	mov	r1, r5
 80033c6:	f7fd fd4b 	bl	8000e60 <__aeabi_fcmpgt>
 80033ca:	b108      	cbz	r0, 80033d0 <HAL_TIM_PeriodElapsedCallback+0x678>
					pwm.cooler = COOLER_PWM_MAX;
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x708>)
 80033ce:	601d      	str	r5, [r3, #0]
		//pwm control
		TIM3->CCR4 = pwm.cooler;
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	f7fd fd4f 	bl	8000e74 <__aeabi_f2uiz>
 80033d6:	4d23      	ldr	r5, [pc, #140]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80033d8:	6428      	str	r0, [r5, #64]	; 0x40
		TIM3->CCR3 = pwm.throttle;
 80033da:	68a0      	ldr	r0, [r4, #8]
 80033dc:	f7fd fd4a 	bl	8000e74 <__aeabi_f2uiz>
 80033e0:	63e8      	str	r0, [r5, #60]	; 0x3c
		TIM3->CCR2 = pwm.starter;
 80033e2:	6860      	ldr	r0, [r4, #4]
 80033e4:	f7fd fd46 	bl	8000e74 <__aeabi_f2uiz>
		//LED control
		if(state.startDVS)
 80033e8:	9b00      	ldr	r3, [sp, #0]
				if(pwm.cooler>COOLER_PWM_MAX)
					pwm.cooler = COOLER_PWM_MAX;
		//pwm control
		TIM3->CCR4 = pwm.cooler;
		TIM3->CCR3 = pwm.throttle;
		TIM3->CCR2 = pwm.starter;
 80033ea:	63a8      	str	r0, [r5, #56]	; 0x38
		//LED control
		if(state.startDVS)
 80033ec:	785d      	ldrb	r5, [r3, #1]
 80033ee:	4c1e      	ldr	r4, [pc, #120]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80033f0:	b12d      	cbz	r5, 80033fe <HAL_TIM_PeriodElapsedCallback+0x6a6>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80033f2:	2201      	movs	r2, #1
 80033f4:	2140      	movs	r1, #64	; 0x40
 80033f6:	481d      	ldr	r0, [pc, #116]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x714>)
 80033f8:	f7fe fc14 	bl	8001c24 <HAL_GPIO_WritePin>
 80033fc:	e008      	b.n	8003410 <HAL_TIM_PeriodElapsedCallback+0x6b8>
		else if(time>500){
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003404:	d904      	bls.n	8003410 <HAL_TIM_PeriodElapsedCallback+0x6b8>
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8003406:	2140      	movs	r1, #64	; 0x40
 8003408:	4818      	ldr	r0, [pc, #96]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x714>)
 800340a:	f7fe fc0f 	bl	8001c2c <HAL_GPIO_TogglePin>
			time=0;
 800340e:	6025      	str	r5, [r4, #0]
		}
		if(state.coolerEnabled && time>50){
 8003410:	9b00      	ldr	r3, [sp, #0]
 8003412:	78db      	ldrb	r3, [r3, #3]
 8003414:	b14b      	cbz	r3, 800342a <HAL_TIM_PeriodElapsedCallback+0x6d2>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	2b32      	cmp	r3, #50	; 0x32
 800341a:	d906      	bls.n	800342a <HAL_TIM_PeriodElapsedCallback+0x6d2>
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800341c:	2140      	movs	r1, #64	; 0x40
 800341e:	4813      	ldr	r0, [pc, #76]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003420:	f7fe fc04 	bl	8001c2c <HAL_GPIO_TogglePin>
			time=0;
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
		}
		time++;
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	6023      	str	r3, [r4, #0]
	}

}
 8003430:	b003      	add	sp, #12
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	00000000 	.word	0x00000000
 800343c:	40913000 	.word	0x40913000
 8003440:	00000000 	.word	0x00000000
 8003444:	4072b000 	.word	0x4072b000
 8003448:	00000000 	.word	0x00000000
 800344c:	4072c000 	.word	0x4072c000
 8003450:	44480000 	.word	0x44480000
 8003454:	404e0000 	.word	0x404e0000
 8003458:	40140000 	.word	0x40140000
 800345c:	44e10000 	.word	0x44e10000
 8003460:	20000144 	.word	0x20000144
 8003464:	40000400 	.word	0x40000400
 8003468:	20000024 	.word	0x20000024
 800346c:	40011000 	.word	0x40011000

08003470 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003470:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003476:	b09d      	sub	sp, #116	; 0x74
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003478:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800347a:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800347c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003480:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003482:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003484:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003488:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800348a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800348c:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800348e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003490:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003492:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8003494:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003496:	f7fe fbcd 	bl	8001c34 <HAL_RCC_OscConfig>
 800349a:	b100      	cbz	r0, 800349e <SystemClock_Config+0x2e>
 800349c:	e7fe      	b.n	800349c <SystemClock_Config+0x2c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800349e:	230f      	movs	r3, #15
 80034a0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034a2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034a8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034aa:	4629      	mov	r1, r5
 80034ac:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ae:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034b2:	f7fe ff41 	bl	8002338 <HAL_RCC_ClockConfig>
 80034b6:	b100      	cbz	r0, 80034ba <SystemClock_Config+0x4a>
 80034b8:	e7fe      	b.n	80034b8 <SystemClock_Config+0x48>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80034ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034be:	a806      	add	r0, sp, #24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034c0:	9506      	str	r5, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80034c2:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c4:	f7fe fff0 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 80034c8:	4605      	mov	r5, r0
 80034ca:	b100      	cbz	r0, 80034ce <SystemClock_Config+0x5e>
 80034cc:	e7fe      	b.n	80034cc <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80034ce:	f7fe ffe5 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80034da:	f7fe f847 	bl	800156c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80034de:	2004      	movs	r0, #4
 80034e0:	f7fe f85a 	bl	8001598 <HAL_SYSTICK_CLKSourceConfig>
 80034e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034e8:	fa93 f3a3 	rbit	r3, r3

    /**Configure the Systick interrupt time 
    */
  __HAL_RCC_PLLI2S_ENABLE();
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80034f6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80034fa:	601c      	str	r4, [r3, #0]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034fc:	462a      	mov	r2, r5
 80034fe:	4629      	mov	r1, r5
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7fd fff2 	bl	80014ec <HAL_NVIC_SetPriority>
}
 8003508:	b01d      	add	sp, #116	; 0x74
 800350a:	bd30      	pop	{r4, r5, pc}

0800350c <main>:

}
/* USER CODE END 0 */

int main(void)
{
 800350c:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800350e:	4c98      	ldr	r4, [pc, #608]	; (8003770 <main+0x264>)

}
/* USER CODE END 0 */

int main(void)
{
 8003510:	b092      	sub	sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003512:	f7fd fd31 	bl	8000f78 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003516:	f7ff ffab 	bl	8003470 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800351a:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800351c:	2201      	movs	r2, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800351e:	f043 0320 	orr.w	r3, r3, #32
 8003522:	61a3      	str	r3, [r4, #24]
 8003524:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003526:	2140      	movs	r1, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003530:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003532:	4890      	ldr	r0, [pc, #576]	; (8003774 <main+0x268>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003534:	f043 0310 	orr.w	r3, r3, #16
 8003538:	61a3      	str	r3, [r4, #24]
 800353a:	69a3      	ldr	r3, [r4, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353c:	2701      	movs	r7, #1

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	9302      	str	r3, [sp, #8]
 8003544:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003548:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	61a3      	str	r3, [r4, #24]
 8003550:	69a3      	ldr	r3, [r4, #24]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	69a3      	ldr	r3, [r4, #24]
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	61a3      	str	r3, [r4, #24]
 8003562:	69a3      	ldr	r3, [r4, #24]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	9304      	str	r3, [sp, #16]
 800356a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800356c:	f7fe fb5a 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003576:	4880      	ldr	r0, [pc, #512]	; (8003778 <main+0x26c>)
 8003578:	f7fe fb54 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 800357c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800357e:	a90b      	add	r1, sp, #44	; 0x2c
 8003580:	487c      	ldr	r0, [pc, #496]	; (8003774 <main+0x268>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8003582:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003584:	950e      	str	r5, [sp, #56]	; 0x38
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003586:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8003588:	f7fe fa74 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 800358c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003590:	a90b      	add	r1, sp, #44	; 0x2c
 8003592:	4879      	ldr	r0, [pc, #484]	; (8003778 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 8003594:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003596:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003598:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359a:	f7fe fa6b 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800359e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a0:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035a2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a4:	a90b      	add	r1, sp, #44	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035a6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a8:	4874      	ldr	r0, [pc, #464]	; (800377c <main+0x270>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035aa:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	f7fe fa61 	bl	8001a74 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035b2:	6963      	ldr	r3, [r4, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035b4:	4629      	mov	r1, r5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035b6:	433b      	orrs	r3, r7
 80035b8:	6163      	str	r3, [r4, #20]
 80035ba:	6963      	ldr	r3, [r4, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035bc:	462a      	mov	r2, r5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035be:	403b      	ands	r3, r7
 80035c0:	9300      	str	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035c2:	200b      	movs	r0, #11
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035c4:	9b00      	ldr	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035c6:	f7fd ff91 	bl	80014ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035ca:	200b      	movs	r0, #11
 80035cc:	f7fd ffc2 	bl	8001554 <HAL_NVIC_EnableIRQ>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80035d0:	4c6b      	ldr	r4, [pc, #428]	; (8003780 <main+0x274>)
  htim3.Init.Prescaler = 71;
 80035d2:	496c      	ldr	r1, [pc, #432]	; (8003784 <main+0x278>)
 80035d4:	2347      	movs	r3, #71	; 0x47
 80035d6:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2790;
 80035da:	f640 23e6 	movw	r3, #2790	; 0xae6
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035de:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e0:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 2790;
 80035e2:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e4:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035e6:	f7ff fa65 	bl	8002ab4 <HAL_TIM_Base_Init>
 80035ea:	b100      	cbz	r0, 80035ee <main+0xe2>
 80035ec:	e7fe      	b.n	80035ec <main+0xe0>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ee:	ad12      	add	r5, sp, #72	; 0x48
 80035f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f4:	f845 3d2c 	str.w	r3, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035f8:	4629      	mov	r1, r5
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff f8bd 	bl	800277a <HAL_TIM_ConfigClockSource>
 8003600:	b100      	cbz	r0, 8003604 <main+0xf8>
 8003602:	e7fe      	b.n	8003602 <main+0xf6>
  {
    Error_Handler();
  }

  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003604:	4620      	mov	r0, r4
 8003606:	f7ff fa6f 	bl	8002ae8 <HAL_TIM_OC_Init>
 800360a:	b100      	cbz	r0, 800360e <main+0x102>
 800360c:	e7fe      	b.n	800360c <main+0x100>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800360e:	4620      	mov	r0, r4
 8003610:	f7ff fa84 	bl	8002b1c <HAL_TIM_PWM_Init>
 8003614:	b100      	cbz	r0, 8003618 <main+0x10c>
 8003616:	e7fe      	b.n	8003616 <main+0x10a>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003618:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361a:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800361c:	a905      	add	r1, sp, #20
 800361e:	4620      	mov	r0, r4
 8003620:	f7ff fb76 	bl	8002d10 <HAL_TIMEx_MasterConfigSynchronization>
 8003624:	4602      	mov	r2, r0
 8003626:	b100      	cbz	r0, 800362a <main+0x11e>
 8003628:	e7fe      	b.n	8003628 <main+0x11c>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800362a:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 800362c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003630:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003632:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003634:	a90b      	add	r1, sp, #44	; 0x2c
 8003636:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 1000;
 8003638:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800363a:	f7ff fab5 	bl	8002ba8 <HAL_TIM_OC_ConfigChannel>
 800363e:	b100      	cbz	r0, 8003642 <main+0x136>
 8003640:	e7fe      	b.n	8003640 <main+0x134>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003642:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003644:	2204      	movs	r2, #4
 8003646:	a90b      	add	r1, sp, #44	; 0x2c
 8003648:	4620      	mov	r0, r4
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800364a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800364c:	f7ff fada 	bl	8002c04 <HAL_TIM_PWM_ConfigChannel>
 8003650:	b100      	cbz	r0, 8003654 <main+0x148>
 8003652:	e7fe      	b.n	8003652 <main+0x146>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003654:	2208      	movs	r2, #8
 8003656:	a90b      	add	r1, sp, #44	; 0x2c
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff fad3 	bl	8002c04 <HAL_TIM_PWM_ConfigChannel>
 800365e:	b100      	cbz	r0, 8003662 <main+0x156>
 8003660:	e7fe      	b.n	8003660 <main+0x154>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003662:	220c      	movs	r2, #12
 8003664:	a90b      	add	r1, sp, #44	; 0x2c
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff facc 	bl	8002c04 <HAL_TIM_PWM_ConfigChannel>
 800366c:	4606      	mov	r6, r0
 800366e:	b100      	cbz	r0, 8003672 <main+0x166>
 8003670:	e7fe      	b.n	8003670 <main+0x164>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);
 8003672:	4620      	mov	r0, r4
 8003674:	f000 f976 	bl	8003964 <HAL_TIM_MspPostInit>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8003678:	4843      	ldr	r0, [pc, #268]	; (8003788 <main+0x27c>)
 800367a:	4b44      	ldr	r3, [pc, #272]	; (800378c <main+0x280>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 800367c:	60c7      	str	r7, [r0, #12]

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800367e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003684:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003686:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800368a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 8;
 800368c:	2308      	movs	r3, #8
    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800368e:	6146      	str	r6, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003690:	6046      	str	r6, [r0, #4]
  hadc1.Init.NbrOfConversion = 8;
 8003692:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003694:	f7fd fe84 	bl	80013a0 <HAL_ADC_Init>
 8003698:	b100      	cbz	r0, 800369c <main+0x190>
 800369a:	e7fe      	b.n	800369a <main+0x18e>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 800369c:	230c      	movs	r3, #12
 800369e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 1;
 80036a0:	2301      	movs	r3, #1
 80036a2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036a4:	a90b      	add	r1, sp, #44	; 0x2c

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036a6:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036a8:	4837      	ldr	r0, [pc, #220]	; (8003788 <main+0x27c>)

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036aa:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036ac:	f7fd fcce 	bl	800104c <HAL_ADC_ConfigChannel>
 80036b0:	b100      	cbz	r0, 80036b4 <main+0x1a8>
 80036b2:	e7fe      	b.n	80036b2 <main+0x1a6>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
 80036b4:	230d      	movs	r3, #13
 80036b6:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036b8:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 2;
 80036ba:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036bc:	4832      	ldr	r0, [pc, #200]	; (8003788 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 2;
 80036be:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036c0:	f7fd fcc4 	bl	800104c <HAL_ADC_ConfigChannel>
 80036c4:	b100      	cbz	r0, 80036c8 <main+0x1bc>
 80036c6:	e7fe      	b.n	80036c6 <main+0x1ba>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
 80036c8:	230e      	movs	r3, #14
 80036ca:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036cc:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
  sConfig.Rank = 3;
 80036ce:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036d0:	482d      	ldr	r0, [pc, #180]	; (8003788 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_14;
  sConfig.Rank = 3;
 80036d2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036d4:	f7fd fcba 	bl	800104c <HAL_ADC_ConfigChannel>
 80036d8:	b100      	cbz	r0, 80036dc <main+0x1d0>
 80036da:	e7fe      	b.n	80036da <main+0x1ce>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
 80036dc:	230f      	movs	r3, #15
 80036de:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036e0:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 4;
 80036e2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036e4:	4828      	ldr	r0, [pc, #160]	; (8003788 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 4;
 80036e6:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036e8:	f7fd fcb0 	bl	800104c <HAL_ADC_ConfigChannel>
 80036ec:	b100      	cbz	r0, 80036f0 <main+0x1e4>
 80036ee:	e7fe      	b.n	80036ee <main+0x1e2>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80036f0:	2406      	movs	r4, #6
  sConfig.Rank = 5;
 80036f2:	2605      	movs	r6, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036f4:	a90b      	add	r1, sp, #44	; 0x2c
 80036f6:	4824      	ldr	r0, [pc, #144]	; (8003788 <main+0x27c>)
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80036f8:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfig.Rank = 5;
 80036fa:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036fc:	f7fd fca6 	bl	800104c <HAL_ADC_ConfigChannel>
 8003700:	b100      	cbz	r0, 8003704 <main+0x1f8>
 8003702:	e7fe      	b.n	8003702 <main+0x1f6>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = 6;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003704:	a90b      	add	r1, sp, #44	; 0x2c
 8003706:	4820      	ldr	r0, [pc, #128]	; (8003788 <main+0x27c>)
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8003708:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = 6;
 800370a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800370c:	f7fd fc9e 	bl	800104c <HAL_ADC_ConfigChannel>
 8003710:	b100      	cbz	r0, 8003714 <main+0x208>
 8003712:	e7fe      	b.n	8003712 <main+0x206>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 8003714:	230b      	movs	r3, #11
 8003716:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 7;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003718:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = 7;
 800371a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800371c:	481a      	ldr	r0, [pc, #104]	; (8003788 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = 7;
 800371e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003720:	f7fd fc94 	bl	800104c <HAL_ADC_ConfigChannel>
 8003724:	b100      	cbz	r0, 8003728 <main+0x21c>
 8003726:	e7fe      	b.n	8003726 <main+0x21a>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8003728:	230a      	movs	r3, #10
 800372a:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 8;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800372c:	a90b      	add	r1, sp, #44	; 0x2c
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 8;
 800372e:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003730:	4815      	ldr	r0, [pc, #84]	; (8003788 <main+0x27c>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 8;
 8003732:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003734:	f7fd fc8a 	bl	800104c <HAL_ADC_ConfigChannel>
 8003738:	b100      	cbz	r0, 800373c <main+0x230>
 800373a:	e7fe      	b.n	800373a <main+0x22e>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800373c:	4c14      	ldr	r4, [pc, #80]	; (8003790 <main+0x284>)
  htim2.Init.Prescaler = 72;
 800373e:	2348      	movs	r3, #72	; 0x48
 8003740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003744:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 1000;
 800374a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800374e:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003750:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 72;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 8003752:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003754:	f7ff f9ae 	bl	8002ab4 <HAL_TIM_Base_Init>
 8003758:	b100      	cbz	r0, 800375c <main+0x250>
 800375a:	e7fe      	b.n	800375a <main+0x24e>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800375c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003760:	a90b      	add	r1, sp, #44	; 0x2c
 8003762:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003764:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003766:	f7ff f808 	bl	800277a <HAL_TIM_ConfigClockSource>
 800376a:	b198      	cbz	r0, 8003794 <main+0x288>
 800376c:	e7fe      	b.n	800376c <main+0x260>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40011000 	.word	0x40011000
 8003778:	40010800 	.word	0x40010800
 800377c:	40010c00 	.word	0x40010c00
 8003780:	20000070 	.word	0x20000070
 8003784:	40000400 	.word	0x40000400
 8003788:	200000b4 	.word	0x200000b4
 800378c:	40012400 	.word	0x40012400
 8003790:	20000154 	.word	0x20000154
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003794:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003796:	4629      	mov	r1, r5
 8003798:	480f      	ldr	r0, [pc, #60]	; (80037d8 <main+0x2cc>)
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800379a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379c:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800379e:	f7ff fab7 	bl	8002d10 <HAL_TIMEx_MasterConfigSynchronization>
 80037a2:	b100      	cbz	r0, 80037a6 <main+0x29a>
 80037a4:	e7fe      	b.n	80037a4 <main+0x298>
  MX_TIM3_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();

  /* USER CODE BEGIN 2 */
  state.init = true;
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <main+0x2d0>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1,&ADC,8);
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <main+0x2d4>)
 80037ae:	2208      	movs	r2, #8
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <main+0x2d8>)
 80037b2:	f7fd fd43 	bl	800123c <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80037b6:	2104      	movs	r1, #4
 80037b8:	480b      	ldr	r0, [pc, #44]	; (80037e8 <main+0x2dc>)
 80037ba:	f7ff fa93 	bl	8002ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80037be:	2108      	movs	r1, #8
 80037c0:	4809      	ldr	r0, [pc, #36]	; (80037e8 <main+0x2dc>)
 80037c2:	f7ff fa8f 	bl	8002ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80037c6:	210c      	movs	r1, #12
 80037c8:	4807      	ldr	r0, [pc, #28]	; (80037e8 <main+0x2dc>)
 80037ca:	f7ff fa8b 	bl	8002ce4 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80037ce:	4802      	ldr	r0, [pc, #8]	; (80037d8 <main+0x2cc>)
 80037d0:	f7fe ffc6 	bl	8002760 <HAL_TIM_Base_Start_IT>
 80037d4:	e7fe      	b.n	80037d4 <main+0x2c8>
 80037d6:	bf00      	nop
 80037d8:	20000154 	.word	0x20000154
 80037dc:	200000ac 	.word	0x200000ac
 80037e0:	20000028 	.word	0x20000028
 80037e4:	200000b4 	.word	0x200000b4
 80037e8:	20000070 	.word	0x20000070

080037ec <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80037ec:	e7fe      	b.n	80037ec <Error_Handler>
	...

080037f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f2:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037f4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f6:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	619a      	str	r2, [r3, #24]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003808:	f7fd fe5e 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	4611      	mov	r1, r2
 8003810:	f06f 000b 	mvn.w	r0, #11
 8003814:	f7fd fe6a 	bl	80014ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003818:	2200      	movs	r2, #0
 800381a:	4611      	mov	r1, r2
 800381c:	f06f 000a 	mvn.w	r0, #10
 8003820:	f7fd fe64 	bl	80014ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003824:	2200      	movs	r2, #0
 8003826:	4611      	mov	r1, r2
 8003828:	f06f 0009 	mvn.w	r0, #9
 800382c:	f7fd fe5e 	bl	80014ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003830:	2200      	movs	r2, #0
 8003832:	4611      	mov	r1, r2
 8003834:	f06f 0004 	mvn.w	r0, #4
 8003838:	f7fd fe58 	bl	80014ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	4611      	mov	r1, r2
 8003840:	f06f 0003 	mvn.w	r0, #3
 8003844:	f7fd fe52 	bl	80014ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003848:	2200      	movs	r2, #0
 800384a:	4611      	mov	r1, r2
 800384c:	f06f 0001 	mvn.w	r0, #1
 8003850:	f7fd fe4c 	bl	80014ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	4611      	mov	r1, r2
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f7fd fe46 	bl	80014ec <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003860:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_MspInit+0x88>)
 8003862:	6853      	ldr	r3, [r2, #4]
 8003864:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800386e:	b003      	add	sp, #12
 8003870:	f85d fb04 	ldr.w	pc, [sp], #4
 8003874:	40021000 	.word	0x40021000
 8003878:	40010000 	.word	0x40010000

0800387c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800387c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800387e:	6802      	ldr	r2, [r0, #0]
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_ADC_MspInit+0x78>)

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003882:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003884:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003886:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003888:	d132      	bne.n	80038f0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800388a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800388e:	699a      	ldr	r2, [r3, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003890:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003896:	619a      	str	r2, [r3, #24]
 8003898:	699b      	ldr	r3, [r3, #24]
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389a:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800389c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	9b01      	ldr	r3, [sp, #4]
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a4:	4814      	ldr	r0, [pc, #80]	; (80038f8 <HAL_ADC_MspInit+0x7c>)
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
 80038a6:	233f      	movs	r3, #63	; 0x3f
 80038a8:	9302      	str	r3, [sp, #8]
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038aa:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ac:	f7fe f8e2 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
 80038b0:	2370      	movs	r3, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b4:	4811      	ldr	r0, [pc, #68]	; (80038fc <HAL_ADC_MspInit+0x80>)

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80038b6:	4c12      	ldr	r4, [pc, #72]	; (8003900 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Pin|A1_Pin|A2_Pin 
                          |A3_Pin|A4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = SENSE_CENTER_Pin|CURRENT_SENSE_Pin|U_BAT_SENSE_Pin;
 80038ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038bc:	f7fe f8da 	bl	8001a74 <HAL_GPIO_Init>
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038c0:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038c4:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ca:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80038d0:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038d2:	6162      	str	r2, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038d4:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038d6:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038d8:	4620      	mov	r0, r4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038da:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038dc:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038de:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038e0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038e2:	f7fd fe6a 	bl	80015ba <HAL_DMA_Init>
 80038e6:	b108      	cbz	r0, 80038ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80038e8:	f7ff ff80 	bl	80037ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038ec:	622c      	str	r4, [r5, #32]
 80038ee:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038f0:	b007      	add	sp, #28
 80038f2:	bd30      	pop	{r4, r5, pc}
 80038f4:	40012400 	.word	0x40012400
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40010800 	.word	0x40010800
 8003900:	2000010c 	.word	0x2000010c
 8003904:	40020008 	.word	0x40020008

08003908 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8003908:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800390a:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM2)
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d113      	bne.n	800393a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003912:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003916:	69da      	ldr	r2, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003918:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	61da      	str	r2, [r3, #28]
 8003920:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	9300      	str	r3, [sp, #0]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800392a:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800392c:	9b00      	ldr	r3, [sp, #0]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800392e:	f7fd fddd 	bl	80014ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003932:	201c      	movs	r0, #28
 8003934:	f7fd fe0e 	bl	8001554 <HAL_NVIC_EnableIRQ>
 8003938:	e00c      	b.n	8003954 <HAL_TIM_Base_MspInit+0x4c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <HAL_TIM_Base_MspInit+0x54>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d109      	bne.n	8003954 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_TIM_Base_MspInit+0x58>)
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	f042 0202 	orr.w	r2, r2, #2
 8003948:	61da      	str	r2, [r3, #28]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003954:	b003      	add	sp, #12
 8003956:	f85d fb04 	ldr.w	pc, [sp], #4
 800395a:	bf00      	nop
 800395c:	40000400 	.word	0x40000400
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003964:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8003966:	6802      	ldr	r2, [r0, #0]
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_TIM_MspPostInit+0x30>)
 800396a:	429a      	cmp	r2, r3
 800396c:	d110      	bne.n	8003990 <HAL_TIM_MspPostInit+0x2c>
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = StarterPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2402      	movs	r4, #2
 8003970:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);
 8003972:	4669      	mov	r1, sp
 8003974:	4808      	ldr	r0, [pc, #32]	; (8003998 <HAL_TIM_MspPostInit+0x34>)
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = StarterPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);
 800397c:	f7fe f87a 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = InjectorPWM_Pin|CoolerPWM_Pin;
 8003980:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003982:	4669      	mov	r1, sp
 8003984:	4805      	ldr	r0, [pc, #20]	; (800399c <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(StarterPWM_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = InjectorPWM_Pin|CoolerPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398c:	f7fe f872 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003990:	b004      	add	sp, #16
 8003992:	bd10      	pop	{r4, pc}
 8003994:	40000400 	.word	0x40000400
 8003998:	40010800 	.word	0x40010800
 800399c:	40010c00 	.word	0x40010c00

080039a0 <NMI_Handler>:
 80039a0:	4770      	bx	lr

080039a2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80039a2:	e7fe      	b.n	80039a2 <HardFault_Handler>

080039a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80039a4:	e7fe      	b.n	80039a4 <MemManage_Handler>

080039a6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80039a6:	e7fe      	b.n	80039a6 <BusFault_Handler>

080039a8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80039a8:	e7fe      	b.n	80039a8 <UsageFault_Handler>

080039aa <SVC_Handler>:
 80039aa:	4770      	bx	lr

080039ac <DebugMon_Handler>:
 80039ac:	4770      	bx	lr

080039ae <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80039ae:	4770      	bx	lr

080039b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80039b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b2:	f7fd faf3 	bl	8000f9c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80039ba:	f7fd bdfa 	b.w	80015b2 <HAL_SYSTICK_IRQHandler>
	...

080039c0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <DMA1_Channel1_IRQHandler+0x8>)
 80039c2:	f7fd be4d 	b.w	8001660 <HAL_DMA_IRQHandler>
 80039c6:	bf00      	nop
 80039c8:	2000010c 	.word	0x2000010c

080039cc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <TIM2_IRQHandler+0x8>)
 80039ce:	f7fe bf92 	b.w	80028f6 <HAL_TIM_IRQHandler>
 80039d2:	bf00      	nop
 80039d4:	20000154 	.word	0x20000154

080039d8 <_init>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr

080039e4 <_fini>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	bf00      	nop
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr
